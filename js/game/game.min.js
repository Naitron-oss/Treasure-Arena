_assets = {
    fonts: {
        visitorBlack: {
            file: "visitor_black",
            fw: 16,
            fh: 16
        },
        visitor: {
            file: "visitor_gradient",
            fw: 16,
            fh: 16
        },
        visitorLarge: {
            file: "visitor_gradient_large",
            fw: 24,
            fh: 24
        },
        visitorRed: {
            file: "visitor_red",
            fw: 16,
            fh: 16
        },
        visitorLevel: {
            file: "visitor_level",
            fw: 8,
            fh: 8
        },
        miniset2: {
            file: "miniset2",
            fw: 8,
            fh: 9
        },
        semplice: {
            file: "semplice",
            fw: 6,
            fh: 12
        }
    },
    sprites: {
        cursor: {
            file: "cursor_anim",
            fw: 32,
            fh: 32
        },
        tile_wall: {
            file: "tile_wall"
        },
        titlecard2: {
            file: "title6"
        },
        skyline: {
            file: "skyline"
        },
        accuracy: {
            file: "accuracy"
        },
        block: {
            file: "block"
        },
        shadow: {
            file: "shadow"
        },
        grass: {
            file: "grass"
        },
        levelup: {
            file: "levelup"
        },
        pointer_war: {
            file: "pointer_war",
            fw: 64,
            fh: 64
        },
        pointer_rog: {
            file: "pointer_rog",
            fw: 64,
            fh: 64
        },
        pointer_mag: {
            file: "pointer_mag",
            fw: 64,
            fh: 64
        },
        pointer_treasure: {
            file: "pointer_treasure",
            fw: 64,
            fh: 64
        },
        smoketrail: {
            file: "smoketrail",
            fw: 16,
            fh: 16
        },
        fire: {
            file: "fire",
            fw: 16,
            fh: 16
        },
        trap: {
            file: "trap",
            fw: 32,
            fh: 32
        },
        bubble: {
            file: "bubble"
        },
        aggro: {
            file: "aggro2",
            fw: 32,
            fh: 32
        },
        skills: {
            file: "skills",
            fw: 32,
            fh: 32,
            skill: {
                armor: {
                    sx: 0,
                    sy: 0
                },
                invis: {
                    sx: 1,
                    sy: 0
                },
                trap: {
                    sx: 2,
                    sy: 0
                }
            }
        },
        armor: {
            file: "armor"
        },
        frame: {
            file: "frame_169"
        },
        frame2: {
            file: "frame2_169"
        },
        light: {
            file: "light"
        },
        light_small: {
            file: "light_small_soft"
        },
        light_npc: {
            file: "light_npc"
        },
        light_player: {
            file: "light_player"
        },
        light_torch: {
            file: "light_torch_o"
        },
        coin: {
            file: "coin"
        },
        ui: {
            file: "ui"
        },
        super_bar: {
            file: "super_bar",
            fw: 126,
            fh: 4
        },
        buffs: {
            file: "buffs",
            fw: 32,
            fh: 32
        },
        hp_bar: {
            file: "hp_bar",
            fw: 128,
            fh: 20
        },
        latency: {
            file: "latency",
            fw: 20,
            fh: 14
        },
        item_back: {
            file: "item_back",
            fw: 80,
            fh: 64
        },
        item_coin: {
            file: "item_coin",
            fw: 32,
            fh: 32
        },
        items: {
            file: "items",
            fw: 32,
            fh: 32,
            item: {
                potion: {
                    sx: 0,
                    sy: 0,
                    light: !0
                },
                arrows: {
                    sx: 1,
                    sy: 0,
                    light: !0
                },
                rockets: {
                    sx: 2,
                    sy: 0,
                    light: !0
                },
                grenades: {
                    sx: 3,
                    sy: 0,
                    light: !0
                },
                shells: {
                    sx: 4,
                    sy: 0,
                    light: !0
                },
                bullets: {
                    sx: 5,
                    sy: 0,
                    light: !0
                },
                light: {
                    sx: 6,
                    sy: 0,
                    light: !0
                },
                coin: {
                    sx: 7,
                    sy: 0,
                    light: !0
                },
                trap: {
                    sx: 8,
                    sy: 0,
                    light: !1
                },
                melees: {
                    sx: 9,
                    sy: 0,
                    light: !1
                }
            }
        },
        weaponselect: {
            file: "weaponselect",
            fw: 40,
            fh: 40,
            weapon: {
                Melee: 0,
                Arrow: 1,
                Shell: 2,
                Bullet: 3,
                Rocket: 4,
                Grenade: 5
            },
            weapons: "Melee Arrow Shell Bullet Rocket Grenade".split(" ")
        },
        weapons: {
            file: "weapons",
            fw: 32,
            fh: 32,
            weapon: {
                Arrow: {
                    sx: 0,
                    offset: {
                        N: {
                            dx: 0,
                            dy: 0
                        },
                        S: {
                            dx: 2,
                            dy: 0
                        },
                        W: {
                            dx: 0,
                            dy: 0
                        },
                        E: {
                            dx: 0,
                            dy: 0
                        }
                    }
                },
                Rocket: {
                    sx: 1,
                    offset: {
                        N: {
                            dx: 4,
                            dy: 4
                        },
                        S: {
                            dx: 12,
                            dy: 0
                        },
                        W: {
                            dx: 10,
                            dy: 0
                        },
                        E: {
                            dx: -10,
                            dy: 0
                        }
                    }
                },
                Grenade: {
                    sx: 2,
                    offset: {
                        N: {
                            dx: 0,
                            dy: 4
                        },
                        S: {
                            dx: -2,
                            dy: 2
                        },
                        W: {
                            dx: 0,
                            dy: 2
                        },
                        E: {
                            dx: 0,
                            dy: 2
                        }
                    }
                },
                Shell: {
                    sx: 3,
                    offset: {
                        N: {
                            dx: 0,
                            dy: 4
                        },
                        S: {
                            dx: 10,
                            dy: 0
                        },
                        W: {
                            dx: 8,
                            dy: 0
                        },
                        E: {
                            dx: -8,
                            dy: 0
                        }
                    }
                },
                Bullet: {
                    sx: 5,
                    offset: {
                        N: {
                            dx: -16,
                            dy: -6
                        },
                        S: {
                            dx: -6,
                            dy: -3
                        },
                        W: {
                            dx: -7,
                            dy: -3
                        },
                        E: {
                            dx: 7,
                            dy: -3
                        }
                    }
                }
            }
        },
        shells: {
            file: "shells",
            fw: 20,
            fh: 12
        },
        spell: {
            file: "spell",
            fw: 32,
            fh: 20
        },
        rocket: {
            file: "rocket",
            fw: 48,
            fh: 20
        },
        grenade: {
            file: "grenade",
            fw: 18,
            fh: 24
        },
        arrow_E: {
            file: "arrow_E"
        },
        projectile_bone: {
            file: "projectile_bone"
        },
        die: {
            file: "die",
            fw: 16,
            fh: 16
        },
        explode2: {
            file: "explode",
            fw: 16,
            fh: 16
        },
        explode3: {
            file: "explode3",
            fw: 64,
            fh: 64
        },
        slash_N: {
            file: "slash_N",
            fw: 64,
            fh: 64
        },
        slash_S: {
            file: "slash_S",
            fw: 64,
            fh: 64
        },
        slash_W: {
            file: "slash_W",
            fw: 64,
            fh: 64
        },
        slash_E: {
            file: "slash_E",
            fw: 64,
            fh: 64
        },
        weapon_sword1: {
            file: "weapon_sword1",
            fw: 32,
            fh: 32
        },
        weapon_dagger1: {
            file: "weapon_dagger1",
            fw: 32,
            fh: 32
        },
        weapon_staff1: {
            file: "weapon_staff1",
            fw: 32,
            fh: 32
        },
        shield_green: {
            file: "shield3",
            fw: 32,
            fh: 32
        },
        shield_blue: {
            file: "shield4",
            fw: 32,
            fh: 32
        },
        shield_red: {
            file: "shield5",
            fw: 32,
            fh: 32
        },
        collect: {
            file: "collect"
        },
        pickup: {
            file: "pickup",
            fw: 50,
            fh: 96
        },
        class_war: {
            file: "class_war",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0,
                            1
                        ],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8, 0]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8,
                            2
                        ]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        class_rog: {
            file: "class_rogue",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0,
                            0
                        ],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8,
                            0
                        ]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8, 2]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        class_mag: {
            file: "class_mage",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3,
                            3
                        ],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8, 0]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8, 2]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        class_war2: {
            file: "class_war_gold",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3,
                            2
                        ],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6,
                            3
                        ]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8, 0]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8, 2]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        class_rog2: {
            file: "class_rogue_gold",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3,
                            1
                        ],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6,
                            1
                        ]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8, 0]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8, 2]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        class_mag2: {
            file: "class_mage_gold",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3,
                            0
                        ],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0,
                            3
                        ],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [7, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [7, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [7, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [7, 3]
                    ]
                },
                landE: {
                    frames: [
                        [8, 0]
                    ]
                },
                landW: {
                    frames: [
                        [8, 1]
                    ]
                },
                landN: {
                    frames: [
                        [8, 2]
                    ]
                },
                landS: {
                    frames: [
                        [8, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                }
            }
        },
        skeleton: {
            file: "skeleton",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [6, 0],
                        [7, 0],
                        [6, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [6, 1],
                        [7, 1],
                        [6, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [6, 2],
                        [7, 2],
                        [6, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [6, 3],
                        [7, 3],
                        [6, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [3, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [3, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [3, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [3, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [3, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [3, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [3, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [3, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [4, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [4, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [4, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [4, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [3, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [3, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [3, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [3, 3]
                    ]
                },
                landE: {
                    frames: [
                        [3, 0]
                    ]
                },
                landW: {
                    frames: [
                        [3, 1]
                    ]
                },
                landN: {
                    frames: [
                        [3, 2]
                    ]
                },
                landS: {
                    frames: [
                        [3, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                telegraphE: {
                    frames: [
                        [5, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [5, 1]
                    ]
                },
                telegraphN: {
                    frames: [
                        [5,
                            2
                        ]
                    ]
                },
                telegraphS: {
                    frames: [
                        [5, 3]
                    ]
                }
            }
        },
        goblin: {
            file: "goblin",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [6, 0],
                        [7, 0],
                        [6, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [6, 1],
                        [7, 1],
                        [6, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [6, 2],
                        [7, 2],
                        [6, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [6, 3],
                        [7, 3],
                        [6, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [3, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [3, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [3, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [3, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [3, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0,
                            1
                        ],
                        [1, 1],
                        [2, 1],
                        [3, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [3, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [3, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [4, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [4, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [4, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [4, 3]
                    ]
                },
                jumpE: {
                    frames: [
                        [3, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [3, 1]
                    ]
                },
                jumpN: {
                    frames: [
                        [3, 2]
                    ]
                },
                jumpS: {
                    frames: [
                        [3, 3]
                    ]
                },
                landE: {
                    frames: [
                        [3, 0]
                    ]
                },
                landW: {
                    frames: [
                        [3, 1]
                    ]
                },
                landN: {
                    frames: [
                        [3, 2]
                    ]
                },
                landS: {
                    frames: [
                        [3, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                telegraphE: {
                    frames: [
                        [5,
                            0
                        ]
                    ]
                },
                telegraphW: {
                    frames: [
                        [5, 1]
                    ]
                },
                telegraphN: {
                    frames: [
                        [5, 2]
                    ]
                },
                telegraphS: {
                    frames: [
                        [5, 3]
                    ]
                }
            }
        },
        slime: {
            file: "slime",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleN: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleS: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2,
                            0
                        ]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                hitE: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitN: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitS: {
                    frames: [
                        [3, 0]
                    ]
                },
                jumpE: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpN: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpS: {
                    frames: [
                        [2, 0]
                    ]
                },
                landE: {
                    frames: [
                        [1, 0]
                    ]
                },
                landW: {
                    frames: [
                        [1, 0]
                    ]
                },
                landN: {
                    frames: [
                        [1, 0]
                    ]
                },
                landS: {
                    frames: [
                        [1, 0]
                    ]
                },
                attackE: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackN: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackS: {
                    frames: [
                        [0, 0]
                    ]
                },
                telegraphE: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphN: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphS: {
                    frames: [
                        [4, 0]
                    ]
                }
            }
        },
        slime_green: {
            file: "slime_green",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleN: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleS: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakN: {
                    frames: [
                        [0,
                            0
                        ],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakS: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                hitE: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitN: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitS: {
                    frames: [
                        [3, 0]
                    ]
                },
                jumpE: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpN: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpS: {
                    frames: [
                        [2, 0]
                    ]
                },
                landE: {
                    frames: [
                        [1, 0]
                    ]
                },
                landW: {
                    frames: [
                        [1, 0]
                    ]
                },
                landN: {
                    frames: [
                        [1, 0]
                    ]
                },
                landS: {
                    frames: [
                        [1, 0]
                    ]
                },
                attackE: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackN: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackS: {
                    frames: [
                        [0, 0]
                    ]
                },
                telegraphE: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphN: {
                    frames: [
                        [4,
                            0
                        ]
                    ]
                },
                telegraphS: {
                    frames: [
                        [4, 0]
                    ]
                }
            }
        },
        slime_red: {
            file: "slime_red",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleN: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                idleS: {
                    frames: [
                        [0, 0],
                        [0, 0],
                        [1, 0],
                        [1, 0]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0]
                    ]
                },
                sneakS: {
                    frames: [
                        [0,
                            0
                        ],
                        [1, 0],
                        [2, 0]
                    ]
                },
                hitE: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitN: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitS: {
                    frames: [
                        [3, 0]
                    ]
                },
                jumpE: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpW: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpN: {
                    frames: [
                        [2, 0]
                    ]
                },
                jumpS: {
                    frames: [
                        [2, 0]
                    ]
                },
                landE: {
                    frames: [
                        [1, 0]
                    ]
                },
                landW: {
                    frames: [
                        [1, 0]
                    ]
                },
                landN: {
                    frames: [
                        [1, 0]
                    ]
                },
                landS: {
                    frames: [
                        [1, 0]
                    ]
                },
                attackE: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackN: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackS: {
                    frames: [
                        [0, 0]
                    ]
                },
                telegraphE: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphN: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphS: {
                    frames: [
                        [4, 0]
                    ]
                }
            }
        },
        bat: {
            file: "bat",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [0,
                            3
                        ],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [3, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [3, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [3, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [3, 3]
                    ]
                },
                attackE: {
                    frames: [
                        [0, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [0, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [0, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [0, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [3, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [3, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [3, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [3, 0]
                    ]
                },
                telegraphE: {
                    frames: [
                        [4, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [4, 1]
                    ]
                },
                telegraphN: {
                    frames: [
                        [4, 2]
                    ]
                },
                telegraphS: {
                    frames: [
                        [4, 3]
                    ]
                }
            }
        },
        thief: {
            file: "thug",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [3, 0],
                        [3, 0],
                        [3, 0],
                        [4, 0],
                        [5, 0],
                        [4, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [3, 1],
                        [3, 1],
                        [3, 1],
                        [4, 1],
                        [5, 1],
                        [4, 1]
                    ]
                },
                idleN: {
                    frames: [
                        [3, 2],
                        [3, 2],
                        [3, 2],
                        [4, 2],
                        [5, 2],
                        [4, 2]
                    ]
                },
                idleS: {
                    frames: [
                        [3, 3],
                        [3, 3],
                        [3, 3],
                        [4, 3],
                        [5, 3],
                        [4, 3]
                    ]
                },
                walkE: {
                    frames: [
                        [0, 0],
                        [1, 0],
                        [2, 0],
                        [1, 0]
                    ]
                },
                walkW: {
                    frames: [
                        [0, 1],
                        [1, 1],
                        [2, 1],
                        [1, 1]
                    ]
                },
                walkN: {
                    frames: [
                        [0, 2],
                        [1, 2],
                        [2, 2],
                        [1, 2]
                    ]
                },
                walkS: {
                    frames: [
                        [0, 3],
                        [1, 3],
                        [2, 3],
                        [1, 3]
                    ]
                },
                sneakE: {
                    frames: [
                        [1, 0]
                    ]
                },
                sneakW: {
                    frames: [
                        [1, 1]
                    ]
                },
                sneakN: {
                    frames: [
                        [1, 2]
                    ]
                },
                sneakS: {
                    frames: [
                        [1, 3]
                    ]
                },
                hitE: {
                    frames: [
                        [6, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [6, 1]
                    ]
                },
                hitN: {
                    frames: [
                        [6, 2]
                    ]
                },
                hitS: {
                    frames: [
                        [6,
                            3
                        ]
                    ]
                },
                attackE: {
                    frames: [
                        [3, 0]
                    ]
                },
                attackW: {
                    frames: [
                        [3, 1]
                    ]
                },
                attackN: {
                    frames: [
                        [3, 2]
                    ]
                },
                attackS: {
                    frames: [
                        [3, 3]
                    ]
                },
                corpseE: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseW: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseN: {
                    frames: [
                        [5, 0]
                    ]
                },
                corpseS: {
                    frames: [
                        [5, 0]
                    ]
                },
                telegraphE: {
                    frames: [
                        [7, 0]
                    ]
                },
                telegraphW: {
                    frames: [
                        [7, 1]
                    ]
                },
                telegraphN: {
                    frames: [
                        [7, 2]
                    ]
                },
                telegraphS: {
                    frames: [
                        [7, 3]
                    ]
                }
            }
        },
        treasure: {
            file: "treasure",
            fw: 32,
            fh: 32,
            status: {
                idleE: {
                    frames: [
                        [0, 0]
                    ]
                },
                idleW: {
                    frames: [
                        [0, 0]
                    ]
                },
                idleN: {
                    frames: [
                        [0, 0]
                    ]
                },
                idleS: {
                    frames: [
                        [0, 0]
                    ]
                },
                hitE: {
                    frames: [
                        [0, 0]
                    ]
                },
                hitW: {
                    frames: [
                        [0, 0]
                    ]
                },
                hitN: {
                    frames: [
                        [0, 0]
                    ]
                },
                hitS: {
                    frames: [
                        [0, 0]
                    ]
                }
            }
        }
    },
    tilesets: {
        0: {
            file: "0",
            fw: 32,
            fh: 32,
            animated: {
                2: {
                    speed: 30
                },
                11: {
                    speed: 15
                },
                26: {
                    speed: 15
                },
                32: {
                    speed: 10
                },
                45: {
                    speed: 10
                },
                58: {
                    speed: 30
                },
                60: {
                    speed: 30
                },
                66: {
                    speed: 30
                },
                137: {
                    speed: 15
                }
            },
            stairs: [120, 121, 122, 123, 147, 148, 149, 164],
            water: [26, 137],
            gras: [2, 58]
        }
    }
};
var _audio = {
    blip: {
        file: "blip",
        type: "sound"
    },
    arrow: {
        file: "arrow_o",
        type: "sound"
    },
    block: {
        file: "block_o",
        type: "sound"
    },
    block2: {
        file: "prehit",
        type: "sound",
        volume: 65
    },
    bullet: {
        file: "bullet_o",
        type: "sound",
        volume: 90
    },
    hit: {
        file: "hit_o",
        type: "sound"
    },
    potion: {
        file: "potion_o",
        type: "sound",
        volume: 80
    },
    ricochet: {
        file: "ricochet_o",
        type: "sound",
        volume: 80
    },
    jump: {
        file: "jump6",
        type: "sound",
        volume: 80
    },
    pickup: {
        file: "pickup_o",
        type: "sound"
    },
    shell: {
        file: "shell_o",
        type: "sound"
    },
    "switch": {
        file: "switch2",
        type: "sound"
    },
    explode: {
        file: "explode4",
        type: "sound"
    },
    rocket: {
        file: "rocket2",
        type: "sound",
        volume: 90
    },
    thud: {
        file: "grenade2",
        type: "sound"
    },
    die: {
        file: "die6",
        type: "sound"
    },
    coin: {
        file: "star5",
        type: "sound",
        volume: 80
    },
    land: {
        file: "thud",
        type: "sound",
        volume: 70
    },
    slash: {
        file: "slash_o",
        type: "sound",
        volume: 60
    },
    msg: {
        file: "msg2",
        type: "sound",
        volume: 80
    },
    cheer0: {
        file: "cheer3",
        type: "sound",
        volume: 30
    },
    cheer1: {
        file: "cheer6",
        type: "sound",
        volume: 30
    },
    cheer2: {
        file: "cheer7",
        type: "sound",
        volume: 30
    },
    click: {
        file: "select",
        type: "sound"
    },
    pirate: {
        file: "pirate",
        type: "music",
        volume: 60,
        loop: !0
    },
    results: {
        file: "results",
        type: "music",
        volume: 60
    },
    time_machine: {
        file: "timemachine",
        type: "music",
        volume: 60,
        loop: !0
    },
    menu: {
        file: "action",
        type: "music",
        volume: 45,
        loop: !0
    },
    timeless: {
        file: "timeless",
        type: "music",
        volume: 50,
        loop: !0
    },
    superwing_heroes: {
        file: "superwing_heroes",
        type: "music",
        volume: 50,
        loop: !0
    },
    rusty_courier: {
        file: "rusty_courier",
        type: "music",
        volume: 60,
        loop: !0
    },
    funkycastle: {
        file: "funkycastle2",
        type: "music",
        volume: 60,
        loop: !0
    }
};
(function () {
    Function.prototype.extend = function (a) {
        function b() {}
        b.prototype = a.prototype;
        this.prototype = new b;
        this.prototype.constructor = this;
        this.prototype.uber = a.prototype
    }
})();
(function () {
    for (var a = 0, b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !window.requestAnimationFrame; ++c)
        window.requestAnimationFrame = window[b[c] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[b[c] + "CancelAnimationFrame"] || window[b[c] + "RequestCancelAnimationFrame"];
    window.requestAnimationFrame || (window.requestAnimationFrame = function (b, c) {
        var f = (new Date).getTime(),
                g = Math.max(0, 16 - (f - a)),
                h = window.setTimeout(function () {
                    b(f + g)
                }, g);
        a = f + g;
        return h
    });
    window.cancelAnimationFrame || (window.cancelAnimationFrame =
            function (a) {
                clearTimeout(a)
            })
})();
(function () {
    Object.size = Object.keys ? function (a) {
        return Object.keys(a).length
    } : function (a) {
        var b = 0,
                c;
        for (c in a)
            void 0 !== a[c] && b++;
        return b
    }
})();
(function () {
    $.ajaxSetup({
        cache: !0
    })
})();
var Engine = {
    version: "0.4.2.68",
    versionVisible: "0.2.2",
    loaded: 0,
    baseWidth: 640,
    baseHeight: 360,
    scale: 0,
    scaleVisible: 0,
    scaleAuto: !0,
    fullscreen: !0,
    fullscreenScale: 1,
    fullscreenAPI: !1,
    allowContextScale: !1,
    contextSmoothing: !0,
    contextScale: 0,
    width: 0,
    height: 0,
    wH: 0,
    hH: 0,
    ENT_ID: 0,
    browser: {},
    isNodeWebkit: !1,
    updateServer: "http://update.treasurearena.com",
    kongregate: !1,
    debug: !1,
    gamepadSupport: !1,
    gamepadActive: !1,
    particles: !0,
    viewedChangelog: !1,
    webaudio: !1,
    LoadMusicOnDemand: !0,
    StreamMusic: !1,
    ads: {
        show: !1,
        preroll: !1,
        started: 0,
        finished: !1
    },
    _servers: {
        us1: {
            name: "US West #1",
            tag: "u",
            ip: "server1.treasurearena.com",
            port: "8082"
        },
        eu1: {
            name: "Europe",
            tag: "e",
            ip: "server2.treasurearena.com",
            port: "8082"
        },
        us2: {
            name: "US East",
            tag: "n",
            ip: "server3.treasurearena.com",
            port: "8082"
        },
        us3: {
            name: "US West #2",
            tag: "s",
            ip: "server4.treasurearena.com",
            port: "8082"
        },
        eu2: {
            name: "Europe (UK)",
            tag: "k",
            ip: "server5.treasurearena.com",
            port: "8082"
        }
    },
    server: {
        alive: 0,
        connected: !1,
        login: !1,
        ping: 0,
        current: {},
        connect: function (a) {
            var b = this.current;
            Engine.socket = io.connect("http://" + b.ip + ":" + b.port, a)
        }
    },
    branding: !1,
    brandingsAvailable: "a10 fgl clay leadbolt cpmstar cpmstarpreroll miniclip".split(" "),
    brandingCustom: {
        a10: !0,
        fgl: !1,
        clay: !1,
        leadbolt: !1,
        cpmstar: !1,
        cpmstarpreroll: !1,
        miniclip: !0
    },
    splashscreenCustom: {
        a10: !0,
        fgl: !1,
        clay: !1,
        leadbolt: !1,
        cpmstar: !1,
        cpmstarpreroll: !1,
        miniclip: !1
    },
    shareUrlCustom: {
        a10: !1,
        fgl: !1,
        clay: !1,
        leadbolt: !1,
        cpmstar: !1,
        cpmstarpreroll: !1,
        miniclip: "http://www.miniclip.com/games/treasure-arena/"
    },
    allowLobbiesAd: {
        a10: !0,
        fgl: !0,
        clay: !0,
        leadbolt: !0,
        cpmstar: !0,
        cpmstarpreroll: !0,
        miniclip: !1
    },
    allowFullscreen: {
        a10: !0,
        fgl: !0,
        clay: !0,
        leadbolt: !0,
        cpmstar: !0,
        cpmstarpreroll: !0,
        miniclip: !1
    },
    allowChat: {
        a10: !0,
        fgl: !0,
        clay: !0,
        leadbolt: !0,
        cpmstar: !0,
        cpmstarpreroll: !0,
        miniclip: !1
    },
    frameStep: 1E3 / 60,
    fps: {
        count: 0,
        timeline: 0,
        fps: 0,
        visible: !1,
        capture: !0,
        history: [],
        historyMax: 600,
        doCapture: function () {
            if (1E4 > Engine.now - this.capture)
                this.history.push(this.fps);
            else {
                var a = this.getAvarage();
                this.capture = !1;
                this.history.length = 0;
                Engine.particles = !a || 50 > a ?
                        !1 : !0
            }
        },
        getAvarage: function () {
            for (var a = 0, b = 0, c = this.history.length; c--; )
                "number" !== typeof this.history[c] ? b++ : a += this.history[c];
            return a /= this.history.length - b
        },
        update: function (a) {
            this.timeline += a;
            this.count++;
            1E3 <= this.timeline && (this.timeline = 0, this.fps = this.count, this.count = 0)
        },
        draw: function () {
            this.visible && Engine.text("visitor", this.fps, 0, 0)
        }
    },
    lastFrame: +new Date,
    deltaT: 0,
    dt: 0,
    tick: 0,
    timeline: 0,
    idle: !1,
    state: 0,
    math: {
        PI: Math.PI
    },
    keys: {
        CTRL: !1,
        UP: !1,
        DOWN: !1,
        LEFT: !1,
        RIGHT: !1,
        FIRE: !1,
        JUMP: !1,
        RUN: !1,
        BLOCK: !1,
        SKILL1: !1,
        WEAPON: !1,
        WHEEL: !1,
        MOUSEDOWN: !1,
        MOUSEPOS: {
            x: 0,
            y: 0
        },
        STICK: {
            x: 0,
            y: 0
        },
        STICKDISTANCE: 1,
        START: !1,
        B: !1,
        Y: !1,
        X: !1,
        BACK: !1,
        CONSOLE: !1
    },
    typo: {
        A: [0, 0],
        B: [1, 0],
        C: [2, 0],
        D: [3, 0],
        E: [4, 0],
        F: [5, 0],
        G: [6, 0],
        H: [7, 0],
        I: [8, 0],
        J: [9, 0],
        K: [10, 0],
        L: [11, 0],
        M: [12, 0],
        N: [13, 0],
        O: [14, 0],
        P: [15, 0],
        Q: [16, 0],
        R: [17, 0],
        S: [18, 0],
        T: [19, 0],
        U: [20, 0],
        V: [21, 0],
        W: [22, 0],
        X: [23, 0],
        Y: [24, 0],
        Z: [25, 0],
        " ": [26, 0],
        a: [0, 1],
        b: [1, 1],
        c: [2, 1],
        d: [3, 1],
        e: [4, 1],
        f: [5, 1],
        g: [6, 1],
        h: [7, 1],
        i: [8, 1],
        j: [9, 1],
        k: [10, 1],
        l: [11, 1],
        m: [12, 1],
        n: [13, 1],
        o: [14, 1],
        p: [15, 1],
        q: [16, 1],
        r: [17, 1],
        s: [18, 1],
        t: [19, 1],
        u: [20, 1],
        v: [21, 1],
        w: [22, 1],
        x: [23, 1],
        y: [24, 1],
        z: [25, 1],
        0: [0, 2],
        1: [1, 2],
        2: [2, 2],
        3: [3, 2],
        4: [4, 2],
        5: [5, 2],
        6: [6, 2],
        7: [7, 2],
        8: [8, 2],
        9: [9, 2],
        ".": [10, 2],
        ",": [11, 2],
        "-": [12, 2],
        _: [13, 2],
        "?": [14, 2],
        "!": [15, 2],
        '"': [16, 2],
        "%": [17, 2],
        "&": [18, 2],
        "/": [19, 2],
        "(": [20, 2],
        ")": [21, 2],
        "=": [22, 2],
        "*": [23, 2],
        ":": [24, 2],
        ";": [25, 2],
        "<": [26, 2],
        ">": [27, 2],
        "|": [28, 2],
        "'": [29, 2],
        "\\": [30, 2],
        "+": [31, 2]
    },
    fullscreenLaunch: function (a) {
        if (Engine.isNodeWebkit)
            NW.gui.Window.get().enterFullscreen();
        else {
            a = a || document.documentElement;
            for (var b = ["requestFullScreen", "webkitRequestFullScreen", "mozRequestFullScreen"], c = 0; c < b.length; c++)
                if (a[b[c]]) {
                    a[b[c]](Element.ALLOW_KEYBOARD_INPUT);
                    break
                }
        }
    },
    fullscreenCancel: function (a) {
        if (Engine.isNodeWebkit)
            NW.gui.Window.get().leaveFullscreen();
        else {
            a = ["cancelFullScreen", "webkitCancelFullScreen", "mozCancelFullScreen"];
            for (var b = 0; b < a.length; b++)
                if (document[a[b]]) {
                    document[a[b]]();
                    break
                }
        }
    },
    fullscreenCheck: function () {
        Engine.fullscreenAPI = document.fullscreenElement ||
                document.mozFullScreenElement || document.webkitFullscreenElement || Engine.isNodeWebkit ? !0 : !1;
        Engine.Elements.elements.options.process()
    },
    text: function (a, b, c, d, e, f, g) {
        e = e ? e : !1;
        a = Engine.Assets.fonts[a];
        b = b.toString();
        g = g || Engine.canvas;
        g = g.ctx;
        void 0 != f && (g.save(), g.translate(c + a.fw / 2 * -f, d + a.fh / 2 * -f), g.scale(1 + f, 1 + f), c = 10 * Engine.scale, d = Engine.scale);
        var h, k = b.length,
                l, m, n, p, r, q, s, v;
        for (h = 0; h < k; h++)
            m = Engine.typo[b[h]], void 0 !== m && (l = m[0] * a.fw | 0, m = m[1] * a.fh | 0, n = a.fw | 0, p = a.fh | 0, r = e ? c + h * (a.fw - a.fw / 4) - k *
                    (a.fw - a.fw / 4) / 2 | 0 : c + h * (a.fw - a.fw / 4) | 0, q = d | 0, s = n, v = p, g.drawImage(a, l, m, n, p, r, q, s, v));
        void 0 !== f && g.restore()
    },
    loadingStack: [],
    history: {
        pushState: function (a) {
            a = a || {};
            void 0 === a.title && (a.title = document.title);
            if (void 0 === a.path) {
                var b = Engine.getURLParameter("ref");
                a.path = b ? window.location.pathname + "?ref=" + b : window.location.pathname
            }
            try {
                history.replaceState("", a.title, a.path)
            } catch (c) {
            }
        }
    },
    getScript: function (a) {
        $.getScript(a).done(function (a, c) {
            console.log(c)
        }).fail(function (b, c, d) {
            console.log("fail");
            setTimeout(function () {
                Engine.getScript(a)
            }, 1E3)
        })
    },
    getURLParameter: function (a) {
        return decodeURIComponent((RegExp("[?|&]" + a + "=([^&;]+?)(&|#|;|$)").exec(location.search) || [, ""])[1].replace(/\+/g, "%20")) || null
    },
    detectMobile: function () {
        var a = !1,
                b = navigator.userAgent || navigator.vendor || window.opera;
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(b) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(b.substr(0,
                        4)))
            a = !0;
        return a
    },
    detectBrowser: function () {
        this.browser = $.browser;
        var a = this.detectMobile(),
                b = !!window.opera || 0 <= navigator.userAgent.indexOf(" OPR/") || 0 <= navigator.userAgent.indexOf("Opera"),
                c = 0 <= navigator.userAgent.indexOf(" OPR/"),
                d = "undefined" !== typeof InstallTrigger;
        Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");
        var b = !!window.chrome && !b || 0 <= navigator.userAgent.indexOf("Chrome"),
                e = this.browser.msie && 9 <= parseInt(this.browser.version),
                f = !(!navigator.userAgent.match(/Trident/) ||
                        navigator.userAgent.match(/MSIE/)),
                g = "object" == typeof process;
        g && (Engine.isNodeWebkit = !0);
        this.browser.supported = (e || f || b || d || c || g) && !a ? !0 : !1
    },
    rand: function (a, b) {
        return Math.floor(Math.random() * (b - a + 1) + a)
    },
    capFirst: function (a) {
        return a.charAt(0).toUpperCase() + a.slice(1)
    },
    info: function (a) {
        Engine.Elements.append("info");
        $("#info").html(a).animate({
            top: 0
        }, {
            duration: 300,
            complete: function () {
                $("#info").delay(2E3).animate({
                    top: -100
                }, {
                    duration: 300,
                    complete: function () {
                        Engine.Elements.remove("info")
                    }
                })
            }
        })
    },
    saveSettings: function () {
        this.setCookie("settings", JSON.stringify({
            fullscreen: this.fullscreen,
            audio: {
                sound: this.audio.sound,
                music: this.audio.music,
                volume: this.audio.volume
            }
        }), 100)
    },
    loadSettings: function () {
        var a = this.getCookie("settings");
        if (!a)
            return !1;
        a = JSON.parse(a);
        this.fullscreen != a.fullscreen && (this.fullscreen = a.fullscreen, Engine.fullscreen || Engine.removeFullscreen(), Engine.updateScreen());
        this.audio.sound != a.audio.sound && (this.audio.sound = a.audio.sound, Engine.audio.sound ? Engine.audio.unmute("sound") :
                Engine.audio.mute("sound"));
        this.audio.music != a.audio.music && (this.audio.music = a.audio.music, Engine.audio.music ? Engine.audio.unmute("music") : Engine.audio.mute("music"));
        this.audio.volume.sound != a.audio.volume.sound && Engine.audio.volumeSoundChange(a.audio.volume.sound);
        this.audio.volume.music != a.audio.volume.music && Engine.audio.volumeMusicChange(a.audio.volume.music);
        return !0
    },
    setCookie: function (a, b, c) {
        var d = new Date;
        d.setDate(d.getDate() + c);
        b = escape(b) + (null == c ? "" : "; expires=" + d.toUTCString());
        document.cookie =
                a + "=" + b + "; path=/"
    },
    getCookie: function (a) {
        var b, c, d = document.cookie.split(";"),
                e = d.length,
                f = !1;
        for (b = 0; b < e; b++)
            if (c = d[b].substr(0, d[b].indexOf("=")), c = c.replace(/^\s+|\s+$/g, ""), c == a) {
                a = d[b].substr(d[b].indexOf("=") + 1);
                f = unescape(a);
                break
            }
        return f
    },
    checkCollision: function (a, b) {
        var c, d = a.length,
                e, f, g, h = {},
                k = {},
                l, m, n, p;
        for (c = 0; c < d; c++)
            if (f = a[c], f.collidable)
                for (h.left = f.data.x, h.right = f.data.x + 1, h.top = f.data.y, h.bottom = f.data.y + 1, e = c + 1; e < d; e++)
                    p = n = m = l = !1, g = a[e], !g.collidable || ("projectile" === g.type &&
                            !g.canHurtSelf && g.owner === f.id || "projectile" === f.type && !f.canHurtSelf && f.owner === g.id || "projectile" === g.type && f.inAir || "projectile" === f.type && g.inAir || g.data.id == f.data.id) || (k.left = g.data.x + 0.2, k.right = g.data.x + 1 - 0.2, k.top = g.data.y + 0.4, k.bottom = g.data.y + 1 - 0.4, (h.top < k.top && h.bottom > k.top && h.right > k.left && h.left < k.right || h.bottom > k.bottom && h.top < k.bottom && h.right > k.left && h.left < k.right) && Engine.collisionAABB(h, k) && (p = m = l = !0), (h.left < k.left && h.right > k.left && h.bottom > k.top && h.top < k.bottom || h.right >
                            k.right && h.left < k.right && h.bottom > k.top && h.top < k.bottom) && Engine.collisionAABB(h, k) && (l && (p = !1), n = m = !0), m && (f.collide(g, n, p), g.collide(f, n, p)))
    },
    lineDistance: function (a, b) {
        var c = 0,
                d = 0,
                c = b.x - a.x,
                d = b.y - a.y;
        return Math.sqrt(c * c + d * d)
    },
    clone: function (a) {
        if (null == a || "object" != typeof a)
            return a;
        if (a instanceof Date) {
            var b = new Date;
            b.setTime(a.getTime());
            return b
        }
        if (a instanceof Array) {
            var b = [],
                    c, d = a.length;
            for (c = 0; c < d; c++)
                b[c] = this.clone(a[c]);
            return b
        }
        if (a instanceof Object) {
            b = {};
            for (c in a)
                a.hasOwnProperty(c) &&
                        (b[c] = this.clone(a[c]));
            return b
        }
    },
    collisionAABB: function (a, b) {
        return !(b.left > a.right || b.right < a.left || b.top > a.bottom || b.bottom < a.top)
    },
    hue2rgb: function (a, b, c) {
        0 > c && (c += 1);
        1 < c && (c -= 1);
        return 1 > 6 * c ? a + 6 * (b - a) * c : 1 > 2 * c ? b : 2 > 3 * c ? a + 6 * (b - a) * (2 / 3 - c) : a
    },
    hsla: function (a, b, c, d) {
        a /= 360;
        b /= 100;
        c /= 100;
        d = d ? d : 1;
        var e, f;
        0 == b ? (b = 255 * c, e = 255 * c, a = 255 * c) : (f = 0.5 > c ? c * (1 + b) : c + b - b * c, c = 2 * c - f, b = 255 * this.hue2rgb(c, f, a + 1 / 3) | 0, e = 255 * this.hue2rgb(c, f, a) | 0, a = 255 * this.hue2rgb(c, f, a - 1 / 3) | 0);
        return "rgba(" + b + ", " + e + ", " + a + ", " + d + ")"
    },
    createCanvas: function () {
        var a;
        a = document.createElement("canvas");
        a.id = "c";
        a.width = this.baseWidth;
        a.height = this.baseHeight;
        a.ctx = a.getContext("2d");
        this.disableSmoothing(a);
        $("#screen").append(a);
        Engine.canvas = a
    },
    createOverlay: function () {
        $("#screen").append('<div id="overlay"></div>')
    },
    makeFullscreen: function () {
        var a = document.getElementById("screen").offsetWidth,
                b = document.getElementById("screen").offsetHeight,
                c = Math.min(window.innerWidth / a, window.innerHeight / b);
        this.fullscreenScale = c;
        $("#screen").css("transform-origin",
                "0 0").css("transform", "scale3d(" + c + ", " + c + ", 1)");
        $("#screen").css("-ms-transform-origin", "0 0").css("-ms-transform", "scale(" + c + ", " + c + ")");
        $("#screen").css("-webkit-transform-origin", "0 0").css("-webkit-transform", "scale3d(" + c + ", " + c + ", 1)");
        $("#screen").css("-moz-transform-origin", "0 0").css("-moz-transform", "scale3d(" + c + ", " + c + ", 1)");
        b = (window.innerHeight - b * c) / 2 | 0;
        a = (window.innerWidth - a * c) / 2 | 0;
        $("#screen").css("top", b + "px").css("left", a + "px")
    },
    removeFullscreen: function () {
        this.fullscreenScale =
                1;
        $("#screen").css("transform-origin", "0 0").css("transform", "scale3d(1, 1, 1)");
        $("#screen").css("-ms-transform-origin", "0 0").css("-ms-transform", "scale(1, 1)");
        $("#screen").css("-webkit-transform-origin", "0 0").css("-webkit-transform", "scale3d(1, 1, 1)");
        $("#screen").css("-moz-transform-origin", "0 0").css("-moz-transform", "scale3d(1, 1, 1)")
    },
    updateScreen: function (a) {
        a = a || (this.contextSmoothing ? this.scale : this.contextScale);
        var b;
        if (0 == a || this.scaleAuto)
            a = Math.min(window.innerWidth / this.baseWidth,
                    window.innerHeight / this.baseHeight), a = 2 * a | 0, a /= 2, a = 3 < a ? 3 : a, a = 2 < a && 3 > a ? 2 : a, a = 1 > a ? 1 : a, a |= 0;
        if (this.contextSmoothing) {
            if (a != this.scale) {
                this.resize(a);
                return
            }
        } else if (a != this.contextScale) {
            this.resizeContext(a);
            return
        }
        a = (window.innerWidth - this.canvas.width) / 2 | 0;
        b = (window.innerHeight - this.canvas.height) / 2 | 0;
        $("#screen").css("left", a + "px").css("top", b + "px");
        this.updateOverlay(this.contextSmoothing ? this.scale : this.contextScale);
        this.fullscreen && this.makeFullscreen()
    },
    updateOverlay: function (a) {
        a /= 2;
        $("#overlay").css("transform-origin",
                "0 0").css("transform", "scale3d(" + a + ", " + a + ", 1)");
        $("#overlay").css("-ms-transform-origin", "0 0").css("-ms-transform", "scale(" + a + ", " + a + ")");
        $("#overlay").css("-webkit-transform-origin", "0 0").css("-webkit-transform", "scale3d(" + a + ", " + a + ", 1)");
        $("#overlay").css("-moz-transform-origin", "0 0").css("-moz-transform", "scale3d(" + a + ", " + a + ", 1)");
        $("#overlay").css("width", (2 * this.baseWidth | 0) + "px").css("height", (2 * this.baseHeight | 0) + "px")
    },
    disableSmoothing: function (a) {
        try {
            a.ctx.webkitImageSmoothingEnabled = !1, a.ctx.imageSmoothingEnabled = !1, a.ctx.imageSmoothingEnabled = !1, a.ctx.oImageSmoothingEnabled = !1, Engine.contextSmoothing && Engine.allowContextScale && (Engine.contextSmoothing = !1)
        } catch (b) {
            console.log("Rendering mode not available")
        }
    },
    resizeContext: function (a) {
        this.width = this.baseWidth;
        this.height = this.baseHeight;
        this.wH = this.width / 2;
        this.hH = this.height / 2;
        this.contextScale = a;
        this.scale = 1;
        this.canvas.width = this.width * a;
        this.canvas.height = this.height * a;
        this.updateScreen(a);
        this.disableSmoothing(this.canvas);
        this.canvas.ctx.scale(Engine.contextScale, Engine.contextScale);
        this.Assets.addAll(this.scale);
        this.addLoading(function () {
            Engine.Game ? (Engine.Game.reloadMap(), Engine.Game.rebufferObjects()) : (Engine.Game = new Game, Engine.Game.init())
        })
    },
    resize: function (a) {
        this.width = this.baseWidth * a;
        this.height = this.baseHeight * a;
        this.wH = this.width / 2;
        this.hH = this.height / 2;
        this.scale = a;
        this.contextScale = 1;
        this.canvas.width = this.width;
        this.canvas.height = this.height;
        this.updateScreen();
        this.disableSmoothing(this.canvas);
        this.Assets.addAll(this.scale);
        var b = this;
        this.addLoading(function () {
            Engine.Game ? (Engine.Game.reloadMap(), Engine.Game.rebufferObjects()) : b.addSplashScreen(function () {
                Engine.Game = new Game;
                Engine.Game.init()
            })
        })
    },
    addSplashScreen: function (a) {
        a = new Engine.Screens.Splash(a);
        this.loadingStack.push(a)
    },
    addLoading: function (a) {
        a = new Engine.Screens.Loading(a);
        this.loadingStack.push(a)
    },
    checkLoadingStack: function () {
        var a = this.loadingStack.length,
                b, c, d = !0;
        if (0 < a) {
            for (b = 0; b < a; b++)
                c = this.loadingStack[b], c.update(),
                        c.draw(), c.kill && (this.loadingStack.splice(b, 1), b--, a--), c.done || (d = !1);
            if (!d)
                return !1
        }
        return !0
    },
    loop: function () {
        var a, b, c;
        this.now = a = Date.now();
        this.deltaT = b = a - this.lastFrame;
        this.dt = c = b / (1E3 / 60);
        this.timeline += c;
        60 < this.timeline && (this.timeline = 0);
        0 < Engine.Elements.inputHandlers.length && Engine.Elements.inputHandlers[0].e.update();
        this.checkLoadingStack() && this.Game.render(c);
        this.fps.update(b);
        this.fps.draw();
        this.lastFrame = a;
        requestAnimationFrame(this.loop.bind(this))
    },
    clearCanvas: function (a) {
        a.ctx.clearRect(0,
                0, a.width, a.height)
    },
    globalVars: {
        states: [],
        capture: function () {
            var a = [],
                    b;
            for (b in window)
                a.push(b);
            this.states.push(a)
        },
        compare: function () {
            this.capture();
            var a = this.states.length - 1,
                    b = a - 1;
            if (!(0 > b)) {
                for (var c = [], d = [], e, f = 0; f < this.states[a].length; f++) {
                    e = !1;
                    for (var g = 0; g < this.states[b].length; g++)
                        if (this.states[b][g] === this.states[a][f]) {
                            e = !0;
                            break
                        }
                    e || (e = this.states[a][f], g = {}, g[e] = window[e], c.push(e), d.push(g))
                }
                this.states.splice(0, 1);
                0 === c.length ? console.log("No differences found.") : (console.log(c),
                        console.log(d))
            }
        }
    },
    marquee: {
        start: function (a, b) {
            a.html(b);
            if (!a.hasClass("running")) {
                a.css({
                    overflow: "hidden",
                    width: "100%"
                });
                a.addClass("running");
                a.wrapInner("<span>");
                a.find("span").css({
                    display: "inline-block",
                    "text-align": "center"
                });
                a.append(a.find("span").clone());
                a.wrapInner("<div>");
                a.find("div").css("width", 2 * a.find("span").innerWidth() | 0);
                var c = function () {
                    $(this).css("margin-left", "0%");
                    $(this).animate({
                        "margin-left": -$(this).width() / 2 | 0
                    }, 4E4, "linear", c);
                    0 == $("#marquee").length && Engine.marquee.stop(a)
                };
                c.call(a.find("div"))
            }
        },
        stop: function (a) {
            a.find("div").stop(!0)
        }
    },
    checkServerAlive: function (a, b) {
        if (void 0 !== a.id)
            var c = Engine._servers[a.id];
        else if (void 0 !== a.tag)
            for (c in Engine._servers)
                if (Engine._servers[c].tag === a.tag) {
                    c = Engine._servers[c];
                    break
                }
        if (c) {
            Engine.server.current = c;
            var d = document.createElement("script");
            d.src = "http://" + c.ip + ":" + c.port + "/socket.io/socket.io.js?v=" + Date.now();
            d.id = "socketio";
            d.onload = function () {
                document.body.removeChild(d);
                Engine.server.alive = 1;
                b && b()
            };
            d.onerror = function () {
                document.body.removeChild(d);
                Engine.server.alive = 0;
                b && b()
            };
            document.body.appendChild(d)
        } else
            Engine.server.alive = 0, b && b()
    },
    share: function () {
        $("#share").on("click", ".on", function (a) {
            a = $(this).attr("id");
            var b, c = ($(window).width() - 800) / 2,
                    d = ($(window).height() - 500) / 2;
            switch (a) {
                case "facebook":
                    b = "http://www.facebook.com/sharer/sharer.php?u=http://treasurearena.com";
                    break;
                case "twitter":
                    b = "https://twitter.com/share?text=Try out the HTML5 game Treasure Arena!&url=http://treasurearena.com";
                    break;
                case "gplus":
                    b = "https://plus.google.com/share?url=http://treasurearena.com"
            }
            window.open(b,
                    "", "left=" + c + ",top=" + d + ",width=800,height=500,toolbar=0,resizable=1");
            return !1
        })
    },
    getScripts: function (a, b) {
        $.getScript(a.shift(), a.length ? function () {
            Engine.getScripts(a, b)
        } : b)
    },
    initGamepad: function () {
        var a = new Gamepad;
        this.gamepad = a;
        a.bind(Gamepad.Event.CONNECTED, function (a) {
            Engine.gamepadSupport = !0;
            Engine.Elements.elements.gamepad_detect.visible && (Engine.gamepadActive = !0, Engine.Elements.remove("gamepad_detect"), Engine.Elements.elements.options.process())
        });
        a.bind(Gamepad.Event.DISCONNECTED, function (a) {
            Engine.gamepadSupport = !1
        });
        a.bind(Gamepad.Event.UNSUPPORTED, function (a) {
            Engine.gamepadSupport = !1
        });
        a.init() && Engine.bindButtons()
    },
    initFGL: function (a) {
        var b = document.createElement("script");
        b.src = "js/fgl.js";
        b.onload = function () {
            fgl.onReady(function () {
                a()
            })
        };
        b.onerror = function () {
            console.log("Error loading FGL API.");
            a()
        };
        document.body.appendChild(b)
    },
    initSpil: function (a) {
        var b = document.createElement("script");
        b.src = "http://cdn.gameplayer.io/api/js/game.js";
        b.onload = function () {
            SpilData = {
                id: "576742227280292150"
            };
            GameAPI.loadAPI(function (b) {
                console.log("GameAPI version " +
                        b.version + " loaded!");
                window.apiInstance = b;
                a()
            }, SpilData)
        };
        b.onerror = function () {
            console.log("Error loading Spil API.");
            a()
        };
        document.body.appendChild(b)
    },
    initMiniclip: function (a) {
        window.apiInstance = window.apiInstance || {
            Branding: {
                getLogo: function () {
                    return {
                        image: "http://play.treasurearena.com/gfx/branding/miniclip/Miniclip_com_Outline.png",
                        action: "http://www.miniclip.com"
                    }
                },
                getSplashScreen: function () {
                    return {
                        show: !1,
                        action: "http://www.miniclip.com"
                    }
                },
                getLink: function () {
                    return {
                        image: !1,
                        action: "http://www.miniclip.com"
                    }
                }
            }
        };
        Engine.initCPMStar(a)
    },
    startAds: function () {
        Engine.audio.music && Engine.audio.mute("music");
        Engine.socket.emit("startAds", {
            branding: Engine.branding
        })
    },
    stopAds: function () {
        Engine.audio.music && Engine.audio.unmute("music");
        Engine.socket.emit("stopAds")
    },
    GameBreak: function (a, b) {
        a();
        setTimeout(b, 3E3)
    },
    initKongregate: function (a) {
        this.checkBranding();
        if (self != top || this.branding)
            if (this.branding)
                switch (this.branding) {
                    case "a10":
                        this.initSpil(a);
                        break;
                    case "miniclip":
                        this.initMiniclip(a);
                        break;
                    case "fgl":
                        this.initFGL(a);
                        break;
                    case "clay":
                        this.initClay(a);
                        break;
                    case "leadbolt":
                        this.initLeadbolt(a);
                        break;
                    case "cpmstar":
                        this.initCPMStar(a);
                        break;
                    case "cpmstarpreroll":
                        this.initCPMStar(a)
                }
            else if (-1 !== document.referrer.indexOf("gamejolt"))
                Engine.ads.show = !1, Engine.ads.preroll = !1, this.initCPMStar(a);
            else if (-1 !== document.referrer.indexOf("kongregate")) {
                Engine.ads.show = !1;
                Engine.ads.preroll = !1;
                var b = document.createElement("script");
                b.src = "http://www.kongregate.com/javascripts/kongregate_api.js";
                b.onload = function () {
                    kongregateAPI.loadAPI(function () {
                        Engine.kongregate = !0;
                        kongregate = kongregateAPI.getAPI();
                        a()
                    })
                };
                b.onerror = function () {
                    this.initCPMStar(a)
                };
                document.body.appendChild(b)
            } else
                this.initCPMStar(a);
        else
            this.initCPMStar(a)
    },
    initLeadbolt: function (a) {
        Engine.branding = "leadbolt";
        a()
    },
    initLeadboltAd: function () {
        Engine.startAds();
        var a = document.createElement("script");
        a.src = "http://ad.leadboltmobile.net/show_app_ad.js?section_id=810499515";
        a.onload = function () {
            console.log("Leadbolt ad loaded.")
        };
        a.onerror = function () {
            console.log("Error loading Leadbolt ad.");
            Engine.stopAds()
        };
        $("#overlay").append('<div id="ad_leadbolt"></div>');
        document.getElementById("ad_leadbolt").appendChild(a);
        setTimeout(function () {
            $("#ad_leadbolt").remove();
            Engine.stopAds()
        }, 1E4)
    },
    initCPMStar: function (a) {
        Engine.branding || (Engine.branding = "cpmstar");
        $("#screen").append('<div id="cpmstar_wrapper" style="position: absolute; width: 100%; height: 100%; z-index: 9999; display: none;"></div>');
        $("body").append('<div id="cpmstar_preroll_wrapper" style="position: absolute; width: 100%; height: 100%; z-index: 9999; display: none;"></div>');
        a()
    },
    initCPMStarAd: function () {
        Engine.Elements.append("ad_cpmstar");
        setTimeout(function () {
            Engine.Elements.remove("ad_cpmstar")
        }, 1E4)
    },
    initCPMStarAdPreroll: function () {
        Engine.Elements.append("ad_cpmstar_preroll");
        setTimeout(function () {
            Engine.Elements.remove("ad_cpmstar_preroll")
        }, 3E4)
    },
    initClay: function (a) {
        Engine.branding = "clay";
        Clay = window.Clay || {};
        Clay.gameKey = "treasurearena";
        Clay.options = {
            debug: !1,
            fail: function () {
                Engine.ads.show = !1;
                Engine.ads.preroll = !1;
                a()
            }
        };
        Clay.readyFunctions = [];
        Clay.ready = function (a) {
            Clay.readyFunctions.push(a)
        };
        Clay.loadFunctions = [];
        Clay.load = function (a) {
            Clay.loadFunctions.push(a)
        };
        var b = document.createElement("script");
        b.async = !0;
        b.src = ("https:" == document.location.protocol ? "https://" : "http://") + "clay.io/api/api-ads.js";
        var c = document.getElementsByTagName("script")[0];
        c.parentNode.insertBefore(b, c);
        Clay.load(function () {
            console.log("Clay.io API loaded.");
            Engine.ads.preroll ? Engine.initPreroll(a) : a()
        })
    },
    initPreroll: function (a) {
        Engine.ads.started = Date.now();
        Engine.ads.finished = !1;
        try {
            preroll = new Clay.Advertisement({
                size: "preroll",
                allowSkip: !1,
                duration: 1E4,
                onSkipStart: function () {},
                onHide: function () {
                    clearInterval(c);
                    Engine.ads.finished = !0;
                    a()
                }
            })
        } catch (b) {
            Engine.ads.finished = !0, a()
        }
        $(".clay-load-bar-text").html("Loading...");
        $(".clay-preroller").after('<div id="ad_info">This ad directly supports Treasure Arena,<br />and keeps it free to play.</div>');
        var c = setInterval(function () {
            var a = 1E4 - (Date.now() - Engine.ads.started),
                    a = Math.ceil(a / 1E3),
                    b = $(".clay-preroller").offset().top + $(".clay-preroller").height();
            $("#ad_info").css("top",
                    b);
            0 >= a && (Engine.ads.finished = !0, clearInterval(c))
        }, 500)
    },
    checkVersionUpdate: function () {
        $.ajax({
            url: this.isNodeWebkit ? Engine.updateServer + "/version.json" : "version.json",
            dataType: "json",
            cache: !1,
            success: function (a) {},
            async: !1
        });
        var a = this.getCookie("version");
        a && (a != this.versionVisible && !Engine.viewedChangelog) && Engine.Elements.append("changelog");
        this.setCookie("version", this.versionVisible, 100);
        return !0
    },
    checkBranding: function () {
        var a = this.getURLParameter("ref");
        a && -1 != this.brandingsAvailable.indexOf(a) &&
                (this.branding = a)
    },
    init: function () {
        this.detectBrowser();
        this.isNodeWebkit && (NW = new NW, NW.init());
        this.createOverlay();
        this.Elements.init();
        this.browser.supported ? (this.createCanvas(), this.updateScreen(), this.audio.init(), this.bindEvents(), this.bindKeys(), this.loadSettings(), this.loop()) : Engine.Elements.append("unsupported")
    }
};
window.onload = function () {
    Engine.initKongregate(function () {
        Engine.init()
    })
};
Engine.bindEvents = function () {
    try {
        history.navigationMode = "compatible"
    } catch (a) {
    }
    window.addEventListener("focus", function () {
        Engine.idle = !1
    }, !1);
    window.addEventListener("blur", function () {
        Engine.idle = !0
    }, !1);
    window.oncontextmenu = function (a) {
        a.preventDefault();
        a.stopPropagation();
        return !1
    };
    window.addEventListener("resize", function () {
        Engine.updateScreen()
    }, !1);
    document.addEventListener("fullscreenchange", function (a) {
        Engine.fullscreenCheck()
    }, !1);
    document.addEventListener("mozfullscreenchange", function (a) {
        Engine.fullscreenCheck()
    }, !1);
    document.addEventListener("webkitfullscreenchange", function (a) {
        Engine.fullscreenCheck()
    }, !1);
    $("#screen").on("mousedown", ".button, .arrow_left, .arrow_right, .empty, .bot .name, .map", function (a) {
        Engine.audio.play("click")
    })
};
Engine.screen = document.getElementById("screen");
Engine.bindButtons = function () {
    var a = Engine.gamepad;
    a.bind(Gamepad.Event.BUTTON_DOWN, function (a) {
        Engine.gamepadSupport && !Engine.gamepadActive && (Engine.gamepadActive = !0);
        Engine.gamepadActive && (0 === a.mapping && (Engine.keys.JUMP = !0), 1 === a.mapping && (Engine.keys.B = !0), 2 === a.mapping && (Engine.keys.X = !0), 3 === a.mapping && (Engine.keys.Y = !0), 7 === a.mapping && (Engine.keys.JUMP = !0), 2 === a.mapping && (Engine.keys.SKILL1 = !0), 6 === a.mapping && (Engine.keys.BLOCK = !0), 8 === a.mapping && (Engine.keys.BACK = !0), 9 === a.mapping && (Engine.keys.START = !0), 4 === a.mapping && (Engine.keys.WHEEL = -1), 5 === a.mapping && (Engine.keys.WHEEL = 1))
    });
    a.bind(Gamepad.Event.BUTTON_UP, function (a) {
        Engine.gamepadActive && (0 === a.mapping && (Engine.keys.JUMP = !1), 1 === a.mapping && (Engine.keys.B = !1), 2 === a.mapping && (Engine.keys.X = !1), 3 === a.mapping && (Engine.keys.Y = !1), 7 === a.mapping && (Engine.keys.JUMP = !1), 2 === a.mapping && (Engine.keys.SKILL1 = !1), 6 === a.mapping && (Engine.keys.BLOCK = !1), 8 === a.mapping && (Engine.keys.BACK = !1), 9 === a.mapping && (Engine.keys.START = !1))
    });
    a.bind(Gamepad.Event.AXIS_CHANGED,
            function (a) {
                if (Engine.gamepadActive) {
                    0 === a.mapping && (0.3 < a.value ? (Engine.keys.RIGHT = !0, Engine.keys.LEFT = !1) : (Engine.keys.LEFT = -0.3 > a.value ? !0 : !1, Engine.keys.RIGHT = !1));
                    1 === a.mapping && (0.3 < a.value ? (Engine.keys.DOWN = !0, Engine.keys.UP = !1) : (Engine.keys.UP = -0.3 > a.value ? !0 : !1, Engine.keys.DOWN = !1));
                    2 === a.mapping && (Engine.keys.MOUSEPOS.x = Engine.wH + 0.4 * Engine.wH / 100 * 100 * a.value, Engine.keys.STICK.x = a.value);
                    3 === a.mapping && (Engine.keys.MOUSEPOS.y = Engine.hH + 0.4 * Engine.hH / 100 * 100 * a.value, Engine.keys.STICK.y = a.value);
                    if (0 < Engine.keys.STICK.x && 0.6 < Engine.keys.STICK.x || 0 > Engine.keys.STICK.x && -0.6 > Engine.keys.STICK.x || 0 < Engine.keys.STICK.y && 0.6 < Engine.keys.STICK.y || 0 > Engine.keys.STICK.y && -0.6 > Engine.keys.STICK.y)
                        Engine.keys.SHOOT = !0;
                    -0.6 < Engine.keys.STICK.x && (0.6 > Engine.keys.STICK.x && -0.6 < Engine.keys.STICK.y && 0.6 > Engine.keys.STICK.y) && (Engine.keys.SHOOT = !1, Engine.keys.FIRE = !1);
                    a = Math.max(Math.abs(Engine.keys.STICK.x), Math.abs(Engine.keys.STICK.y));
                    Engine.keys.STICKDISTANCE = Math.min(1, Math.max(0, 1 / 0.6 * a - 0.3))
                }
            })
};
Engine.bindKeys = function () {
    document.getElementById("overlay").onmousedown = function (a) {
        a = a || window.e;
        var b = Engine.screen;
        0 == a.button && (Engine.keys.SHOOT = !0);
        2 == a.button && (Engine.keys.BLOCK = !0);
        Engine.keys.MOUSEPOS.x = (a.pageX - b.offsetLeft) / Engine.fullscreenScale / Engine.contextScale | 0;
        Engine.keys.MOUSEPOS.y = (a.pageY - b.offsetTop) / Engine.fullscreenScale / Engine.contextScale | 0
    };
    document.getElementById("overlay").onmousemove = function (a) {
        if (!Engine.gamepadActive) {
            a = a || window.e;
            var b = Engine.screen;
            Engine.keys.MOUSEPOS.x =
                    (a.pageX - b.offsetLeft) / Engine.fullscreenScale / Engine.contextScale | 0;
            Engine.keys.MOUSEPOS.y = (a.pageY - b.offsetTop) / Engine.fullscreenScale / Engine.contextScale | 0
        }
    };
    document.getElementById("overlay").onmouseup = function (a) {
        a = a || window.e;
        a.preventDefault();
        0 == a.button && (Engine.keys.SHOOT = !1, Engine.keys.FIRE = !1);
        2 == a.button && (Engine.keys.BLOCK = !1)
    };
    document.addEventListener("keydown", function (a) {
        a = a || window.e;
        var b = a.keyCode;
        if (8 === b && !$(":input").is(":focus"))
            return a.preventDefault(), !1;
        if (13 === b && Engine.Elements.elements.console.visible &&
                (0 < $("#consoleInput").val().length && void 0 !== Engine.socket && Engine.socket.emit("console", $("#consoleInput").val()), $("#consoleInput").val(""), $("#chatInput").length))
            return;
        Engine.branding && !Engine.allowChat[Engine.branding] || (13 !== b || !$("#chatInput").length) || ($("#chatInput").is(":focus") ? ($("#chatInput").blur(), 0 < $("#chatInput").val().length && (Engine.socket.emit("chat", $("#chatInput").val()), $("#chatInput").val("")), $("#chatInputNote").show()) : ($("#chatInput").focus(), $("#chatInputNote").hide()));
        if (!(2 != Engine.state && $(":input").is(":focus") || $("#chatInput").is(":focus") || Engine.Elements.elements.console.visible) || "consoleInput" == $(this).attr("id") || 109 == b) {
            if (87 == b || 38 == b || 90 == b)
                a.preventDefault(), Engine.keys.UP = !0;
            if (83 == b || 40 == b)
                a.preventDefault(), Engine.keys.DOWN = !0;
            if (65 == b || 37 == b || 81 == b)
                a.preventDefault(), Engine.keys.LEFT = !0;
            if (68 == b || 39 == b)
                a.preventDefault(), Engine.keys.RIGHT = !0;
            79 == b && (a.preventDefault(), Engine.Elements.toggle("options"));
            if (16 == b || 69 == b)
                a.preventDefault(), Engine.keys.SKILL1 = !0;
            49 == b && (a.preventDefault(), Engine.keys.WEAPON = 1);
            50 == b && (a.preventDefault(), Engine.keys.WEAPON = 2);
            51 == b && (a.preventDefault(), Engine.keys.WEAPON = 3);
            52 == b && (a.preventDefault(), Engine.keys.WEAPON = 4);
            53 == b && (a.preventDefault(), Engine.keys.WEAPON = 5);
            54 == b && (a.preventDefault(), Engine.keys.WEAPON = 6);
            32 == b && (a.preventDefault(), Engine.keys.JUMP = !0);
            107 == b && (a.preventDefault(), Engine.keys.CAMNEXT = !0);
            70 == b && (a.preventDefault(), Engine.keys.SCREENSHOT = !0);
            109 == b && (a.preventDefault(), Engine.Elements.toggle("console"));
            106 == b && "a10" == Engine.branding && (console.log("GameBreak"), GameAPI.GameBreak.request(Engine.startAds, Engine.stopAds))
        }
    }, !1);
    document.addEventListener("keyup", function (a) {
        if (!(2 != Engine.state && $(":input").is(":focus") || $("#chatInput").is(":focus"))) {
            a = a || window.e;
            var b = a.keyCode;
            if (87 == b || 38 == b || 90 == b)
                Engine.keys.UP = !1;
            if (83 == b || 40 == b)
                Engine.keys.DOWN = !1;
            if (65 == b || 37 == b || 81 == b)
                Engine.keys.LEFT = !1;
            if (68 == b || 39 == b)
                Engine.keys.RIGHT = !1;
            if (16 == b || 69 == b)
                Engine.keys.SKILL1 = !1;
            if (49 == b || 50 == b || 51 == b || 52 ==
                    b || 53 == b || 54 == b)
                a.preventDefault(), Engine.keys.WEAPON = !1;
            32 == b && (Engine.keys.JUMP = !1);
            107 == b && (a.preventDefault(), Engine.keys.CAMNEXT = !1);
            70 == b && (a.preventDefault(), Engine.keys.SCREENSHOT = !1)
        }
    }, !1);
    document.addEventListener("mousewheel", function (a) {
        a.preventDefault();
        a = a || window.e;
        a = -1 * Math.max(-1, Math.min(1, a.wheelDelta || -a.detail));
        Engine.keys.WHEEL = a;
        return !1
    }, !1);
    document.addEventListener("DOMMouseScroll", function (a) {
        a.preventDefault();
        a = a || window.e;
        a = -1 * Math.max(-1, Math.min(1, a.wheelDelta || -a.detail));
        Engine.keys.WHEEL = a;
        return !1
    }, !1)
};
Engine.Assets = {
    data: _assets,
    filePath: "assets",
    fileExt: ".png",
    fileVersion: "?v=" + Engine.version,
    tileSize: 0,
    sprites: {},
    tilesets: {},
    fonts: {},
    add: function (a, b, c) {
        var d = this,
                e = this.data[a][b],
                f = null;
        c = c || 1;
        var g = new Image;
        g.src = this.filePath + "/" + a + "/" + e.file + this.fileExt + this.fileVersion;
        g.id = b;
        g.loaded = !1;
        g.fw = e.fw;
        g.fh = e.fh;
        g.scale = c;
        var h;
        this[a][b] ? (h = !0, d[a][b].loaded = !1) : (h = !1, this[a][b] = g);
        g.onload = function () {
            this.fw = this.fw || this.width;
            this.fh = this.fh || this.height;
            h ? f = d[a][b] : (f = document.createElement("canvas"),
                    f.ctx = f.getContext("2d"));
            f.width = this.width;
            f.height = this.height;
            Engine.disableSmoothing(f);
            f.fw = this.fw;
            f.fh = this.fh;
            f.scale = this.scale;
            f.ctx.drawImage(this, 0, 0);
            1 < this.scale && d.resize(f, this.scale);
            f.loaded = !0;
            d[a][b] = f;
            "tilesets" === a && (d.tileSize = f.fw)
        }
    },
    bufferDayTime: function (a) {
        var b = this.tilesets["0"],
                c;
        b.loaded = !1;
        var d, e, f, g = [-5, -22, -37, -42, -30, -15],
                h = [-5, -22, -37, -42, -30, -15],
                k = [-5, -15, -27, -29, -20, -10],
                g = [-5, -22, -27, -17, -30, -15, 0],
                h = [-5, -22, -37, -47, -30, -15, 0],
                k = [-5, -15, -22, -22, -20, -10, -5],
                l = b.ctx.getImageData(0, 0, b.width, b.height);
        c = document.createElement("canvas");
        c.ctx = c.getContext("2d");
        c.width = b.width;
        c.height = b.height;
        Engine.disableSmoothing(c);
        d = c.ctx.createImageData(b.width, b.height);
        f = l.data.length;
        for (e = 0; e < f; e++)
            d.data[e] = l.data[e];
        f = d.data.length;
        for (e = 0; e < f; e += 4)
            d.data[e] += g[a], 0 > d.data[e] && (d.data[e] = 0), d.data[e + 1] += h[a], 0 > d.data[e + 1] && (d.data[e] = 0), d.data[e + 2] += k[a], 0 > d.data[e + 2] && (d.data[e] = 0);
        c.ctx.putImageData(d, 0, 0);
        b.dayTime = c;
        b.loaded = !0
    },
    addAll: function (a) {
        for (var b in this.data)
            for (var c in this.data[b])
                this.add(b,
                        c, Engine.scale)
    },
    resize: function (a, b) {
        var c = a.ctx.getImageData(0, 0, a.width, a.height),
                d = a.width * b,
                e = a.height * b,
                f = c.data,
                g = c.width,
                h = c.height,
                c = this.createImageData(d, e),
                k = c.data,
                l = g / d,
                h = h / e,
                m = 0,
                n, p, r, q;
        for (r = 0; r < e; r += 1)
            for (q = (r * h | 0) * g, p = 0; p < d; p += 1)
                n = q + p * l << 2, k[m] = f[n], k[m + 1] = f[n + 1], k[m + 2] = f[n + 2], k[m + 3] = f[n + 3], m += 4;
        a.width = d;
        a.height = e;
        Engine.disableSmoothing(a);
        a.fw *= b;
        a.fh *= b;
        a.ctx.putImageData(c, 0, 0)
    },
    initSampleCanvas: function () {
        var a = document.createElement("canvas");
        a.ctx = a.getContext("2d");
        a.width =
                0;
        a.height = 0;
        Engine.disableSmoothing(a);
        createImageData = a.ctx.createImageData ? function (b, c) {
            return a.ctx.createImageData(b, c)
        } : function (a, c) {
            return new ImageData(a, c)
        }
    },
    createImageData: function (a, b) {
        this.initSampleCanvas();
        return createImageData(a, b)
    }
};
Engine.Screens = {
    Transition: function (a) {
        var b = null,
                c = 0;
        a = a || !1;
        var d = !1;
        this.kill = this.done = !1;
        this.init = function () {
            c = Engine.now;
            b = document.createElement("canvas");
            b.id = "loading";
            b.width = Engine.canvas.width;
            b.height = Engine.canvas.height;
            b.ctx = b.getContext("2d");
            Engine.disableSmoothing(b);
            $("#overlay").append(b)
        };
        this.update = function () {
            250 < Engine.now - c && !d && (this.done = d = !0, a && a());
            500 < Engine.now - c && (this.kill = !0, $("#loading").remove())
        };
        this.draw = function () {
            Engine.clearCanvas(b);
            var a = b.ctx;
            a.save();
            a.fillStyle = "#000";
            a.fillRect(b.width - 2 * b.width / 500 * (Engine.now - c), 0, b.width, b.height);
            a.restore()
        };
        this.init()
    },
    Loading: function (a) {
        var b = 0,
                c = 0,
                d = "";
        this.kill = !1;
        this.preload = !0;
        var e = function (a) {
            var c = [],
                    d;
            for (d in Engine.Assets[a])
                c.push(Engine.Assets[a][d]);
            b += c.length;
            return c
        };
        this.update = function () {
            this.preload && (this.preload = !1, Engine.branding && Engine.Elements.append("loading"));
            b = 0;
            var f = [],
                    g;
            for (g in Engine.Elements.elements)
                f.push(Engine.Elements.elements[g]);
            b += f.length;
            g = e("fonts");
            var h =
                    e("sprites"),
                    k = e("tilesets"),
                    l = [],
                    m;
            for (m in _audio)
                l.push(_audio[m]);
            b += l.length;
            f = {
                "UI Elements": f,
                Fonts: g,
                Sprites: h,
                Tilesets: k,
                Audio: l
            };
            c = 0;
            for (var n in f)
                for (m = f[n], d = n, g = 0; g < m.length; g++)
                    if (m[g].loaded)
                        c++;
                    else
                        return;
            b != c || this.done || Engine.ads.show && !Engine.ads.finished || (a && !this.kill && (Engine.branding && Engine.Elements.remove("loading"), a()), this.kill = !0)
        };
        this.draw = function () {
            if (!this.kill) {
                Engine.clearCanvas(Engine.canvas);
                var a = Engine.canvas.ctx,
                        e, h, k, l, m;
                a.save();
                a.fillStyle = "#333";
                e =
                        Engine.width / 2 | 0;
                h = Engine.height / 10 | 0;
                k = (Engine.width - e) / 2 | 0;
                l = (Engine.height - h) / 2 | 0;
                a.fillRect(k, l, e, h);
                a.fillStyle = "#ccc";
                m = Math.round(100 * (c / b));
                a.fillRect(k, l, e / 100 * m | 0, h);
                a.globalAlpha = 0.5;
                Engine.text("visitorBlack", (100 / b * c | 0) + "%", Engine.wH, Engine.hH - Engine.Assets.fonts.visitorBlack.fh / 2 + Engine.scale, !0);
                a.globalAlpha = 1;
                Engine.text("miniset2", "Loading " + d + "...", Engine.wH, Engine.hH + 3 * Engine.Assets.fonts.miniset2.fh + Engine.scale, !0);
                a.restore();
                Engine.loaded = m
            }
        }
    },
    Splash: function (a) {
        this.kill = !1;
        var b = Date.now() + 3E3,
                c = !1;
        this.update = function () {
            Engine.branding && Engine.brandingCustom[Engine.branding] && Engine.splashscreenCustom[Engine.branding] ? (c || (Engine.Elements.append("splash_" + Engine.branding), c = !0), Engine.now > b && (Engine.Elements.remove("splash_" + Engine.branding), c = !1, a && !this.kill && a(), this.kill || (this.kill = !0))) : (a && !this.kill && a(), this.kill || (this.kill = !0))
        };
        this.draw = function () {}
    },
    Title: function () {
        var a = 0,
                b = 0,
                c = 0,
                d = !0,
                e = 10,
                f = [],
                g = 0;
        this.update = function (h) {
            g++;
            60 == g && (g = 0);
            var k =
                    Engine.Assets.sprites.tile_wall;
            a -= 0.25 * Engine.scale * h;
            a < -k.width && (a = 0);
            k = Engine.Assets.sprites.skyline;
            b -= 0.4 * Engine.scale * h;
            b < -k.width && (b = 0);
            for (var l = f.length, m, k = 0; k < l; k++)
                m = f[k], m.update(h), m.kill && (f.splice(k, 1), k--, l--);
            l = 130 - f.length;
            for (k = 0; k < l; k++)
                m = new Engine.FX.Spark, 130 == l && (m.data.x = Engine.rand(0, Engine.width), m.data.y = Engine.rand(0, Engine.height)), m.init(), f.push(m);
            0 < e && (e -= h);
            0 >= e && (120 > c && d && (c += 5 * h, 120 <= c && (c = 120, d = !1)), 100 < c && !d && (c -= 5 * h, 100 > c && (c = 100)))
        };
        this.draw = function () {
            var d,
                    e, g, m, n, p, r, q = Engine.canvas.ctx;
            q.fillStyle = "#000";
            q.fillRect(0, 0, Engine.width, Engine.height);
            q.save();
            q.globalAlpha = 0.8;
            d = Engine.Assets.sprites.tile_wall;
            e = a | 0;
            g = 0;
            q.drawImage(d, e, g);
            e + d.width < Engine.width && q.drawImage(d, e + d.width, g);
            q.restore();
            q.save();
            d = Engine.Assets.sprites.skyline;
            e = b | 0;
            g = Engine.height - d.fh | 0;
            q.drawImage(d, e, g);
            e + d.width < Engine.width && q.drawImage(d, e + d.width, g);
            q.restore();
            d = Engine.Assets.sprites.frame;
            q.drawImage(d, 0, 0);
            e = f.length;
            for (d = 0; d < e; d++)
                g = f[d], g.draw();
            d = Engine.Assets.sprites.titlecard2;
            e = (Engine.width - d.fw) / 2 | 0;
            g = 55 * Engine.scale | 0;
            m = d.fw;
            n = d.fh;
            p = m / 100 * c | 0;
            r = n / 100 * c | 0;
            q.drawImage(d, 0, 0, m, n, e - m / 2 + (m - p / 2) | 0, g - n / 2 + (n - r / 2) | 0, p, r)
        }
    },
    Menu: function () {
        var a = 0,
                b = 0,
                c = [];
        this.update = function (d) {
            var e = Engine.Assets.sprites.tile_wall;
            a -= 0.25 * Engine.scale * d;
            a < -e.width && (a = 0);
            e = Engine.Assets.sprites.skyline;
            b -= 0.4 * Engine.scale * d;
            b < -e.width && (b = 0);
            for (var f = c.length, g, e = 0; e < f; e++)
                g = c[e], g.update(d), g.kill && (c.splice(e, 1), e--, f--);
            f = 130 - c.length;
            for (e = 0; e < f; e++)
                d = new Engine.FX.Spark, 130 == f && (d.data.x =
                        Engine.rand(0, Engine.width), d.data.y = Engine.rand(0, Engine.height)), d.init(), c.push(d)
        };
        this.draw = function () {
            var d, e, f, g = Engine.canvas.ctx;
            g.fillStyle = "#000";
            g.fillRect(0, 0, Engine.width, Engine.height);
            g.save();
            g.globalAlpha = 0.8;
            g.globalCompositeOperation = "lighter";
            d = Engine.Assets.sprites.tile_wall;
            e = a | 0;
            f = 0;
            g.drawImage(d, e, f);
            e + d.width < Engine.width && g.drawImage(d, e + d.width, f);
            g.restore();
            g.save();
            d = Engine.Assets.sprites.skyline;
            e = b | 0;
            f = Engine.height - d.fh | 0;
            g.drawImage(d, e, f);
            e + d.width < Engine.width &&
                    g.drawImage(d, e + d.width, f);
            g.restore();
            d = Engine.Assets.sprites.frame;
            g.drawImage(d, 0, 0);
            e = c.length;
            for (d = 0; d < e; d++)
                f = c[d], f.draw()
        }
    }
};
Engine.audio = {
    init: function () {
        this.tryWebAudio()
    },
    tryWebAudio: function () {
        try {
            Engine.webaudioAPI.ctx = new window.webkitAudioContext, Engine.audio = Engine.webaudioAPI, Engine.webaudio = !0
        } catch (a) {
            Engine.audio = Engine.sm2
        }
        Engine.audio.init()
    }
};
Engine.webaudioAPI = {
    data: {},
    ctx: null,
    sound: !0,
    music: !0,
    volume: {
        sound: 75,
        music: 75
    },
    volumeSoundChange: function (a) {
        this.volume.sound = a;
        this.sound && (this.buses.sound.gain.value = a / 100)
    },
    volumeMusicChange: function (a) {
        this.volume.music = a;
        this.music && (this.buses.music.gain.value = a / 100)
    },
    init: function () {
        this.loadAudioResources();
        this.setupMainOutput()
    },
    loadAudioResources: function () {
        var a, b, c, d = this;
        Object.keys(_audio).forEach(function (e) {
            Engine.LoadMusicOnDemand && "music" === _audio[e].type ? (_audio[e].loaded = !0, d.data[e] = _audio[e]) : (a = _audio[e].format || "ogg", b = "sound/" + a + "/", c = "." + a + "?v=" + Engine.version, d.util.ajaxAudioRequest(b + _audio[e].file + c, function (a) {
                d.ctx.decodeAudioData ? d.ctx.decodeAudioData(a.response, function (a) {
                    _audio[e].buffer = a;
                    _audio[e].loaded = !0;
                    d.data[e] = _audio[e]
                }, function (a) {
                    console.error("Audio Decoding Error: ", b + _audio[e].file + c, a)
                }) : _audio[e].buffer = d.ctx.decodeAudioData(a.response, function (a) {
                    _audio[e].loaded = !0;
                    d.data[e] = _audio[e]
                }, function () {
                    console.log("Decoding the audio buffer for " +
                            e + " failed")
                })
            }))
        })
    },
    loadAudioResourceLate: function (a) {
        var b, c, d, e = this;
        b = _audio[a].format || "ogg";
        c = "sound/" + b + "/";
        d = "." + b + "?v=" + Engine.version;
        e.util.ajaxAudioRequest(c + _audio[a].file + d, function (b) {
            e.ctx.decodeAudioData ? e.ctx.decodeAudioData(b.response, function (b) {
                _audio[a].buffer = b;
                _audio[a].loaded = !0;
                e.data[a] = _audio[a];
                e.play(a)
            }, function (b) {
                console.error("Audio Decoding Error: ", c + _audio[a].file + d, b)
            }) : _audio[a].buffer = e.ctx.decodeAudioData(b.response, function (b) {
                _audio[a].loaded = !0;
                e.data[a] =
                        _audio[a];
                e.play(a)
            }, function () {
                console.log("Decoding the audio buffer for " + a + " failed")
            })
        })
    },
    loadAudioStream: function (a) {
        var b, c, d = this;
        b = _audio[a].format || "ogg";
        c = "sound/" + b + "/";
        b = "." + b + "?v=" + Engine.version;
        var e = new Audio;
        e.src = c + _audio[a].file + b;
        e.id = a;
        e.autoplay = !0;
        this.data[a].loop && (e.loop = !0);
        e.stop = function () {
            this.pause();
            delete Engine.audio.data[this.id].source
        };
        d.data[a] = _audio[a];
        this.data[a].source = e;
        this.data[a].source.playbackState = 2;
        e.addEventListener("canplaythrough", function () {
            d.playAudioStream(e,
                    a)
        }, !1)
    },
    playAudioStream: function (a, b) {
        var c = this.ctx.createMediaElementSource(a),
                d = this.buses[this.data[b].type],
                e = this.ctx.createGain();
        c.connect(e);
        e.connect(d);
        this.data[b].hasOwnProperty("volume") ? e.gain.value = 0.01 * this.data[b].volume : e.gain.value = 1
    },
    util: {
        ajaxAudioRequest: function (a, b) {
            var c = new XMLHttpRequest;
            c.open("GET", a, !0);
            c.responseType = "arraybuffer";
            c.onload = function () {
                b(c)
            };
            c.onerror = function () {
                console.error("Audio XHR Error: " + a)
            };
            c.send()
        }
    },
    setupMainOutput: function () {
        var a = this.ctx.createDynamicsCompressor();
        a.threshold.value = -10;
        a.knee.value = 20;
        a.ratio.value = 14;
        a.attack.value = 0.003;
        a.release.value = 0.25;
        a.connect(this.ctx.destination);
        this.buses.sound = this.ctx.createGain();
        this.buses.sound.connect(a);
        this.buses.sound.gain.value = this.volume.sound / 100;
        this.buses.biquad = this.ctx.createBiquadFilter();
        this.buses.biquad.connect(a);
        this.buses.biquad.frequency.value = 22050;
        this.buses.music = this.ctx.createGain();
        this.buses.music.connect(this.buses.biquad);
        this.buses.music.gain.value = this.volume.music / 100
    },
    buses: {
        sound: null,
        music: null
    },
    playBuffer: function (a) {
        var b = this.data[a].buffer,
                c = this.ctx.createBufferSource(),
                d = this.buses[this.data[a].type];
        c.isPlaying = !0;
        c.onended = function () {
            this.isPlaying = !1
        };
        c.buffer = b;
        this.data[a].loop && (c.loop = !0);
        b = this.ctx.createGain();
        c.connect(b);
        b.connect(d);
        this.data[a].hasOwnProperty("volume") ? b.gain.value = 0.01 * this.data[a].volume : b.gain.value = 1;
        this.data[a].source = c;
        c.start(0)
    },
    play: function (a) {
        this.data[a] && (Engine.LoadMusicOnDemand && "music" === this.data[a].type && !this.data[a].buffer ?
                Engine.StreamMusic ? this.loadAudioStream(a) : this.loadAudioResourceLate(a) : this.playBuffer(a))
    },
    speed: function (a, b) {
        this.data[a] && (this.data[a].source.playbackRate.value = b)
    },
    stop: function (a) {
        this.data[a] && (this.isPlaying(a) && this.data[a].source.stop(0), Engine.LoadMusicOnDemand && (!Engine.StreamMusic && "music" === this.data[a].type) && (delete this.data[a].buffer, delete this.data[a].source))
    },
    mute: function (a) {
        this.buses[a].gain.value = 0
    },
    unmute: function (a) {
        this.buses[a].gain.value = this.volume[a] / 100
    },
    isPlaying: function (a) {
        return this.data[a] &&
                this.data[a].source && this.data[a].source.isPlaying ? !0 : !1
    }
};
Engine.webaudioAPIdeprecated = {
    data: {},
    ctx: null,
    sound: !0,
    music: !0,
    volume: {
        sound: 75,
        music: 75
    },
    volumeSoundChange: function (a) {
        this.volume.sound = a;
        this.sound && (this.buses.sound.gain.value = a / 100)
    },
    volumeMusicChange: function (a) {
        this.volume.music = a;
        this.music && (this.buses.music.gain.value = a / 100)
    },
    init: function () {
        this.loadAudioResources();
        this.setupMainOutput()
    },
    loadAudioResources: function () {
        var a, b, c, d = this;
        Object.keys(_audio).forEach(function (e) {
            Engine.LoadMusicOnDemand && "music" === _audio[e].type ? (_audio[e].loaded = !0, d.data[e] = _audio[e]) : (a = _audio[e].format || "ogg", b = "sound/" + a + "/", c = "." + a + "?v=" + Engine.version, d.util.ajaxAudioRequest(b + _audio[e].file + c, function (a) {
                d.ctx.decodeAudioData ? d.ctx.decodeAudioData(a.response, function (a) {
                    _audio[e].buffer = a;
                    _audio[e].loaded = !0;
                    d.data[e] = _audio[e]
                }, function (a) {
                    console.error("Audio Decoding Error: ", b + _audio[e].file + c, a)
                }) : (_audio[e].buffer = d.ctx.createBuffer(a.response, !1), _audio[e].loaded = !0, d.data[e] = _audio[e])
            }))
        })
    },
    loadAudioResourceLate: function (a) {
        var b, c, d, e = this;
        b = _audio[a].format || "ogg";
        c = "sound/" + b + "/";
        d = "." + b + "?v=" + Engine.version;
        e.util.ajaxAudioRequest(c + _audio[a].file + d, function (b) {
            e.ctx.decodeAudioData ? e.ctx.decodeAudioData(b.response, function (b) {
                _audio[a].buffer = b;
                _audio[a].loaded = !0;
                e.data[a] = _audio[a];
                e.play(a)
            }, function (b) {
                console.error("Audio Decoding Error: ", c + _audio[a].file + d, b)
            }) : (_audio[a].buffer = e.ctx.createBuffer(b.response, !1), _audio[a].loaded = !0, e.data[a] = _audio[a], e.play(a))
        })
    },
    loadAudioStream: function (a) {
        var b, c, d = this;
        b = _audio[a].format ||
                "ogg";
        c = "sound/" + b + "/";
        b = "." + b + "?v=" + Engine.version;
        var e = new Audio;
        e.src = c + _audio[a].file + b;
        e.id = a;
        e.autoplay = !0;
        this.data[a].loop && (e.loop = !0);
        e.noteOff = function () {
            this.pause();
            delete Engine.audio.data[this.id].source
        };
        d.data[a] = _audio[a];
        this.data[a].source = e;
        this.data[a].source.playbackState = 2;
        e.addEventListener("canplaythrough", function () {
            d.playAudioStream(e, a)
        }, !1)
    },
    playAudioStream: function (a, b) {
        var c = this.ctx.createMediaElementSource(a),
                d = this.buses[this.data[b].type],
                e = this.ctx.createGainNode();
        c.connect(e);
        e.connect(d);
        this.data[b].hasOwnProperty("volume") ? e.gain.value = 0.01 * this.data[b].volume : e.gain.value = 1
    },
    util: {
        ajaxAudioRequest: function (a, b) {
            var c = new XMLHttpRequest;
            c.open("GET", a, !0);
            c.responseType = "arraybuffer";
            c.onload = function () {
                b(c)
            };
            c.onerror = function () {
                console.error("Audio XHR Error: " + a)
            };
            c.send()
        }
    },
    setupMainOutput: function () {
        var a = this.ctx.createDynamicsCompressor();
        a.threshold.value = -10;
        a.knee.value = 20;
        a.ratio.value = 14;
        a.attack.value = 0.003;
        a.release.value = 0.25;
        a.connect(this.ctx.destination);
        this.buses.sound = this.ctx.createGainNode();
        this.buses.sound.connect(a);
        this.buses.sound.gain.value = this.volume.sound / 100;
        this.buses.biquad = this.ctx.createBiquadFilter();
        this.buses.biquad.connect(a);
        this.buses.biquad.frequency.value = 22050;
        this.buses.music = this.ctx.createGainNode();
        this.buses.music.connect(this.buses.biquad);
        this.buses.music.gain.value = this.volume.music / 100
    },
    buses: {
        sound: null,
        music: null
    },
    playBuffer: function (a) {
        var b = this.data[a].buffer,
                c = this.ctx.createBufferSource(),
                d = this.buses[this.data[a].type];
        c.buffer = b;
        this.data[a].loop && (c.loop = !0);
        b = this.ctx.createGainNode();
        c.connect(b);
        b.connect(d);
        this.data[a].hasOwnProperty("volume") ? b.gain.value = 0.01 * this.data[a].volume : b.gain.value = 1;
        this.data[a].source = c;
        c.noteOn(0)
    },
    play: function (a) {
        this.data[a] && (Engine.LoadMusicOnDemand && "music" === this.data[a].type && !this.data[a].buffer ? Engine.StreamMusic ? this.loadAudioStream(a) : this.loadAudioResourceLate(a) : this.playBuffer(a))
    },
    speed: function (a, b) {
        this.data[a] && (this.data[a].source.playbackRate.value = b)
    },
    stop: function (a) {
        this.data[a] && (this.isPlaying(a) && this.data[a].source.noteOff(0), Engine.LoadMusicOnDemand && (!Engine.StreamMusic && "music" === this.data[a].type) && (delete this.data[a].buffer, delete this.data[a].source))
    },
    mute: function (a) {
        this.buses[a].gain.value = 0
    },
    unmute: function (a) {
        this.buses[a].gain.value = this.volume[a] / 100
    },
    isPlaying: function (a) {
        return this.data[a] && this.data[a].source && 2 === this.data[a].source.playbackState ? !0 : !1
    }
};
Engine.sm2 = {
    data: {},
    sound: !0,
    music: !0,
    volume: {
        sound: 75,
        music: 75
    },
    volumeSoundChange: function (a) {
        this.volume.sound = a;
        var b, c;
        for (b in Engine.audio.data)
            c = Engine.audio.data[b], "sound" === c.type && Engine.audio.data[b].setVolume(a / 100 * (_audio[b].volume || 100))
    },
    volumeMusicChange: function (a) {
        this.volume.music = a;
        for (i in Engine.audio.data)
            soundFile = Engine.audio.data[i], "music" === soundFile.type && Engine.audio.data[i].setVolume(a / 100 * (_audio[i].volume || 100))
    },
    init: function () {
        window.soundManager = new SoundManager;
        soundManager.setup({
            url: "swf/",
            flashVersion: 9,
            preferFlash: !0,
            useHTML5Audio: !0,
            useHighPerformance: !0,
            onready: function () {
                Engine.audio.createData()
            },
            defaultOptions: {
                autoLoad: !1,
                stream: !0,
                multiShot: !0,
                multiShotEvents: !0,
                multiEvents: !0,
                volume: 100
            }
        })
    },
    createData: function () { //mp3 audio
        var a, b, c, d;
        for (a in _audio)
            b = _audio[a], d = b.format || "ogg", c = "sound/" + d + "/", d = "." + d + "?v=" + Engine.version, c = soundManager.createSound({
                id: a,
                url: c + b.file + d,
                volume: b.volume ? Engine.audio.volume[b.type] / 100 * b.volume : Engine.audio.volume[b.type]
            }),
                    c.type = b.type, c.loop = b.loop, _audio[a].loaded = !0, Engine.audio.data[a] = c, Engine.audio[c.type] || c.mute()
    },
    play: function (a, b) {
        Engine.audio.data[a] && (Engine.audio.data[a].loop ? this.loop(a) : Engine.audio.data[a].play(b))
    },
    loop: function (a) {
        Engine.audio.data[a].play({
            onfinish: function () {
                Engine.audio.loop(a)
            }
        })
    },
    stop: function (a) {
        Engine.audio.data[a] && Engine.audio.data[a].stop()
    },
    isPlaying: function (a) {
        return Engine.audio.data[a] && 0 !== Engine.audio.data[a].playState ? !0 : !1
    },
    mute: function (a) {
        var b, c;
        for (b in Engine.audio.data)
            c =
                    Engine.audio.data[b], c.type == a && Engine.audio.data[b].mute()
    },
    unmute: function (a) {
        var b, c;
        for (b in Engine.audio.data)
            c = Engine.audio.data[b], c.type == a && Engine.audio.data[b].unmute()
    }
};
Engine.Elements = {
    filePath: "elements",
    fileExt: ".html",
    version: "?v=" + Engine.version,
    inputHandlers: [],
    init: function () {
        var a = this,
                b;
        for (b in this.elements)
            a.elements[b].loaded = !1;
        for (b in this.elements)
            $.ajax({
                url: this.filePath + "/" + b + this.fileExt + this.version,
                dataType: "html",
                success: function (c) {
                    a.elements[b].loaded = !0;
                    a.elements[b].DOM = c
                },
                async: !1
            })
    },
    updateDOM: function (a, b, c) {
        if ("right" === c)
            c = $($("#" + a + " .selectable")[b.cursorPos + 1]), c.hasClass("selectV") || b.cursorPos++;
        else if ("left" === c) {
            if ($($("#" +
                    a + " .selectable")[b.cursorPos]).hasClass("selectV"))
                return;
            b.cursorPos--
        } else
            "down" === c ? (c = $($("#" + a + " .selectable")[b.cursorPos]).nextAll(".selectV:eq(0)"), console.log(c.attr("id")), b.cursorPos = $("#" + a + " .selectable").index(c), console.log(b.cursorPos), 0 > b.cursorPos && (b.cursorPos = b.cursorElems - 1)) : "up" === c && (c = 1, $($("#" + a + " .selectable")[b.cursorPos]).hasClass("selectV") && (c = 0), c = $($("#" + a + " .selectable")[b.cursorPos]).prevAll(".selectV:eq(" + c + ")"), console.log(c.attr("id")), b.cursorPos = $("#" + a + " .selectable").index(c),
                    console.log(b.cursorPos));
        0 > b.cursorPos && (b.cursorPos = 0);
        b.cursorPos > b.cursorElems - 1 && (b.cursorPos = b.cursorElems - 1);
        $("#" + a + " .selectable").each(function () {
            $(this).removeClass("hover")
        });
        $($("#" + a + " .selectable")[b.cursorPos]).addClass("hover")
    },
    update: function () {
        var a = this.e,
                b = this.elem;
        Engine.keys.B && !a.b ? (a.b = !0, Engine.keys.B = !1, $($("#" + b + " .selectB")[0]).trigger("click")) : !Engine.keys.B && a.b && (a.b = !1);
        Engine.keys.Y && !a.y ? (a.y = !0, Engine.keys.Y = !1, $($("#" + b + " .selectY")[0]).trigger("click")) : !Engine.keys.Y &&
                a.y && (a.y = !1);
        Engine.keys.X && !a.x ? (a.x = !0, Engine.keys.X = !1, $($("#" + b + " .selectX")[0]).trigger("click")) : !Engine.keys.X && a.x && (a.x = !1);
        Engine.keys.BACK && !a.back ? (a.back = !0, Engine.keys.BACK = !1, $($("#" + b + " .selectBack")[0]).trigger("click")) : !Engine.keys.BACK && a.back && (a.back = !1);
        Engine.keys.START && !a.start ? (a.start = !0, Engine.keys.START = !1, $($("#" + b + " .selectStart")[0]).trigger("click")) : !Engine.keys.START && a.start && (a.start = !1);
        Engine.keys.DOWN && !a.down ? (a.down = !0, this.updateDOM(b, a, "down")) : !Engine.keys.DOWN &&
                a.down && (a.down = !1);
        Engine.keys.UP && !a.up ? (a.up = !0, this.updateDOM(b, a, "up")) : !Engine.keys.UP && a.up && (a.up = !1);
        Engine.keys.LEFT && !a.left ? (a.left = !0, this.updateDOM(b, a, "left")) : !Engine.keys.LEFT && a.left && (a.left = !1);
        Engine.keys.RIGHT && !a.right ? (a.right = !0, this.updateDOM(b, a, "right")) : !Engine.keys.RIGHT && a.right && (a.right = !1);
        Engine.keys.JUMP && !a.jump ? (a.jump = !0, $($("#" + b + " .selectable")[a.cursorPos % a.cursorElems]).trigger("click")) : !Engine.keys.JUMP && a.jump && (a.jump = !1)
    },
    addInputHandler: function (a,
            b) {
        var c = !!b.e;
        b.elem = a;
        b.e = {
            cursorPos: b.e ? b.e.cursorPos : 0,
            cursorElems: 0,
            down: !1,
            up: !1,
            left: !1,
            right: !1,
            jump: !0,
            back: !0,
            start: !0,
            y: !0,
            x: !0,
            b: !0
        };
        b.update = this.update;
        b.updateDOM = this.updateDOM;
        b.e.cursorElems = $("#" + a + " .selectable").length;
        Engine.gamepadActive && (c ? $($("#" + a + " .selectable")[b.e.cursorPos]).addClass("hover") : $($("#" + a + " .selectable")[0]).addClass("hover"));
        return {
            elem: a,
            e: b
        }
    },
    updateInputHandlers: function () {
        for (var a = [], b = 0; b < this.inputHandlers.length; b++) {
            var c = this.inputHandlers[b],
                    c = this.addInputHandler(c.elem, c.e);
            a.push(c)
        }
        this.inputHandlers = a
    },
    fetchTemplate: function (a, b) {
        var c = this;
        $.ajax({
            url: this.filePath + "/" + a + this.fileExt + this.version,
            dataType: "html",
            success: function (d) {
                c.elements[a].DOM = d;
                b()
            },
            async: !0
        })
    },
    appendTemplate: function (a, b) {
        $("#overlay").append(this.elements[a].DOM);
        b && (this.elements[a].options = b);
        void 0 !== this.elements[a].process && this.elements[a].process();
        void 0 !== this.elements[a].bindEvents && this.elements[a].bindEvents();
        this.elements[a].visible = !0;
        Engine.branding &&
                (Engine.brandingCustom[Engine.branding] && -1 != this.elements[a].DOM.indexOf("meta")) && ($("#meta").html(this.elements["branding_" + Engine.branding].DOM), this.elements["branding_" + Engine.branding].process())
    },
    append: function (a, b) {
        Engine.branding && (Engine.brandingCustom[Engine.branding] && "menu_title" == a) && (a = "menu_title_branding");
        0 === $("#" + a).length && (this.elements[a].DOM ? Engine.Elements.appendTemplate(a, b) : this.fetchTemplate(a, function () {
            Engine.Elements.appendTemplate(a, b)
        }))
    },
    removeInputHander: function (a) {
        for (var b =
                this.inputHandlers.length; b--; )
            if (this.inputHandlers[b].elem === a) {
                this.inputHandlers.splice(b, 1);
                break
            }
    },
    remove: function (a) {
        Engine.branding && (Engine.brandingCustom[Engine.branding] && "menu_title" == a) && (a = "menu_title_branding");
        if (0 !== $("#" + a).length) {
            if (void 0 !== this.elements[a].onRemove)
                this.elements[a].onRemove();
            this.removeInputHander(a);
            $("#" + a).remove();
            this.elements[a].visible = !1
        }
    },
    toggle: function (a) {
        0 == $("#" + a).length ? Engine.Elements.append(a) : Engine.Elements.remove(a)
    }
};
Engine.Elements.elements = {
    data: {},
    darken: {},
    waiting_for_players: {
        bindEvents: function () {
            $("#lobby_leave_waiting").on("click", function () {
                Engine.Game.lobbyToJoin = 0;
                Engine.Elements.remove("menu_lobby");
                Engine.socket.emit("leaveLobby");
                Engine.Elements.remove("waiting_for_players");
                Engine.Elements.remove("game_running_notice");
                Engine.Elements.append("menu_main");
                Engine.history.pushState()
            })
        }
    },
    loading: {
        process: function () {
            Engine.branding && Engine.brandingCustom[Engine.branding] && $("#share").html("")
        }
    },
    ad_cpmstar: {
        process: function () {
            Engine.startAds();
            var a = Math.round(999999 * Math.random()),
                    b = document.createElement("iframe");
            b.width = 300;
            b.height = 600;
            document.getElementById("ad_cpmstar_wrapper").appendChild(b);
            b.onload = function () {
                var a = b.contentDocument.body;
                a.style.padding = 0;
                a.style.margin = 0
            };
            var c = b.contentWindow.document;
            c.open();
            c.write('<script src="http://server.cpmstar.com/view.aspx?poolid=58754&script=1&rnd=' + a + '">\x3c/script>');
            c.close();
            Engine.ads.started = Date.now();
            Engine.ads.finished = !1;
            var d = setInterval(function () {
                var a = Date.now() - Engine.ads.started,
                        b = 0.01 * a;
                $("#ad_cpmstar_loading_bar").css("width", b + "%");
                1E4 <= a && clearInterval(d)
            }, 100)
        },
        onRemove: function () {
            Engine.stopAds()
        }
    },
    ad_cpmstar_lead: {
        process: function () {
            var a = Math.round(999999 * Math.random()),
                    b = document.createElement("iframe");
            b.width = 468;
            b.height = 60;
            b.style.width = "468px";
            b.style.height = "60px";
            document.getElementById("ad_cpmstar_wrapper").appendChild(b);
            b.onload = function () {
                var a = b.contentDocument.body;
                a.style.padding = 0;
                a.style.margin = 0
            };
            var c = b.contentWindow.document;
            c.open();
            c.write('<script src="http://server.cpmstar.com/view.aspx?poolid=58751&script=1&rnd=' +
                    a + '">\x3c/script>');
            c.close()
        }
    },
    ad_cpmstar_preroll: {
        process: function () {
            $("#cpmstar_preroll_wrapper").css("width", "100%").css("height", "100%").show();
            var a = document.createElement("script");
            a.src = "js/cpmstar.js?v=9";
            a.onload = function () {
                console.log("CPMStar Video Pre-roll loaded.");
                Engine.ads.started = Date.now();
                Engine.ads.finished = !1
            };
            a.onerror = function () {
                console.log("Error loading CPMStar Video Pre-roll.");
                Engine.stopAds();
                $("#cpmstar_preroll_wrapper").hide()
            };
            document.getElementById("cpmstar_wrapper").appendChild(a)
        },
        onRemove: function () {
            $("#cpmstar_wrapper").hide()
        }
    },
    branding_a10: {
        process: function () {
            var a = apiInstance.Branding.getLogo();
            if (a.image) {
                var b = document.createElement("img");
                b.src = a.image;
                b.addEventListener("click", a.action);
                document.getElementById("brandingLogo").appendChild(b)
            }
        }
    },
    splash_a10: {
        process: function () {
            var a = apiInstance.Branding.getSplashScreen();
            a.show && a.action && (document.getElementById("splash_a10").addEventListener("click", a.action), window.setTimeout(function () {
                Engine.Elements.remove("splash_10")
            },
                    3E3))
        }
    },
    branding_miniclip: {
        process: function () {
            var a = apiInstance.Branding.getLogo();
            if (a.image) {
                var b = document.createElement("img");
                b.src = a.image;
                b.onclick = function () {
                    window.open(a.action, "_blank")
                };
                document.getElementById("brandingLogo").appendChild(b)
            }
        }
    },
    changelog: {
        bindEvents: function () {
            $("#changelog_close").on("click", function () {
                Engine.Elements.toggle("changelog")
            })
        },
        process: function () {
            $.ajax({
                url: "changelog.txt?v=" + Engine.version,
                dataType: "text",
                success: function (a) {
                    $("#changelog .inner").html(a)
                },
                async: !0
            })
        }
    },
    credits: {
        bindEvents: function () {
            $("#credits_close").on("click", function () {
                Engine.Elements.toggle("credits")
            })
        }
    },
    menu_title_branding: {
        bindEvents: function () {
            var a = apiInstance.Branding.getLink("more_games");
            if (a.action)
                "a10" == Engine.branding ? document.getElementById("title_more").onclick = a.action : document.getElementById("title_more").onclick = function () {
                    window.open(a.action, "_blank")
                };
            else if ("a10" == Engine.branding)
                $("#title_more").on("click", function () {
                    window.open("http://www.a10.com/?utm_medium=brandedgames_external&utm_campaign=576742227280292150&utm_source=play.treasurearena.com&utm_content=more_games")
                });
            $("#title_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $("#title_help").on("click", function () {
                Engine.Elements.toggle("help")
            });
            $("#changelog_show").on("click", function () {
                Engine.Elements.toggle("changelog");
                Engine.viewedChangelog = !0
            });
            $("#credits_show").on("click", function () {
                Engine.Elements.toggle("credits")
            });
            Engine.share()
        },
        process: function () {
            $("#title_play").on("click", function () {
                Engine.checkVersionUpdate();
                Engine.Elements.remove("menu_title");
                Engine.Elements.append("menu_servers")
            });
            Engine.audio.isPlaying("menu") || Engine.audio.play("menu")
        }
    },
    menu_title: {
        bindEvents: function () {
            $("#title_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $("#title_help").on("click", function () {
                Engine.Elements.toggle("help")
            });
            $("#changelog_show").on("click", function () {
                Engine.Elements.toggle("changelog");
                Engine.viewedChangelog = !0
            });
            $("#credits_show").on("click", function () {
                Engine.Elements.toggle("credits")
            });
            Engine.share()
        },
        process: function () {
            $("#title_play").on("click", function () {
                Engine.checkVersionUpdate();
                Engine.Elements.remove("menu_title");
                Engine.Elements.append("menu_servers")
            });
            Engine.audio.isPlaying("menu") || Engine.audio.play("menu")
        }
    },
    menu_servers: {
        process: function () {
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $(".backToTitle").on("click", function () {
                Engine.Elements.remove("menu_servers");
                Engine.Elements.append("menu_title")
            });
            $(".server").on("click", function () {
                var a = $(this).attr("id"),
                        b = $(this);
                $(this).hasClass("disabled") || ($(this).addClass("active disabled"),
                        Engine.Elements.append("darken"), Engine.checkServerAlive({
                    id: a
                }, function () {
                    b.removeClass("active disabled");
                    Engine.Elements.remove("darken");
                    Engine.server.alive ? (Engine.Elements.remove("menu_servers"), Engine.Elements.append("menu_name"), Engine.server.connected || Engine.Game.connect()) : Engine.info("The Game-Server is offline. Please try again later.")
                }))
            })
        }
    },
    invite: {
        preventHandler: !0,
        process: function () {}
    },
    game_running_notice: {
        preventHandler: !0
    },
    menu_name: {
        creating: !1,
        process: function () {
            var a;
            a = Engine.kongregate ?
                    kongregate.services.getUsername() || "" : Engine.getCookie("name");
            $("#guest_name").val(a || "");
            this.cleanInput("guest_name", 1, 9);
            $("#guest_name").focus();
            $("#onlineCount").html(Engine.Game.getOnlineCount());
            $("#lobby_header_server").html(Engine.server.current.name)
        },
        bindEvents: function () {
            var a = this;
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $(".backToTitle").on("click", function () {
                Engine.socket.disconnect();
                Engine.Game.lobbyToJoin = 0
            });
            $("#play_guest").on("click", function () {
                a.cleanInput("guest_name",
                        1, 9);
                a.validate("guest_name", 1, 9) && a.login()
            });
            $("#guest_name").on("keyup", function (b) {
                b = b || window.e;
                b = b.keyCode;
                var c = this.selectionStart;
                a.cleanInput("guest_name", 1, 9);
                13 === b && a.validate("guest_name", 1, 9) && a.login();
                this.setSelectionRange(c, c)
            });
            Engine.share()
        },
        cleanInput: function (a, b, c) {
            b = $("#" + a).val();
            b = b.replace(/[^a-zA-Z0-9]/gi, "");
            b.length > c && (b = b.substr(0, c));
            $("#" + a).val(b)
        },
        validate: function (a, b, c) {
            var d = $("#" + a).val();
            if (d.length < b)
                return $("#" + a).focus(), !1;
            if (d.length > c)
                return !1;
            $("#" +
                    a).blur();
            return !0
        },
        login: function () {
            $("#play_guest").addClass("active disabled");
            Engine.Elements.append("darken");
            var a = $("#guest_name").val();
            Engine.setCookie("name", a, 100);
            Engine.socket.emit("setName", a)
        },
        onRemove: function () {
            Engine.marquee.stop($("#marquee"))
        }
    },
    menu_main: {
        process: function () {
            Engine.state = 10;
            Engine.socket.emit("requestGameStats");
            $("#onlineCount").html(Engine.Game.getOnlineCount());
            $("#lobby_header_server").html(Engine.server.current.name)
        },
        bindEvents: function () {
            $("#title_help").on("click",
                    function () {
                        Engine.Elements.toggle("help")
                    });
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $(".backToTitle").on("click", function () {
                Engine.socket.disconnect()
            });
            $("#main_join_random").on("click", function () {
                Engine.socket.emit("requestRandomLobby")
            });
            $("#main_list_lobbies").on("click", function () {
                Engine.Elements.remove("menu_main");
                Engine.Elements.append("menu_lobbies");
                Engine.socket.emit("getLobbies")
            });
            Engine.share()
        },
        onRemove: function () {
            Engine.marquee.stop($("#marquee"))
        }
    },
    menu_lobbies: {
        scrollPos: 0,
        process: function () {
            Engine.branding && !Engine.allowLobbiesAd[Engine.branding] || Engine.Elements.append("ad_cpmstar_lead");
            Engine.state = 11;
            this.scrollPos = 0;
            $("#onlineCount").html(Engine.Game.getOnlineCount());
            $("#lobby_header_server").html(Engine.server.current.name)
        },
        bindEvents: function () {
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $(".backToMain").on("click", function () {
                Engine.Elements.remove("menu_lobbies");
                Engine.Elements.append("menu_main")
            });
            $("#lobbies_create_lobby").click(function () {
                Engine.Elements.remove("menu_lobbies");
                Engine.Elements.append("menu_create_lobby")
            });
            Engine.share()
        },
        scrollElem: function () {
            var a = Engine.keys.WHEEL,
                    b = ($("#lobbyList")[0].scrollHeight - $("#lobbyList").height()) / 20;
            this.scrollPos += a;
            0 > this.scrollPos && (this.scrollPos = 0);
            this.scrollPos > b && (this.scrollPos = b);
            $("#lobbyList").scrollTop(20 * this.scrollPos);
            Engine.keys.WHEEL = !1
        },
        onRemove: function () {
            Engine.marquee.stop($("#marquee"));
            Engine.Elements.remove("ad_cpmstar_lead")
        }
    },
    menu_create_lobby: {
        creating: !1,
        process: function () {
            $("#lobby_name").focus();
            0 == $("#marquee").html().length && Engine.marquee.start($("#marquee"), Engine.Game.gameStats);
            $("#onlineCount").html(Engine.Game.getOnlineCount());
            $("#lobby_header_server").html(Engine.server.current.name)
        },
        bindEvents: function () {
            var a = this;
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $(".backToLobbies").on("click", function () {
                Engine.Elements.remove("menu_create_lobby");
                Engine.Elements.append("menu_lobbies");
                Engine.socket.emit("getLobbies")
            });
            $("#lobby_create").on("click", function () {
                a.cleanInput("lobby_name", 1, 20);
                a.validate("lobby_name", 1, 20) && a.create()
            });
            $("#lobby_name").on("keyup", function (b) {
                b = b || window.e;
                b = b.keyCode;
                var c = this.selectionStart;
                a.cleanInput("lobby_name", 1, 20);
                13 === b && a.validate("lobby_name", 1, 20) && a.create();
                this.setSelectionRange(c, c)
            });
            Engine.share()
        },
        cleanInput: function (a, b, c) {
            b = $("#" + a).val();
            b.length > c && (b = b.substr(0, c));
            $("#" + a).val(b)
        },
        validate: function (a, b, c) {
            var d = $("#" + a).val();
            if (d.length < b)
                return $("#" + a).focus(), !1;
            if (d.length > c)
                return !1;
            $("#" + a).blur();
            return !0
        },
        create: function () {
            $("#lobby_create").addClass("active disabled");
            Engine.Elements.append("darken");
            var a = $("#lobby_name").val();
            Engine.socket.emit("newLobby", a);
            this.creating = !1
        },
        onRemove: function () {
            Engine.marquee.stop($("#marquee"))
        }
    },
    lobby_options: {
        bindEvents: function () {
            this.options.isHost ? ($("#options_public").on("click", function () {
                $(this).addClass("active");
                $("#options_private").removeClass("active");
                Engine.socket.emit("setLobbyPrivacy",
                        0)
            }), $("#options_private").on("click", function () {
                $(this).addClass("active");
                $("#options_public").removeClass("active");
                Engine.socket.emit("setLobbyPrivacy", 1)
            })) : ($("#options_public").addClass("disabled"), $("#options_private").addClass("disabled"));
            0 === this.options.privacy ? $("#options_public").addClass("active") : 1 === this.options.privacy && $("#options_private").addClass("active");
            $("#lobby_options_close").on("click", function () {
                Engine.Elements.remove("lobby_options");
                $("html").focus()
            });
            var a = Engine.branding &&
                    Engine.shareUrlCustom[Engine.branding] ? Engine.shareUrlCustom[Engine.branding] + "#!/lobby/" + this.options.code + "" + Engine.server.current.tag : window.location.href;
            $("#share_url").val(a);
            $("#share_url").on("click", function () {
                $(this).select()
            });
            var b = this;
            $("#options_copy").on("click", function () {});
            $("#invite_twitter").on("click", function () {
                var a = ($(window).width() - 575) / 2,
                        d = ($(window).height() - 400) / 2;
                return window.open("http://twitter.com/share?text=Challenge me in a game of Treasure Arena!&url=" + (Engine.branding &&
                        Engine.shareUrlCustom[Engine.branding] ? Engine.shareUrlCustom[Engine.branding] + "%23!/lobby/" + b.options.code + "" + Engine.server.current.tag : "http://play.treasurearena.com/%23!/lobby/" + b.options.code + "" + Engine.server.current.tag), "twitter", "status=1,width=575,height=400,top=" + d + ",left=" + a)
            })
        }
    },
    menu_lobby: {
        process: function () {
            Engine.state = 11;
            $("#chatLobbyInput").focus();
            $("#onlineCount").html(Engine.Game.getOnlineCount());
            $("#lobby_header_server").html(Engine.server.current.name);
            Engine.ads.show || $("#box_extra").addClass("noads");
            Engine.branding && !Engine.allowChat[Engine.branding] && $("#chatLobbyInput").hide()
        },
        loop: function () {
            var a = this;
            $("#box_classes .cla").each(function () {
                $(this).css({
                    "background-position-x": "0px",
                    "background-position-y": "0px"
                });
                $(this).animate({
                    "background-position-x": "255px",
                    "background-position-y": "255px"
                }, 8E3, "linear", function () {
                    a.loop()
                })
            })
        },
        bindEvents: function () {
            $("#box_classes").on("click", ".bot .name", function (a) {
                a = $(this).parent().attr("id");
                Engine.socket.emit("removeBot", a)
            });
            $("#box_classes").on("click",
                    ".bot .button_kickbot",
                    function (a) {
                        a = $(this).parent().attr("id");
                        Engine.socket.emit("removeBot", a)
                    });
            $("#box_classes").on("click", ".empty", function (a) {
                a = $(this).attr("id");
                Engine.socket.emit("addBot", a)
            });
            $("#box_classes").on("click", ".arrow_left", function (a) {
                a = $(this).parent().parent().attr("id");
                Engine.socket.emit("jobPrev", a)
            });
            $("#box_classes").on("click", ".arrow_right", function (a) {
                a = $(this).parent().parent().attr("id");
                Engine.socket.emit("jobNext", a)
            });
            $(".button_kick").on("click", function () {
                var a =
                        $(this).attr("id").split("kick_")[1];
                Engine.socket.emit("kick", a);
                $(this).parent().hide()
            });
            $("#box_classes").on("mouseenter", ".cla", function () {
                Engine.Game.isHost() && ($(this).hasClass("bot") || ($(this).hasClass("host") || $(this).hasClass("empty")) || $(this).children(".kick").delay(150).fadeIn(300))
            });
            $("#box_classes").on("mouseleave", ".cla", function () {
                $(this).children(".kick").stop(!0);
                $(this).children(".kick").fadeOut(300)
            });
            $("#button_lobby_options").on("click", function () {
                Engine.Elements.elements.lobby_options.visible ?
                        Engine.Elements.remove("lobby_options") : Engine.socket.emit("getLobbyOptions")
            });
            $(".lobby_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $("#lobby_leave").on("click", function () {
                Engine.Game.lobbyToJoin = 0;
                Engine.Elements.remove("menu_lobby");
                Engine.socket.emit("leaveLobby");
                Engine.Elements.remove("game_running_notice");
                Engine.Elements.append("menu_main");
                Engine.history.pushState()
            });
            $(".map").on("click", function () {
                var a = $(this).attr("id").split("_")[1];
                Engine.socket.emit("changeMap",
                        a)
            });
            $("#lobby_ready").on("click", function () {
                $(this).toggleClass("active");
                $(this).hasClass("active") ? Engine.socket.emit("ready") : Engine.socket.emit("unready")
            });
            $("#chatLobbyInput").on("keydown", function (a) {
                a = a || window.e;
                13 === a.keyCode && (0 < $("#chatLobbyInput").val().length && (Engine.socket.emit("chat", $("#chatLobbyInput").val()), $("#chatLobbyInput").val("")), $("#chatLobbyInput").focus())
            });
            var a = Engine.Game.getScreenshots();
            if (0 < a.length) {
                $("#box_extra").css({
                    background: "#000"
                });
                $("#box_extra .arrows").show();
                for (var b = a.length; b--; ) {
                    var c = '<div id="shot_' + b + '" class="shot" style="background-image: url(' + a[b].thumb.toDataURL("image/png") + ');"><div class="desc">' + (a.length - b) + "/" + a.length + "</div></div>";
                    $("#shots").append(c)
                }
                $("#shots").cycle({
                    fx: "fade",
                    timeout: 5E3,
                    speed: 800,
                    pause: 1,
                    next: "#shot_next",
                    prev: "#shot_prev"
                })
            } else if (Engine.ads.show)
                new Clay.Advertisement({
                    size: "200x200",
                    position: {
                        left: "38px",
                        top: "2px",
                        inline: !0,
                        parent: document.getElementById("box_extra")
                    },
                    refreshInterval: 60
                });
            else if (!Engine.branding ||
                    Engine.allowLobbiesAd[Engine.branding])
                $("#box_extra").html('<a href="#" id="extra_action"><img src="gfx/news/promo_lobby_sta.png?" /></a>'), $("#extra_action").click(function (a) {
                    a.preventDefault();
                    a = ($(window).width() - 1020) / 2 | 0;
                    var b = ($(window).height() - 720) / 2 | 0;
                    window.open("http://store.steampowered.com/app/338330/", "", "left=" + a + ",top=" + b + ",width=1020,height=720,toolbar=0,location=1,resizable=1");
                    return !1
                });
            $("#shots").on("click", ".shot", function () {
                var a =
                        $(this).attr("id").split("shot_")[1],
                        b = Engine.Game.getScreenshots(),
                        c = b[a].full,
                        g = b[a].taken,
                        h = c.toDataURL("image/png");
                b[a].url = "screenshots/" + Engine.server.hash.toString() + "/" + g.toString() + ".png";
                a = c.width;
                c = c.height;
                b = ($(window).width() - a) / 2 | 0;
                g = ($(window).height() - c) / 2 | 0;
                window.open(h, "", "left=" + b + ",top=" + g + ",width=" + a + ",height=" + c + ",toolbar=0,location=0,resizable=0")
            });
            Engine.share()
        },
        onRemove: function () {
            $("#shots").cycle("destroy");
            Engine.Elements.elements.lobby_options.visible && Engine.Elements.remove("lobby_options");
            Engine.marquee.stop($("#marquee"))
        }
    },
    info: {
        preventHandler: !0
    },
    help: {
        bindEvents: function () {
            $("#help").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#help").on("mousemove", function (a) {
                a.stopPropagation()
            });
            $("#help").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#help_next").on("click", function () {
                Engine.Elements.remove("help");
                Engine.Elements.append("help2");
                $("html").focus()
            })
        }
    },
    help2: {
        bindEvents: function () {
            $("#help2").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#help2").on("mousemove",
                    function (a) {
                        a.stopPropagation()
                    });
            $("#help2").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#help_close").on("click", function () {
                Engine.Elements.remove("help2");
                $("html").focus()
            })
        }
    },
    options: {
        bindEvents: function () {
            var a = this;
            $("#options").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#options").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#options").on("mouseup", ".ui-slider-handle", function (a) {
                Engine.audio.play("click");
                Engine.saveSettings()
            });
            $("#options_scale_fullscreen").on("click",
                    function () {
                        Engine.fullscreen = Engine.fullscreen ? !1 : !0;
                        Engine.saveSettings();
                        Engine.fullscreen || Engine.removeFullscreen();
                        Engine.updateScreen();
                        a.process()
                    });
            if (Engine.kongregate || Engine.branding && !Engine.allowFullscreen[Engine.branding])
                $("#options_fullscreen").addClass("disabled");
            else
                $("#options_fullscreen").on("click", function () {
                    Engine.fullscreenAPI = Engine.fullscreenAPI ? !1 : !0;
                    Engine.fullscreenAPI ? Engine.fullscreenLaunch() : Engine.fullscreenCancel();
                    a.process()
                });
            $("#options_scale_auto").on("click",
                    function () {
                        Engine.scaleAuto = Engine.scaleAuto ? !1 : !0;
                        Engine.updateScreen();
                        a.process()
                    });
            $("#options_scale_05").on("click", function () {
                Engine.scaleAuto = !1;
                Engine.updateScreen(0.5);
                a.process()
            });
            $("#options_scale_10").on("click", function () {
                Engine.scaleAuto = !1;
                Engine.updateScreen(1);
                a.process()
            });
            $("#options_scale_20").on("click", function () {
                Engine.scaleAuto = !1;
                Engine.updateScreen(2);
                a.process()
            });
            $("#options_scale_30").on("click", function () {
                Engine.scaleAuto = !1;
                Engine.updateScreen(3);
                a.process()
            });
            $("#options_input_keyboard").on("click",
                    function () {
                        Engine.gamepadActive = !1;
                        a.process()
                    });
            $("#options_input_gamepad").on("click", function () {
                Engine.gamepadSupport ? Engine.gamepadActive = !0 : Engine.Elements.append("gamepad_detect");
                a.process()
            });
            $("#volumeSound").slider({
                value: Engine.audio.volume.sound,
                slide: function (a, c) {
                    Engine.audio.volumeSoundChange(c.value)
                }
            });
            $("#volumeMusic").slider({
                value: Engine.audio.volume.music,
                slide: function (a, c) {
                    Engine.audio.volumeMusicChange(c.value)
                }
            });
            $("#options_muteSound").on("click", function () {
                Engine.audio.sound =
                        Engine.audio.sound ? !1 : !0;
                Engine.saveSettings();
                Engine.audio.sound ? Engine.audio.unmute("sound") : Engine.audio.mute("sound");
                $(this).toggleClass("active")
            });
            $("#options_muteMusic").on("click", function () {
                Engine.audio.music = Engine.audio.music ? !1 : !0;
                Engine.saveSettings();
                Engine.audio.music ? Engine.audio.unmute("music") : Engine.audio.mute("music");
                $(this).toggleClass("active")
            });
            $("#options_close").on("click", function () {
                Engine.Elements.remove("options");
                $("html").focus()
            })
        },
        process: function () {
            Engine.gamepadSupport &&
                    Engine.gamepadActive || ($("#options_input_keyboard").addClass("active"), $("#options_input_gamepad").removeClass("active"));
            Engine.gamepadActive && ($("#options_input_keyboard").removeClass("active"), $("#options_input_gamepad").addClass("active"));
            Engine.audio.sound || $("#options_muteSound").addClass("active");
            Engine.audio.music || $("#options_muteMusic").addClass("active");
            Engine.fullscreen ? $("#options_scale_fullscreen").addClass("active") : $("#options_scale_fullscreen").removeClass("active");
            Engine.fullscreenAPI ?
                    $("#options_fullscreen").addClass("active") : $("#options_fullscreen").removeClass("active");
            Engine.scaleAuto ? $("#options_scale_auto").addClass("active") : $("#options_scale_auto").removeClass("active");
            for (var a = [
                [0.5, "options_scale_05"],
                [1, "options_scale_10"],
                [1.5, "options_scale_15"],
                [2, "options_scale_20"],
                [3, "options_scale_30"]
            ], b = Engine.contextSmoothing ? Engine.scale : Engine.contextScale, c = 0; c < a.length; c++)
                b == a[c][0] ? $("#" + a[c][1]).addClass("active") : $("#" + a[c][1]).removeClass("active")
        }
    },
    game: {
        process: function () {
            $("#chatOutput").scrollTop(9999);
            $("#overlay").addClass("hideCursor");
            Engine.branding && !Engine.allowChat[Engine.branding] && $("#chatInputNote").hide()
        },
        bindEvents: function () {
            $("#menu_game").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#menu_game").on("mousemove", function (a) {
                a.stopPropagation()
            });
            $("#menu_game").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#game_options").on("click", function () {
                Engine.Elements.toggle("options")
            });
            $("#game_help").on("click", function () {
                Engine.Elements.elements.help.visible ?
                        Engine.Elements.remove("help") : Engine.Elements.elements.help2.visible ? Engine.Elements.remove("help2") : Engine.Elements.toggle("help")
            });
            $("#game_quit").on("click", function () {
                Engine.Elements.toggle("quit")
            })
        },
        onRemove: function () {
            $("#overlay").removeClass("hideCursor")
        }
    },
    quit: {
        bindEvents: function () {
            $("#quit").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#quit").on("mousemove", function (a) {
                a.stopPropagation()
            });
            $("#quit").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#quit_no").on("click",
                    function () {
                        Engine.Elements.remove("quit");
                        $("html").focus()
                    });
            $("#quit_yes").on("click", function () {
                Engine.Elements.remove("quit");
                Engine.state = 12
            })
        }
    },
    gamepad_detect: {
        bindEvents: function () {
            $("#gamepad_detect").on("mousedown", function (a) {
                a.stopPropagation()
            });
            $("#gamepad_detect").on("mousemove", function (a) {
                a.stopPropagation()
            });
            $("#gamepad_detect").on("mousedown", ".button", function (a) {
                Engine.audio.play("click")
            });
            $("#gamepad_detect_cancel").on("click", function () {
                Engine.Elements.remove("gamepad_detect")
            })
        }
    },
    unsupported: {
        process: function () {
            $("html").addClass("unsupported");
            $("#back_to_main").click(function () {
                window.location.href = "http://www.treasurearena.com"
            })
        }
    },
    console: {
        bindEvents: function () {
            $("#consoleInput").val("").focus()
        }
    }
};
Engine.Entity = function (a) {
    this.type = "entity";
    this.id = ++Engine.ENT_ID;
    this.owner = {};
    this.data = a || {};
    this.tickT = this.lastTick = this.tick = 0;
    this.light = this.collidable = this.kill = !1
};
Engine.Entity.prototype.init = function () {};
Engine.Entity.prototype.ticker = function (a) {
    this.lastTick = this.tick;
    this.tick++;
    this.tickT += Engine.deltaT
};
Engine.Entity.prototype.update = function (a) {
    this.ticker(a);
    this.onTick(a)
};
Engine.Entity.prototype.onTick = function (a) {};
Engine.Entity.prototype.draw = function () {};
Engine.Entity.prototype.collide = function () {};
Engine.Entity.prototype.getPos = function () {
    return {
        x: this.data.x,
        y: this.data.y,
        mx: this.data.mx,
        my: this.data.my,
        f: this.data.f
    }
};
Engine.Entity.prototype.coordToScreen = function (a, b) {
    var c;
    c = Engine.Assets.tileSize;
    c = {
        x: (this.data.x - a.x + 9.5) * c - (b.fw - c) / 2,
        y: (this.data.y - a.y + 5) * c - (b.fh - c)
    };
    c.x = ~~(c.x + 0.5) + (c.x >> 31);
    c.y = ~~(c.y + 0.5) + (c.y >> 31);
    return c
};
Engine.Entity.prototype.inView = function (a, b, c, d, e, f) {
    return !(d < 2 * -b || d > Engine.height + 2 * b || c < 2 * -a || c > Engine.width + 2 * a)
};
Engine.Entity.prototype.inViewPointer = function (a, b, c, d, e, f) {
    return !(d < -b / 2 || d > Engine.height - b / 2 || c < -a / 2 || c > Engine.width - a / 2)
};
Engine.Entity.prototype.collisionObjects = function (a) {
    var b = Engine.Game.getCollidableObjects(),
            c = {
                left: a.x + 0.2,
                right: a.x + 1 - 0.2,
                top: a.y + 0.2,
                bottom: a.y + 1 - 0.2
            },
            d = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            },
            e, f = b.length,
            g, h = !1,
            k = !1,
            l = !1;
    for (e = 0; e < f; e++)
        g = b[e], !this.collidable || (!g.collidable || "projectile" === this.type && g.inAir || "projectile" === this.type && g.dodge || "projectile" === this.type && g.data.invincible || !this.canHurtSelf && g.id === this.owner.id || g.id === this.id || 1 !== g.data.alive || "projectile" === this.type && "npc" ===
                this.owner.type && "npc" == g.type && this.owner.id != g.id) || (d.left = g.data.x + 0.2, d.right = g.data.x + 1 - 0.2, d.top = g.data.y + 0.2, d.bottom = g.data.y + 1 - 0.2, Engine.collisionAABB(c, d) && (Math.abs(c.left - d.left) > Math.abs(c.top - d.top) ? 0 != this.data.mx && (k = h = !0, a.x = this.collisionPush ? c.left < d.left ? a.x - (c.right - d.left) : a.x + (d.right - c.left) : this.data.x) : 0 != this.data.my && (l = h = !0, a.y = this.collisionPush ? c.top < d.top ? a.y - (c.bottom - d.top) : a.y + (d.bottom - c.top) : this.data.y)), h && (this.collide(g, k, l), g.collide(this, k, l), l = k = h = !1,
                c.left = a.x + 0.2, c.right = a.x + 1 - 0.2, c.top = a.y + 0.2, c.bottom = a.y + 1 - 0.2));
    return a
};
Engine.EntityMoving = function (a) {
    Engine.EntityMoving.prototype.uber.constructor.call(this, a);
    this.newPos = {
        x: 0,
        y: 0,
        cx: !1,
        cy: !1
    };
    this.savedPos = {
        x: [],
        y: []
    };
    this.inAir = this.saveHistory = !1;
    this.land = this.vZ = 0;
    this.dodge = !1;
    this.vD = 0;
    this.dodge_speed = 0.05;
    this.run_speed = 0.1;
    this.stun = 0;
    this.isShake = this.isHit = !1;
    this.collisionPush = this.collidable = !0;
    this.running = !1;
    this.animationTick = this.velY = this.velX = this.accY = this.accX = 0
};
Engine.EntityMoving.extend(Engine.Entity);
Engine.EntityMoving.prototype.update = function (a) {
    this.ticker(a)
};
Engine.EntityMoving.prototype.compensateSoft = function (a, b) {
    this.newPos.x = "x" == a ? b : this.data.x;
    this.newPos.y = "y" == a ? b : this.data.y;
    this.newPos = Engine.Game.collision(this.data, this.newPos);
    this.newPos = this.collisionObjects(this.newPos);
    this.data.x = this.newPos.x;
    this.data.y = this.newPos.y
};
Engine.EntityMoving.prototype.compensate = function (a, b, c) {
    var d = this.savedPos[a].length,
            e, f, g;
    if (c)
        for (e = g = 0; e < d; e++) {
            if (f = this.savedPos[a][e], f.t < c) {
                g = e;
                break
            }
        }
    else
        g = Math.round(Engine.server.ping / (1E3 / 60));
    if (0 == g || 0 == d)
        this.data[a] = b;
    else if (void 0 === this.savedPos[a][g])
        this.data[a] = b, this.savedPos.x.length = 0, this.savedPos.y.length = 0;
    else if (b -= this.savedPos[a][g].state, e = {
        x: "x" == a ? this.data.x += b : this.data.x,
        y: "y" == a ? this.data.y += b : this.data.y
    }, Engine.Game.collision(this.data, e), this.data.x = e.x,
            this.data.y = e.y, e.cy || e.cx)
        this.savedPos.x.length = 0, this.savedPos.y.length = 0, this.newPos.cy = !1, this.newPos.cx = !1;
    else
        for (e = g; e--; )
            this.savedPos[a][e].state += b
};
Engine.EntityMoving.prototype.pushHistory = function (a) {
    this.saveHistory && (this.savedPos[a].unshift({
        t: Date.now(),
        state: this.data[a]
    }), 100 < this.savedPos[a].length && this.savedPos[a].splice(-1))
};
Engine.EntityMoving.prototype.move = function (a, b) {
    if (1 !== this.data.alive)
        0 !== this.data.mx && (this.data.mx = 0), 0 !== this.data.my && (this.data.my = 0);
    else {
        var c = this.data.mod_speed;
        this.running && !this.dodge && (c = this.run_speed);
        this.inAir && (c += this.data.jump_speed);
        this.dodge && (c += this.dodge_speed);
        var d = b[Math.ceil(this.data.y - 0.5)];
        d && (d = d[Math.round(this.data.x)], this.inAir || -1 === Engine.Assets.data.tilesets["0"].stairs.indexOf(d) || (c -= this.data.mod_speed / 2));
        this.newPos.x = this.data.x + this.data.mx * c * a;
        this.newPos.y =
                this.data.y + this.data.my * c * a;
        Engine.Game.collision(this.data, this.newPos);
        this.collisionObjects(this.newPos);
        this.newPos.x = Math.round(1E3 * this.newPos.x) / 1E3;
        this.newPos.y = Math.round(1E3 * this.newPos.y) / 1E3;
        this.data.x = this.newPos.x;
        this.data.y = this.newPos.y;
        this.pushHistory("x");
        this.pushHistory("y");
        this.newPos.cy = !1;
        this.newPos.cx = !1;
        0.04 < c && (0 != this.data.mx || 0 != this.data.my) && (this.running ? this.tick % 4 < this.lastTick % 4 && !this.inAir && (c = new Engine.FX.Smoketrail({
            x: this.data.x - 0.5 * this.data.mx,
            y: this.data.y -
                    0.2 - 0.2 * this.data.my
        }), c.init(), Engine.Game.addObject(c)) : this.tick % 16 < this.lastTick % 16 && !this.inAir && (c = new Engine.FX.Smoketrail({
            x: this.data.x - 0.5 * this.data.mx,
            y: this.data.y - 0.2 - 0.2 * this.data.my
        }), c.init(), Engine.Game.addObject(c)))
    }
};
Engine.EntityMoving.prototype.collide = function (a, b, c) {};
Engine.EntityMoving.prototype.draw = function (a, b, c, d) {};
Engine.EntityPlayer = function (a) {
    Engine.EntityPlayer.prototype.uber.constructor.call(this);
    this.id = a.id;
    this.data = a;
    this.data.z = 0;
    this.illuLighting = this.illuLight = null;
    this.hpCut = 0;
    this.light = "light_player";
    this.invisSet = this.armorSet = 0;
    this.casting = !1;
    this.castTick = 0;
    this.pointerSet = this.showStamina = !1;
    this.telegraph = this.coinGet = 0;
    this.frame = Engine.rand(0, 6);
    this.timer = 7;
    this.deg = 0;
    this.skills = {
        armor: {
            init: function (a) {
                var c;
                c = new Engine.FX.Buff(a, 0, 1);
                c.init();
                Engine.Game.addObject(c);
                c = new Engine.FX.Buff(a,
                        90, 0);
                c.init();
                Engine.Game.addObject(c);
                c = new Engine.FX.Buff(a, 180, -1);
                c.init();
                Engine.Game.addObject(c);
                c = new Engine.FX.Buff(a, 270, -2);
                c.init();
                Engine.Game.addObject(c)
            }
        }
    };
    this.weaponList = "Melee Arrow Shell Bullet Rocket Grenade Bone".split(" ");
    this.dodgedAt = this.jumpedAt = 0
};
Engine.EntityPlayer.extend(Engine.EntityMoving);
Engine.EntityPlayer.prototype.init = function () {
    switch (this.data.job) {
        case "war":
            this.sprites = {
                player: "class_war",
                hand_main: "weapon_sword1",
                hand_off: "shield_blue",
                pointer: "pointer_war"
            };
            break;
        case "rog":
            this.sprites = {
                player: "class_rog",
                hand_main: "weapon_dagger1",
                hand_off: "shield_green",
                pointer: "pointer_rog"
            };
            break;
        case "mag":
            this.sprites = {
                player: "class_mag",
                hand_main: "weapon_staff1",
                hand_off: "shield_red",
                pointer: "pointer_mag"
            };
            break;
        case "war2":
            this.sprites = {
                player: "class_war2",
                hand_main: "weapon_sword1",
                hand_off: "shield_blue",
                pointer: "pointer_war"
            };
            break;
        case "rog2":
            this.sprites = {
                player: "class_rog2",
                hand_main: "weapon_dagger1",
                hand_off: "shield_green",
                pointer: "pointer_rog"
            };
            break;
        case "mag2":
            this.sprites = {
                player: "class_mag2",
                hand_main: "weapon_staff1",
                hand_off: "shield_red",
                pointer: "pointer_mag"
            }
    }
    "bot" === this.data.subtype ? this.initNameBuffer("#58316b") : this.initNameBuffer("#a10000")
};
Engine.EntityPlayer.prototype.leave = function () {
    this.data.alive = -1;
    this.kill = !0
};
Engine.EntityPlayer.prototype.update = function (a, b) {
    -1 === this.data.alive ? this.leave() : (this.ticker(a), this.inAir && this.jump(), this.dodge && this.dodgeRoll(), this.data.invincible && (this.data.invincible -= Engine.deltaT, 0 >= this.data.invincible && (this.data.invincible = !1)), this.updateStatus(), this.move(a, b), this.getFaceDirection(), this.onTick(a))
};
Engine.EntityPlayer.prototype.onTick = function (a) {
    this.animationTick += Engine.deltaT;
    this.animationTick > this.timer * Engine.frameStep && (this.animationTick = 0, this.frame++)
};
Engine.EntityPlayer.prototype.doJump = function () {
    if (!this.inAir) {
        this.jumpedAt = Date.now();
        this.land = Engine.now;
        this.inAir = !0;
        var a = new Engine.FX.Smoketrail(this.data);
        a.init();
        Engine.Game.addObject(a);
        Engine.Game.audio.play("jump", this.data)
    }
};
Engine.EntityPlayer.prototype.doDodge = function () {
    this.dodge || (this.dodgedAt = Date.now(), this.dodge = !0)
};
Engine.EntityPlayer.prototype.doAttack = function (a) {
    this.shoot || (this.shoot = !0);
    this.updateRotation(a);
    var b = new Engine.FX.Slash(this.data);
    b.init();
    Engine.Game.addObject(b);
    this.slashing = Engine.now;
    Engine.Game.audio.play("slash", this.data);
    return a
};
Engine.EntityPlayer.prototype.doShoot = function (a) {
    this.shoot || (this.shoot = !0);
    this.updateRotation(a.rotation);
    this.shooting = Engine.now;
    var b = a.weapon ? this.weaponList[a.weapon] : this.data.weapon;
    a = a.rotation;
    if (!b || "Melee" === b)
        console.log("Error: Weapon is " + b);
    else if (Engine.Projectile[b]) {
        var c = new Engine.Projectile[b](this.data);
        c.init(a);
        Engine.Game.addObject(c);
        if ("Shell" == b) {
            var d;
            d = a - 0.3;
            c = new Engine.Projectile[b](this.data);
            c.init(d);
            Engine.Game.addObject(c);
            d = a + 0.3;
            c = new Engine.Projectile[b](this.data);
            c.init(d);
            Engine.Game.addObject(c);
            Engine.Game.audio.play("shell", this.data)
        }
        return a
    }
};
Engine.EntityPlayer.prototype.stopShoot = function () {
    this.shoot = !1
};
Engine.EntityPlayer.prototype.updateRotation = function (a) {
    -0.8 < a && 0.8 > a ? "E" != this.data.f && (this.data.f = "E") : (-2.4 > a || 2.4 < a) && "W" != this.data.f && (this.data.f = "W");
    -2.4 < a && -0.8 > a ? "N" != this.data.f && (this.data.f = "N") : 0.8 < a && 2.4 > a && "S" != this.data.f && (this.data.f = "S")
};
Engine.EntityPlayer.prototype.updateStatus = function () {
    var a = Engine.now;
    this.isHit && this.isHit < a - 150 && (this.isHit = !1);
    this.isShake && this.isShake < a - 100 && (this.isShake = !1);
    this.slashing && this.slashing < a - 150 && (this.slashing = !1);
    this.casting && 1 === this.data.alive && (this.castTick++, 0 == this.castTick % 2 && (a = new Engine.FX.Thud(this.data), a.init(), Engine.Game.addObject(a)))
};
Engine.EntityPlayer.prototype.resolveStatus = function (a, b, c) {
    var d, e = a.length,
            f;
    for (d = 0; d < e; d++)
        if (f = a[d], void 0 !== f.atk) {
            if (b && 0 < f.atk && (this.isShake = Engine.now), !b)
                switch (f.atk) {
                    case 1:
                        this.doAttack(f.r);
                        break;
                    case 2:
                        this.doShoot({
                            rotation: f.r,
                            weapon: f.w
                        });
                        break;
                    case 3:
                        this.doShoot({
                            rotation: f.r,
                            weapon: f.w,
                            alt: !0
                        });
                        break;
                    case 0:
                        this.stopShoot()
                }
        } else if (void 0 !== f.switchTo)
            b || (this.data.weapon = this.weaponList[f.switchTo]);
        else if (void 0 !== f.run) {
            if (!b)
                switch (f.run) {
                    case 1:
                        this.running = !0;
                        break;
                    case 0:
                        this.running = !1
                }
        } else if (void 0 !== f.hit) {
            this.isHit = this.stun = Engine.now;
            var g = "player" === this.type ? "visitorRed" : "visitor",
                    g = new Engine.FX.Damage(this.data, g, f.hit);
            g.init();
            Engine.Game.addObjectOverlay(g);
            Engine.Game.audio.play("hit", this.data)
        } else if (void 0 !== f.miss)
            g = "player" === this.type ? "visitorRed" : "visitor", g = new Engine.FX.Damage(this.data, g, "miss"), g.init(), Engine.Game.addObjectOverlay(g);
        else if (void 0 !== f.block)
            this.showStamina && !this.data.armor && this.reduceSta(100 / this.data.hpMax * 4 * (f.block + 1)), Engine.Game.audio.play("block2",
                    this.data), Engine.Game.audio.play("block", this.data), f = this.data.x, g = this.data.y + 0.1, "W" === this.data.f && (f -= 0.15), "E" === this.data.f && (f += 0.15), "N" === this.data.f && (g -= 0.35), "S" === this.data.f && (g += 0.15), g = new Engine.FX.Collect({
                x: f,
                y: g
            }), g.init(), Engine.Game.addObject(g);
        else if (void 0 !== f.aggro)
            g = new Engine.FX.Aggro(this.data), g.init(), Engine.Game.addObjectOverlay(g);
        else if (void 0 !== f.pickup) {
            switch (f.pickup) {
                case 0:
                    this.coinGet = Engine.now;
                    Engine.Game.audio.play("coin", this.data);
                    break;
                case 6:
                    Engine.Game.audio.play("potion",
                            this.data);
                    break;
                default:
                    Engine.Game.audio.play("pickup", this.data)
            }
            if (b)
                switch (f.pickup) {
                    case 1:
                        this.pickWeapon("Arrow", f.c);
                        break;
                    case 2:
                        this.pickWeapon("Rocket", f.c);
                        break;
                    case 3:
                        this.pickWeapon("Grenade", f.c);
                        break;
                    case 4:
                        this.pickWeapon("Shell", f.c);
                        break;
                    case 5:
                        this.pickWeapon("Bullet", f.c)
                }
        } else if (void 0 !== f.trap)
            g = new Engine.FX.Trap(f.trap), g.init(), Engine.Game.addObject(g);
        else if (void 0 !== f.die) {
            this.data.alive = 0;
            this.data.mx = 0;
            this.data.my = 0;
            this.light && (this.light = !1);
            b && f.by !== this.data.id &&
                    (Engine.Game.setCamera(f.die), Engine.webaudio && (Engine.audio.buses.biquad.frequency.value = 500, this.initwarning = 2));
            for (var h = 0; 12 > h; h++)
                g = new Engine.FX.Explode(this.data), g.init(), Engine.Game.addObject(g);
            Engine.Game.audio.play("die", this.data);
            "npc" !== this.type && (g = Engine.rand(0, 2), Engine.Game.audio.play("cheer" + g), b || c !== f.die || setTimeout(function () {
                Engine.Game.takeScreenshot()
            }, 125))
        } else if (void 0 !== f.jump)
            b || this.doJump();
        else if (void 0 !== f.dodge)
            b || this.doDodge();
        else if (void 0 !== f.skill)
            switch (f.skill) {
                case "armor":
                    this.armorSet = Engine.now;
                    this.data.armor = !0;
                    this.skills.armor.init(this);
                    break;
                case "invis":
                    this.invisSet = Engine.now, this.data.invis = !0
            }
        else if (void 0 !== f.cast)
            switch (f.cast) {
                case 1:
                    this.casting = !0;
                    break;
                case 0:
                    this.casting = !1
            }
};
Engine.EntityPlayer.prototype.pickWeapon = function (a, b) {
    this.data.weapon = a
};
Engine.EntityPlayer.prototype.draw = function (a, b, c, d) {
    if (1 == this.data.alive) {
        var e, f, g, h, k, l = Engine.Assets.sprites[this.sprites.player];
        h = l.fw;
        k = l.fh;
        e = this.coordToScreen(a, l);
        a = e.x;
        e = e.y - this.data.z;
        this.inViewPointer(h, k, a, e, h, k) || (c.fog || !this.sprites.pointer || this.pointerSet) || (this.pointerSet = !0, c = new Engine.FX.Pointer(this.data, this.sprites, this.drawPointer, this.nameBufferPointer), c.init(), Engine.Game.addObjectOverlay(c));
        if (this.inView(h, k, a, e, h, k)) {
            this.sprites.pointer && (this.pointerSet && this.inViewPointer(h,
                    k, a, e, h, k)) && (this.pointerSet = !1);
            c = 0;
            f = this.frame;
            var m = Engine.Assets.tileSize,
                    n = Engine.canvas.ctx;
            this.data.invincible && 2 > this.tick % 6 && (n.globalAlpha = 0);
            this.showStamina && this.drawStamina(a, e, m);
            this.data.invis && (1E3 > Engine.now - this.invisSet && this.tick % 4 > this.lastTick % 4 && (n.globalAlpha = 0.5), 1E3 <= Engine.now - this.invisSet && (n.globalAlpha = d ? 0.5 : 150 > Engine.now - this.slashing || 150 > Engine.now - this.shooting ? 0.5 : 0));
            this.drawName(a + h / 2, e, !1);
            d = this.getPhase(this.data.alive, this.data.mx, this.data.my);
            g = this.getOffset(this.sprites.player,
                    d, f, l);
            0 != f % 2 || (0 == this.data.mx && 0 == this.data.my || this.inAir) || (c = Engine.scale);
            f = g.x;
            g = g.y;
            "hit" == d && (a += 5 * (Math.random() - 0.5), e += 5 * (Math.random() - 0.5));
            this.drawShadow(m, h, k, a, e, h, k);
            "N" == this.data.f && this.drawWeapons(a, e, c, d);
            this.dodge ? (n.save(), n.translate(a + h / 2, e + k / 2), n.rotate(3.145 * this.vD * (-1 == this.data.mx ? -1 : 1)), n.drawImage(l, f, g, h, k, -(h / 2), -(k / 2), h, k), n.restore()) : n.drawImage(l, f | 0, g | 0, h | 0, k | 0, a | 0, e + c | 0, h, k | 0);
            "N" != this.data.f && this.drawWeapons(a, e, c, d);
            l.fw <= m && !this.inAir && this.drawGrass(b,
                    a, e, h, k, c);
            this.data.block && this.drawBlocKBubble(a, e, h, k);
            n.globalAlpha = 1
        }
    }
};
Engine.EntityPlayer.prototype.drawWeapons = function (a, b, c, d) {
    if ("Melee" == this.data.weapon)
        this.sprites.hand_main && "attack" != d && this.drawSword(a, b, c), this.sprites.hand_off && this.drawShield(a, b, c);
    else {
        d = Engine.Assets.sprites.weapons;
        var e = Engine.Assets.data.sprites.weapons.weapon[this.data.weapon],
                f = Engine.canvas.ctx,
                g, h, k, l, m, n;
        void 0 !== e && (g = e.sx * d.fw | 0, h = 0, k = d.fw, l = d.fh, n = e.offset[this.data.f], e = n.dx / 2 * Engine.scale, n = n.dy / 2 * Engine.scale, b += 6 * Engine.scale - c, "N" == this.data.f && (m = -90, a += e, b += n), "S" ==
                this.data.f && (m = 0, h += l, a += e, b += n), "W" == this.data.f && (m = 0, h += l, a += e, b += n), "E" == this.data.f && (m = 0, a += e, b += n), f.save(), f.translate(a + k / 2, b + l / 2 - -1 * n), f.rotate(m * Engine.math.PI / 180), this.dodge && f.rotate(3.145 * this.vD * (-1 == this.data.mx ? -1 : 1)), f.drawImage(d, g, h, k, l, -(k / 2) + e, -(l / 2) + n, k, l), f.restore())
    }
};
Engine.EntityPlayer.prototype.drawSword = function (a, b, c) {
    var d = Engine.Assets.sprites[this.sprites.hand_main],
            e, f, g = Engine.canvas.ctx;
    e = d.fw;
    f = d.fh;
    b += c + Engine.scale;
    "S" == this.data.f || "W" == this.data.f ? (c = d.fh, a -= 10 * Engine.scale) : (c = 0, a += 10 * Engine.scale);
    a |= 0;
    b |= 0;
    this.dodge ? (g.save(), g.translate(a + e / 2, b + f / 2), g.rotate(3.145 * this.vD * (-1 == this.data.mx ? -1 : 1)), g.drawImage(d, 0, c, e, f, -(e / 2), -(f / 2), e, f), g.restore()) : g.drawImage(d, 0, c, e, f, a, b, e, f)
};
Engine.EntityPlayer.prototype.drawShield = function (a, b, c) {
    var d = Engine.Assets.sprites[this.sprites.hand_off],
            e, f, g, h = Engine.canvas.ctx;
    f = d.fw;
    g = d.fh;
    "S" == this.data.f || "W" == this.data.f ? (e = d.fh, b += 4 * Engine.scale - c) : "N" == this.data.f ? (e = 2 * d.fh | 0, b -= c) : (e = 0, b += 4 * Engine.scale - c);
    this.data.block && ("W" == this.data.f && (a -= 4 * Engine.scale), "E" == this.data.f && (a += 4 * Engine.scale), "N" == this.data.f && (b -= 2 * Engine.scale, a += 4 * Engine.scale), "S" == this.data.f && (b += 2 * Engine.scale, a -= 4 * Engine.scale));
    b += Engine.scale;
    a |= 0;
    b |= 0;
    this.dodge ? (h.save(), h.translate(a + f / 2, b + g / 2), a = -1 == this.data.mx ? -1 : 1, h.rotate(3.145 * this.vD * a), h.drawImage(d, 0, e, f, g, -(f / 2), -(g / 2), f, g), h.restore()) : h.drawImage(d, 0, e, f, g, a, b, f, g)
};
Engine.EntityPlayer.prototype.drawLight = function (a) {
    var b = Engine.Assets.sprites[this.light],
            c = Engine.canvas.ctx,
            d = Engine.Assets.sprites[this.sprites.player],
            e = this.coordToScreen(a, d),
            f;
    a = d.fw;
    d = d.fh;
    f = e.x;
    e = e.y - this.data.z;
    if (this.inView(a, d, f, e, a, d)) {
        f = f + (a - b.fw) / 2 | 0;
        e = e + (d - b.fh) / 2 | 0;
        c.save();
        c.globalCompositeOperation = "lighter";
        c.drawImage(b, f, e);
        if (150 > Engine.now - this.slashing || 150 > Engine.now - this.shooting)
            c.globalAlpha = 0.65, c.drawImage(b, f, e);
        c.restore()
    }
};
Engine.EntityPlayer.prototype.drawBlocKBubble = function (a, b, c, d) {
    var e = Engine.Assets.sprites.block,
            f, g, h = Engine.canvas.ctx;
    f = e.fw;
    g = e.fh;
    a = a + (c - e.fw) / 2 | 0;
    b = b + (d - e.fh) / 2 | 0;
    c = e.fw;
    d = e.fh;
    a += (e.fw - c) / 2;
    b += (e.fh - d) / 2;
    h.save();
    h.drawImage(e, 0, 0, f, g, a, b, c, d);
    h.restore()
};
Engine.EntityPlayer.prototype.drawShadow = function (a, b, c, d, e, f, g) {
    a = Engine.Assets.sprites.shadow;
    d = d + (f - a.fw) / 2 | 0;
    e = e + g - a.fh / 2 | 0;
    e -= 2 * Engine.scale | 0;
    e += this.data.z | 0;
    Engine.canvas.ctx.drawImage(a, d, e)
};
Engine.EntityPlayer.prototype.initNameBuffer = function (a) {
    a = Engine.Assets.fonts.semplice.fw;
    var b = this.data.name,
            c = b.length,
            d = document.createElement("canvas");
    d.width = c * (a - a / 4) | 0;
    d.height = 10 * Engine.scale | 0;
    d.ctx = d.getContext("2d");
    this.nameBuffer = d;
    Engine.text("semplice", b, 0, 0, !1, void 0, d);
    this.sprites.pointer && this.initNameBufferPointer()
};
Engine.EntityPlayer.prototype.initNameBufferPointer = function () {
    var a = Engine.Assets.fonts.semplice.fw,
            b = this.data.name,
            c = b.length,
            d = document.createElement("canvas");
    d.width = c * (a - a / 4) | 0;
    d.height = 11 * Engine.scale | 0;
    d.ctx = d.getContext("2d");
    this.nameBufferPointer = d;
    d.ctx.fillStyle = "#f0c622";
    d.ctx.fillRect(0, 0, d.width, d.height / 2);
    d.ctx.fillStyle = "#d9a51b";
    d.ctx.fillRect(0, d.height / 2, d.width, d.height / 2);
    d.ctx.fillStyle = "#fbe373";
    d.ctx.fillRect(0, 0, d.width, Engine.scale);
    d.ctx.fillStyle = "#2b2b2b";
    d.ctx.fillRect(0,
            d.height - Engine.scale, d.width, Engine.scale);
    Engine.text("semplice", b, 0, 0, !1, void 0, d)
};
Engine.EntityPlayer.prototype.drawLevel = function (a, b) {
    b -= 13 * Engine.scale;
    a -= this.nameBuffer.width / 2;
    a += 1.5 * this.data.level.toString().length * Engine.Assets.fonts.visitorLevel.fw;
    Engine.text("visitorLevel", this.data.level, a | 0, b | 0)
};
Engine.EntityPlayer.prototype.drawName = function (a, b, c) {
    var d = Engine.canvas.ctx;
    b -= 14 * Engine.scale;
    a -= this.nameBuffer.width / 2;
    c && (a += this.data.level.toString().length * Engine.Assets.fonts.visitorLevel.fw / 1.5);
    d.drawImage(this.nameBuffer, a | 0, b | 0)
};
Engine.EntityPlayer.prototype.drawGrass = function (a, b, c, d, e, f) {
    f = Engine.scale;
    try {
        var g = a[Math.ceil(this.data.y - 0.5)][Math.round(this.data.x)];
        if (-1 !== Engine.Assets.data.tilesets["0"].gras.indexOf(g)) {
            var h = Engine.Assets.sprites.grass;
            b = b + (d - h.fw) / 2 | 0;
            c = c + e - h.fh / 3 - 2 * f | 0;
            Engine.canvas.ctx.drawImage(h, b, c)
        }
    } catch (k) {
    }
};
Engine.EntityPlayer.prototype.drawHP = function (a, b, c) {
    if (this.data.hp != this.data.hpMax) {
        c = 1.5 * c | 0;
        var d = Math.round(100 * (this.data.hp / this.data.hpMax)),
                d = Math.round(d / 100 * c) | 0,
                e = Engine.canvas.ctx,
                f = 4 * Engine.scale | 0;
        b -= 4 * Engine.scale | 0;
        a -= c / 6 | 0;
        e.fillStyle = "#821f22";
        e.fillRect(a, b, c, f + Engine.scale);
        this.data.hp != this.data.hpMax && (e.fillStyle = "rgb(255,255,255)", e.fillRect(a, b, c, f));
        e.fillStyle = "rgb(200,0,0)";
        e.fillRect(a, b, d, f)
    }
};
Engine.EntityPlayer.prototype.drawStamina = function (a, b, c) {
    if (this.stamina != this.staminaMax) {
        c = 1.5 * c | 0;
        var d = Math.round(100 * (this.stamina / this.staminaMax)),
                d = Math.round(d / 100 * c) | 0,
                e = Engine.canvas.ctx,
                f = 4 * Engine.scale | 0;
        b -= 4 * Engine.scale | 0;
        a -= c / 6 | 0;
        e.fillStyle = "#bf8f10";
        e.fillRect(a, b, c, f + Engine.scale);
        100 != this.stamina && (e.fillStyle = "rgb(255,255,255)", e.fillRect(a, b, c, f));
        e.fillStyle = "#f0c521";
        e.fillRect(a, b, d, f)
    }
};
Engine.EntityPlayer.prototype.drawPointer = function (a, b, c, d, e, f) {
    b = Engine.wH;
    a = Engine.hH;
    e = Engine.lineDistance({
        x: b,
        y: a
    }, {
        x: c,
        y: d
    });
    c = (c - b) / e;
    d = (d - a) / e;
    e = Engine.Assets.sprites[this.sprites.pointer];
    f = 0;
    var g = e.fw,
            h = e.fh,
            k = e.fh / 2,
            l = 4 * Engine.scale,
            m = 0;
    b = b + b * c - g / 4;
    a = a + a * d - h / 4;
    Math.abs(d) >= Math.abs(c) ? 0 < d ? a = Engine.height - e.fh - k : (a = 0 + k, f = g, l += 10 * Engine.scale) : (0 < c ? (b = Engine.width - e.fw - k, f = 2 * g, m = -4 * Engine.scale) : (b = 0 + k, f = 3 * g, m = 4 * Engine.scale), l += 6 * Engine.scale);
    Engine.canvas.ctx.drawImage(e, f | 0, 0, g, h, b |
            0, a | 0, g, h);
    b += (e.fw - this.nameBuffer.width) / 2 + m;
    a += e.fh / 2 + l;
    Engine.canvas.ctx.drawImage(this.nameBuffer, b | 0, a | 0)
};
Engine.EntityPlayer.prototype.getFaceDirection = function () {
    var a = this.data.mx,
            b = this.data.my,
            c = this.data.f;
    0 == a && 0 == b || (this.shoot || this.data.block) || (-1 == b ? c = "N" : 1 == b && (c = "S"), -1 == a ? c = "W" : 1 == a && (c = "E"), c !== this.data.f && (this.data.f = c))
};
Engine.EntityPlayer.prototype.jump = function () {
    if (this.inAir) {
        var a = Date.now() - this.jumpedAt;
        this.data.z = Math.sin(3.2 / 550 * a) * 18 * Engine.scale;
        if (550 < a) {
            this.inAir = !1;
            this.data.z = 0;
            this.land = Engine.now;
            for (a = 0; 3 > a; a++) {
                var b = new Engine.FX.Thud(this.data);
                b.init();
                Engine.Game.addObject(b)
            }
            Engine.Game.audio.play("land", this.data)
        }
    }
};
Engine.EntityPlayer.prototype.dodgeRoll = function () {
    this.dodge && (350 < Date.now() - this.dodgedAt ? (this.vD = 0, this.dodge = !1) : this.vD += 0.1 * Engine.dt)
};
Engine.EntityPlayer.prototype.getPhase = function (a, b, c) {
    return 0 == a ? "corpse" : this.telegraph && 200 > Engine.now - this.telegraph ? "telegraph" : this.isHit ? "hit" : this.slashing ? "attack" : this.land && 150 > Engine.now - this.land ? "land" : this.inAir ? "jump" : a = 0 != b || 0 != c ? this.data.block ? "sneak" : "walk" : "idle"
};
Engine.EntityPlayer.prototype.getOffset = function (a, b, c, d) {
    a = Engine.Assets.data.sprites[a].status[b + this.data.f].frames;
    c %= a.length;
    return {
        x: a[c][0] * d.fw,
        y: a[c][1] * d.fh
    }
};
Engine.Player = function (a) {
    Engine.Player.prototype.uber.constructor.call(this, a);
    this.type = "player";
    this.weapons = {
        0: "Melee",
        1: "Arrow",
        2: "Shell",
        3: "Bullet",
        4: "Rocket",
        5: "Grenade"
    };
    this.delay = {
        Melee: 350,
        Arrow: 200,
        Arrow_ALT: 200,
        Rocket: 500,
        Rocket_ALT: 500,
        Grenade: 600,
        Grenade_ALT: 600,
        Shell: 500,
        Shell_ALT: 300,
        Bullet: 250,
        Bullet_ALT: 250
    };
    this.staConsume = {
        Melee: 8,
        Arrow: 6,
        Rocket: 10,
        Grenade: 12,
        Shell: 10,
        Bullet: 4
    };
    this.ammo = {
        last: 0,
        timer: 0,
        Melee: {
            own: !0,
            ammo: 0
        },
        Arrow: {
            cur: 16,
            max: 16,
            delay: 75,
            own: !1,
            ammo: 0
        },
        Rocket: {
            cur: 12,
            max: 12,
            delay: 100,
            own: !1,
            ammo: 0
        },
        Grenade: {
            cur: 10,
            max: 10,
            delay: 150,
            own: !1,
            ammo: 0
        },
        Shell: {
            cur: 10,
            max: 10,
            delay: 200,
            own: !1,
            ammo: 0
        },
        Bullet: {
            cur: 14,
            max: 14,
            delay: 120,
            own: !1,
            ammo: 0
        }
    };
    this.transmit = {};
    this.fire = !1;
    this.lastShot = 0;
    this.jumping = this.shoot = this.block = !1;
    this.lastdodge = this.lastjump = 0;
    this.skillAvailable = {
        1: !1
    };
    this.initwarning = 0;
    this.saveHistory = !0;
    this.lastMove = {
        left: 0,
        right: 0,
        up: 0,
        down: 0
    };
    this.runTrigger = "";
    this.runTolerance = 250;
    this.stamina = this.staminaMax = 200;
    this.lastBlock = 0;
    this.showStamina = !0;
    this.wheel = this.weaponSwitch = !1;
    this.lastSuper = 0;
    this.cast = this.screenshot = !1
};
Engine.Player.extend(Engine.EntityPlayer);
Engine.Player.prototype.onTick = function (a) {
    0 < this.stamina && (this.running && this.reduceSta(0.5 * a), this.inAir && this.reduceSta(0.5 * a));
    !this.running && (!Engine.keys.SHOOT && !this.shoot && 750 < Engine.now - this.lastBlock && this.stamina < this.staminaMax) && (this.stamina = this.block ? this.stamina + 0.3 * a : this.stamina + 1.9 * a, this.stamina >= this.staminaMax && (this.stamina = this.staminaMax));
    this.uber.onTick.call(this, a)
};
Engine.Player.prototype.reduceSta = function (a) {
    if ("number" === typeof a) {
        0 > this.stamina && (this.stamina = 0, this.lastBlock = Engine.now + 250, this.block && (this.data.block = !1, this.transmit.block = !1), this.running && (this.running = !1, this.addTransmitStatus({
            run: 0
        })));
        var b = 0 < this.stamina;
        this.stamina -= a;
        this.lastBlock = Engine.now;
        b && 0 >= this.stamina && (this.stamina = 0, this.lastBlock = Engine.now + 250, this.block && (this.data.block = !1, this.transmit.block = !1), this.running && (this.running = !1, this.addTransmitStatus({
            run: 0
        })))
    }
};
Engine.Player.prototype.handleInput = function () {
    var a = !1,
            b = Engine.now;
    Engine.keys.SCREENSHOT && !this.screenshot ? (this.screenshot = !0, Engine.Game.takeScreenshot()) : !Engine.keys.SCREENSHOT && this.screenshot && (this.screenshot = !1);
    !Engine.keys.SKILL1 || this.cast || !this.skillAvailable[1] || this.casting || this.inAir || this.block ? !Engine.keys.SKILL1 && this.cast && (this.cast = !1) : (this.addTransmitStatus({
        cast: 1
    }), this.skillAvailable[1] = !1, this.cast = !0, this.casting = b, 0 !== this.data.mx && (this.data.mx = 0, this.transmit.mx =
            0), 0 !== this.data.my && (this.data.my = 0, this.transmit.my = 0));
    if (!this.casting) {
        Engine.keys.LEFT || this.dodge || (Engine.keys.RIGHT && 1 != this.data.mx ? (a = !0, this.data.mx = 1, this.running && "W" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        })), this.stamina && (b - this.lastMove.right < this.runTolerance && !this.running && 0 === this.data.my) && (this.data.block || (this.addTransmitStatus({
            run: 1
        }), this.running = !0, this.runTrigger = "E"), this.shoot || this.data.block) && (this.lastdodge = Engine.now, this.doDodge(), this.addTransmitStatus({
            dodge: 1
        }),
                this.reduceSta(12)), this.lastMove.right = b) : Engine.keys.RIGHT || (1 != this.data.mx || this.inAir) || (a = !0, this.data.mx = 0, this.running && "E" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        }))));
        Engine.keys.RIGHT || this.dodge || (Engine.keys.LEFT && -1 != this.data.mx ? (a = !0, this.data.mx = -1, this.running && "E" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        })), this.stamina && (b - this.lastMove.left < this.runTolerance && !this.running && 0 === this.data.my) && (this.data.block || (this.addTransmitStatus({
            run: 1
        }),
                this.running = !0, this.runTrigger = "W"), this.shoot || this.data.block) && (this.lastdodge = Engine.now, this.doDodge(), this.addTransmitStatus({
            dodge: 1
        }), this.reduceSta(12)), this.lastMove.left = b) : Engine.keys.LEFT || (-1 != this.data.mx || this.inAir) || (a = !0, this.data.mx = 0, this.running && "W" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        }))));
        a && (this.transmit.mx = this.data.mx, a = !1);
        Engine.keys.DOWN || this.dodge || (Engine.keys.UP && -1 != this.data.my ? (a = !0, this.data.my = -1, this.running && "S" === this.runTrigger &&
                (this.running = !1, this.addTransmitStatus({
                    run: 0
                })), this.stamina && (b - this.lastMove.up < this.runTolerance && !this.running && 0 === this.data.mx) && (this.data.block || (this.addTransmitStatus({
            run: 1
        }), this.running = !0, this.runTrigger = "N"), this.shoot || this.data.block) && (this.lastdodge = Engine.now, this.doDodge(), this.addTransmitStatus({
            dodge: 1
        }), this.reduceSta(12)), this.lastMove.up = b) : Engine.keys.UP || (-1 != this.data.my || this.inAir) || (a = !0, this.data.my = 0, this.running && "N" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        }))));
        Engine.keys.UP || this.dodge || (Engine.keys.DOWN && 1 != this.data.my ? (a = !0, this.data.my = 1, this.running && "N" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        })), this.stamina && (b - this.lastMove.down < this.runTolerance && !this.running && 0 === this.data.mx) && (this.data.block || (this.addTransmitStatus({
            run: 1
        }), this.running = !0, this.runTrigger = "S"), this.shoot || this.data.block) && (this.lastdodge = Engine.now, this.doDodge(), this.addTransmitStatus({
            dodge: 1
        }), this.reduceSta(12)), this.lastMove.down = b) : Engine.keys.DOWN ||
                (1 != this.data.my || this.inAir) || (a = !0, this.data.my = 0, this.running && "S" === this.runTrigger && (this.running = !1, this.addTransmitStatus({
            run: 0
        }))));
        a && (this.transmit.my = this.data.my);
        Engine.keys.JUMP && !this.jumping && this.stamina ? this.data.block || this.inAir || (this.jumping = !0, this.lastjump = Engine.now, this.doJump(), this.addTransmitStatus({
            jump: 1
        })) : !Engine.keys.JUMP && this.jumping && (this.jumping = !1);
        Engine.keys.WEAPON && !this.weaponSwitch ? (this.weaponSwitch = !0, a = this.weaponList[Engine.keys.WEAPON - 1], this.ammo[a].own &&
                (this.addTransmitStatus({
                    switchTo: Engine.keys.WEAPON - 1
                }), this.data.weapon = a)) : !Engine.keys.WEAPON && this.weaponSwitch && (this.weaponSwitch = !1);
        !1 !== Engine.keys.WHEEL && this.block && (Engine.keys.WHEEL = !1);
        if (!1 !== Engine.keys.WHEEL) {
            for (a = 0; a < this.weaponList.length; a++)
                if (this.weaponList[a] == this.data.weapon) {
                    var c = a;
                    break
                }
            for (; ; )
                if (a = c + Engine.keys.WHEEL, 0 > a && (a = 5), 5 < a && (a = 0), c = a, a = this.weaponList[a], this.ammo[a].own) {
                    a != this.data.weapon && (this.addTransmitStatus({
                        switchTo: c
                    }), this.data.weapon = a);
                    break
                }
            Engine.keys.WHEEL = !1
        }
        Engine.keys.SHOOT && !this.block && this.stamina ? (c = this.data.weapon, this.running && (this.running = !1, this.addTransmitStatus({
            run: 0
        })), 0 === this.ammo[c].ammo && "Melee" != c && (this.ammo[c].own = !1, this.data.weapon = "Melee", c = this.data.weapon, this.addTransmitStatus({
            switchTo: 0
        })), "Melee" === c ? this.slashing || this.dodge || (this.shoot = !0, Engine.now - this.lastShot >= this.delay.Melee && (this.lastShot = Engine.now, this.reduceSta(1.5 * this.staConsume.Melee), c = this.doAttack(this.getRotation()), this.addTransmitStatus({
            atk: 1,
            r: c
        }))) : Engine.now - this.lastShot >= this.delay[c] && (!this.dodge && 0 < this.ammo[c].cur) && (this.shoot = !0, this.lastShot = Engine.now, this.ammo[c].ammo--, this.reduceSta(1.5 * this.staConsume[c]), c = this.doShoot({
            rotation: this.getRotation()
        }), this.addTransmitStatus({
            atk: 2,
            r: c
        }))) : !Engine.keys.SHOOT && this.shoot ? (this.stopShoot(), this.addTransmitStatus({
            atk: 0
        })) : Engine.keys.SHOOT && (this.shoot && !this.stamina) && (this.stopShoot(), this.addTransmitStatus({
            atk: 0
        }));
        !Engine.keys.BLOCK || this.block || this.data.armor || this.data.invis ||
                !this.stamina || this.running ? !Engine.keys.BLOCK && this.block && "Melee" == this.data.weapon && (this.block = !1, this.data.block = !1, this.transmit.block = !1) : "Melee" == this.data.weapon && (Engine.keys.SHOOT && (Engine.keys.SHOOT = !1), this.block = !0, this.data.block = !0, this.transmit.block = !0)
    }
    this.handleTransmit()
};
Engine.Player.prototype.pickWeapon = function (a, b) {
    this.addTransmitStatus({
        switchTo: this.weaponList.indexOf(a)
    });
    this.data.weapon = a;
    this.ammo[a].ammo += b;
    this.ammo[a].own = !0;
    this.block && (this.block = !1, this.data.block = !1, this.transmit.block = !1)
};
Engine.Player.prototype.addTransmitStatus = function (a) {
    void 0 === this.transmit.status && (this.transmit.status = []);
    this.transmit.status.push(a)
};
Engine.Player.prototype.handleTransmit = function () {
    if (0 !== Object.size(this.transmit)) {
        var a = Date.now();
        Engine.socket.emit("update", this.transmit, a);
        for (var b in this.transmit)
            delete this.transmit[b]
    }
};
Engine.Player.prototype.getRotation = function () {
    var a = Engine.Assets.tileSize,
            a = Math.atan2(Engine.keys.MOUSEPOS.y / a + (this.camera.y - 5.75) - this.data.y, Engine.keys.MOUSEPOS.x / a + (this.camera.x - 10) - this.data.x),
            a = Math.round(1E3 * a) / 1E3;
    this.updateRotation(a);
    return a
};
Engine.Player.prototype.drawHUD = function (a) {
    this.updateHpCut(a);
    this.drawWeaponSelect();
    this.drawHUD_Background();
    this.drawHUD_Power();
    this.drawHUD_Weapon();
    this.drawHUD_Coins();
    this.drawHUD_Skills()
};
Engine.Player.prototype.drawHUD_Background = function () {
    var a, b, c, d, e, f, g, h, k, l, m;
    d = Engine.Assets.sprites.ui;
    var n = Engine.canvas.ctx;
    e = 4 * Engine.scale | 0;
    f = 4 * Engine.scale | 0;
    b = 128 * Engine.scale | 0;
    n.drawImage(d, e, f);
    e += 2 * Engine.scale | 0;
    e += 10 * Engine.scale;
    k = f + 10 * Engine.scale;
    0 < this.hpCut && (d = Math.round(100 * ((this.data.hp + this.hpCut) / this.data.hpMax)), c = Math.round(d / 100 * b), d = Engine.Assets.sprites.hp_bar, g = a = 0, c = c | 0 || 1, h = d.fh, l = c, m = h, n.save(), n.globalAlpha = 0.5, n.drawImage(d, a, g, c, h, e, k, l, m), n.restore());
    if (0 <
            this.data.hp) {
        a = Math.round(100 * (this.data.hp / this.data.hpMax));
        b = Math.round(a / 100 * b);
        d = Engine.Assets.sprites.hp_bar;
        g = 0;
        if (this.isHit || 20 >= a && 120 > Engine.now % 240)
            g = d.fh;
        c = b | 0;
        h = d.fh;
        n.drawImage(d, 0, g, c, h, e, k, c, h)
    }
    f += Math.ceil(12.5 * Engine.scale);
    e += 62 * Engine.scale | 0;
    Engine.text("visitor", this.data.hp + "/" + this.data.hpMax, e, f, !0)
};
Engine.Player.prototype.drawHUD_Power = function () {
    var a, b, c, d, e, f = Engine.Assets.sprites.super_bar,
            g = Engine.canvas.ctx;
    d = Math.ceil(17 * Engine.scale);
    e = Math.ceil(35 * Engine.scale);
    b = f.width;
    if (0 < this.data.power) {
        a = Math.round(100 * (this.data.power / this.data.powerMax));
        b = Math.round(a / 100 * b);
        a = 0;
        if (this.lastSuper > Engine.now - 150 || this.data.power == this.data.powerMax && 120 > Engine.now % 240)
            a = f.fh;
        b |= 0;
        c = f.fh;
        g.drawImage(f, 0, a, b, c, d, e, b, c)
    }
};
Engine.Player.prototype.drawHUD_Weapon = function () {
    if ("Melee" != this.data.weapon) {
        var a, b, c, d, e, f, g, h, k = Engine.canvas.ctx;
        g = 145 * Engine.scale | 0;
        h = 4 * Engine.scale | 0;
        a = Engine.Assets.sprites.items;
        c = this.data.weapon + "s";
        c = c.charAt(0).toLowerCase() + c.slice(1);
        b = Engine.Assets.data.sprites.items.item[c].sx * a.fw | 0;
        c = a.fw | 0;
        d = a.fh | 0;
        e = g + 4 * Engine.scale | 0;
        f = h + 4 * Engine.scale | 0;
        k.drawImage(a, b, 0, c, d, e, f, c, d);
        a = Engine.Assets.sprites.item_back;
        b = a.fh | 0;
        c = a.fw | 0;
        d = a.fh | 0;
        k.drawImage(a, 0, b, c, d, g, h, c, d);
        g += 47 * Engine.scale |
                0;
        h += 25 * Engine.scale | 0;
        Engine.text("semplice", this.ammo[this.data.weapon].ammo, g, h, !0)
    }
};
Engine.Player.prototype.drawHUD_Coins = function () {
    var a, b, c, d, e, f;
    a = this.data.coins;
    e = 42 * Engine.scale;
    f = 46 * Engine.scale;
    b = Engine.Assets.sprites.coin;
    c = 0.75 * b.fw;
    d = 0.75 * b.fh;
    Engine.canvas.ctx.drawImage(b, 0, 0, b.fw, b.fh, e, f, c, d);
    e += c + 2 * Engine.scale;
    f += d / 8;
    b = "visitor";
    250 >= Engine.now - this.coinGet && (b = "visitorLarge", f -= Engine.Assets.fonts.visitorLarge.fh / 8);
    Engine.text(b, a, e, f, !1)
};
Engine.Player.prototype.drawHUD_Skills = function () {
    var a = Engine.Assets.sprites.skills,
            b = Engine.Assets.data.sprites.skills.skill,
            c, d, e, f, g, h, k = Engine.canvas.ctx;
    d = c = 0;
    e = a.fw;
    f = a.fh;
    g = 4 * Engine.scale;
    h = 46 * Engine.scale;
    "war" == this.data.job ? c = b.armor.sx * e : "rog" == this.data.job ? c = b.trap.sx * e : "mag" == this.data.job && (c = b.invis.sx * e);
    this.skillAvailable["1"] || (d = f);
    k.drawImage(a, c, d, e, f, g, h, e, f)
};
Engine.Player.prototype.expLevel = function (a) {
    for (var b = {
        total: 0,
        next: 10 * a
    }, c = 1; c < a; c++)
        b.total += 10 * c | 0;
    return b
};
Engine.Player.prototype.drawExp = function () {
    var a = Engine.width,
            b = 4 * Engine.scale,
            c = Engine.height - b,
            d = Engine.canvas.ctx,
            e = Math.round(100 * ((this.data.exp - this.expLevel(this.data.level).total) / this.expLevel(this.data.level).next)),
            a = Math.round(e / 100 * a);
    d.fillStyle = "#f1cd01";
    d.fillRect(0, c, a, b)
};
Engine.Player.prototype.drawSkills = function () {
    var a = Engine.Assets.sprites.skills,
            b = Engine.Assets.data.sprites.skills.skill,
            c, d, e, f, g, h, k = Engine.canvas.ctx;
    d = c = 0;
    e = a.fw;
    f = a.fh;
    g = 2 * Engine.scale;
    h = 64 * Engine.scale;
    "war" == this.data.job ? c = b.armor.sx * e : "rog" == this.data.job ? c = b.trap.sx * e : "mag" == this.data.job && (c = b.invis.sx * e);
    this.skillAvailable["1"] || (d = f);
    k.drawImage(a, c, d, e, f, g, h, e, f)
};
Engine.Player.prototype.drawWeaponSelect = function () {
    var a = Engine.Assets.sprites.weaponselect,
            b = Engine.Assets.data.sprites.weaponselect,
            c, d, e, f, g, h, k = Engine.canvas.ctx;
    e = a.fw;
    f = a.fh;
    for (var l = 0; 6 > l; l++)
        h = Engine.height - f - 2 * Engine.scale, d = 2 * a.fh, c = this.data.weapon == b.weapons[l] ? a.fw : this.ammo[b.weapons[l]].own ? 2 * a.fw : 0, g = Engine.wH - 6 * a.fw / 2 + l * a.fw, k.drawImage(a, c | 0, d | 0, e - 2 * Engine.scale | 0, f | 0, g | 0, h | 0, e | 0, f | 0), d = 0, this.ammo[b.weapons[l]].own && (c = a.fw * l, g = Engine.wH - 6 * a.fw / 2 + l * a.fw, k.drawImage(a, c | 0, d | 0,
                e | 0, f | 0, g | 0, h | 0, e | 0, f | 0)), d = a.fh, c = a.fw * l, this.data.weapon != b.weapons[l] && (g += 2 * Engine.scale, h -= 2 * Engine.scale), k.drawImage(a, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, e | 0, f | 0), Engine.text("semplice", l + 1, g + 3 * Engine.scale, h + 24 * Engine.scale)
};
Engine.Player.prototype.drawHP = function () {
    var a, b, c, d, e, f, g, h, k, l = Engine.Assets.sprites.hp_back,
            m = Engine.canvas.ctx;
    e = 2 * Engine.scale | 0;
    f = 12 * Engine.scale | 0;
    b = 128 * Engine.scale | 0;
    m.drawImage(l, e, f);
    e += 2 * Engine.scale | 0;
    0 < this.hpCut && (d = Math.round(100 * ((this.data.hp + this.hpCut) / this.data.hpMax)), c = Math.round(d / 100 * b), l = Engine.Assets.sprites.hp_bar, d = a = 0, c = c | 0 || 1, g = l.fh, h = c, k = g, m.save(), m.globalAlpha = 0.5, m.drawImage(l, a, d, c, g, e, f, h, k), m.restore());
    if (0 < this.data.hp) {
        a = Math.round(100 * (this.data.hp / this.data.hpMax));
        b = Math.round(a / 100 * b);
        l = Engine.Assets.sprites.hp_bar;
        d = 0;
        c = b | 0;
        g = l.fh;
        if (this.isHit || 10 >= a && 120 > Engine.now % 240)
            d = g;
        m.drawImage(l, 0, d, c, g, e, f, c, g)
    }
    f += Math.ceil(2.5 * Engine.scale);
    e += l.fw / 2 | 0;
    Engine.text("visitor", this.data.hp + "/" + this.data.hpMax, e, f, !0)
};
Engine.Player.prototype.drawWeapon = function () {
    var a, b, c, d, e, f, g, h, k = Engine.canvas.ctx;
    g = 136 * Engine.scale | 0;
    h = 2 * Engine.scale | 0;
    a = Engine.Assets.sprites.item_back;
    c = a.fw;
    d = a.fh;
    k.drawImage(a, 0, 0, c, d, g, h, c, d);
    a = Engine.Assets.sprites.items;
    c = this.data.weapon + "s";
    c = c.charAt(0).toLowerCase() + c.slice(1);
    b = Engine.Assets.data.sprites.items.item[c].sx * a.fw | 0;
    c = a.fw | 0;
    d = a.fh | 0;
    e = g + 4 * Engine.scale | 0;
    f = h + 4 * Engine.scale | 0;
    k.drawImage(a, b, 0, c, d, e, f, c | 0, d | 0);
    "Melee" != this.data.weapon && (a = Engine.Assets.sprites.item_back,
            b = a.fh, c = a.fw, d = a.fh, k.drawImage(a, 0, b, c, d, g, h, c, d), g += 48 * Engine.scale | 0, h += 26 * Engine.scale | 0, Engine.text("miniset2", this.ammo[this.data.weapon].ammo, g, h, !0))
};
Engine.Player.prototype.drawKD = function () {
    Engine.text("visitor", this.data.kills + "-" + this.data.deaths, Engine.width - 64 * Engine.scale | 0, 4 * Engine.scale | 0, !1)
};
Engine.Player.prototype.drawCoins = function () {
    var a, b, c, d, e, f;
    a = this.data.coins;
    e = 6 * Engine.scale;
    f = 36 * Engine.scale;
    b = Engine.Assets.sprites.coin;
    c = 0.75 * b.fw;
    d = 0.75 * b.fh;
    Engine.canvas.ctx.drawImage(b, 0, 0, b.fw, b.fh, e, f, c, d);
    e += c + 2 * Engine.scale;
    f += d / 8;
    b = "visitor";
    250 >= Engine.now - this.coinGet && (b = "visitorLarge", f -= Engine.Assets.fonts.visitorLarge.fh / 8);
    Engine.text(b, a, e, f, !1)
};
Engine.Player.prototype.checkHealth = function () {
    10 >= Math.round(100 * (this.data.hp / this.data.hpMax)) ? (this.warning(this.data), 1 === this.initwarning && Engine.webaudio && (Engine.audio.buses.biquad.frequency.value = 500, this.initwarning = 2)) : 0 !== this.initwarning && 2 !== this.initwarning || !Engine.webaudio || (Engine.audio.buses.biquad.frequency.value = 22050, this.initwarning = 1)
};
Engine.Player.prototype.updateHpCut = function (a) {
    0 < this.hpCut && (this.hpCut -= 0.5 * a, 0 > this.hpCut && (this.hpCut = 0))
};
Engine.Player.prototype.warning = function (a) {
    var b, c, d, e, f, g, h, k, l = a.x + 0.5 | 0,
            m = a.y + 0.5 | 0,
            n = Engine.Assets.tilesets["0"].fw,
            p = Engine.canvas.ctx;
    h = a.x - l + 1.5;
    k = a.y - m + 0.5;
    for (c = 0; 13 > c; c++)
        for (g = c + m - 6, b = 0; 22 > b; b++)
            f = b + l - 11, d = (b - h) * n, e = (c - k) * n, d = ~~(d + 0.5) + (d >> 31), e = ~~(e + 0.5) + (e >> 31), f = Engine.lineDistance({
                x: a.x,
                y: a.y
            }, {
                x: f,
                y: g
            }), f = f / 20 * (f / (Engine.now % 1E3 / 75)), 0 < f && (p.fillStyle = "rgba(210, 0, 0, " + f + ")", p.fillRect(d, e, n | 0, n | 0))
};
Engine.Player.prototype.hit = function (a) {
    this.isHit && (a.data.x += (Math.random() - 0.5) / 4, a.data.y += (Math.random() - 0.5) / 4)
};
Engine.Player.prototype.shake = function (a) {
    if (this.isShake) {
        var b = Engine.rand(0, 20) - 10;
        a.data.x += b / 150;
        a.data.y += (10 - Math.abs(b)) / 150 * (0 > b ? -1 : 1)
    }
};
Engine.Spectator = function (a) {
    Engine.Spectator.prototype.uber.constructor.call(this, a);
    this.data.mod_speed = 0.05;
    this.light = this.collidable = !1;
    Engine.Spectator = this
};
Engine.Spectator.extend(Engine.Player);
Engine.Spectator.prototype.onTick = function (a) {};
Engine.Spectator.prototype.draw = function (a) {};
Engine.Spectator.prototype.handleTransmit = function () {
    for (var a in this.transmit)
        delete this.transmit[a]
};
Engine.Spectator.prototype.drawHUD = function (a) {};
Engine.Spectator.prototype.move = function (a, b) {
    var c = this.data.mod_speed;
    this.velX = this.data.mx;
    this.newPos.x = this.data.x + this.velX * c * a;
    this.velY = this.data.my;
    this.newPos.y = this.data.y + this.velY * c * a;
    this.newPos.x = Math.round(1E4 * this.newPos.x) / 1E4;
    this.newPos.y = Math.round(1E4 * this.newPos.y) / 1E4;
    this.newPos.x !== this.data.x && (this.data.x = this.newPos.x);
    this.newPos.y !== this.data.y && (this.data.y = this.newPos.y)
};
Engine.Npc = function (a) {
    Engine.Npc.prototype.uber.constructor.call(this, a);
    this.type = "npc";
    this.illuLighting = this.illuLight = null;
    this.light = "light_npc"
};
Engine.Npc.extend(Engine.EntityPlayer);
Engine.Npc.prototype.init = function () {
    switch (this.data.subtype) {
        case 1:
            this.sprites = {
                player: "skeleton",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 11:
            this.sprites = {
                player: "skeleton",
                hand_main: "weapon_sword1",
                hand_off: "shield_red",
                pointer: !1
            };
            break;
        case 12:
            this.sprites = {
                player: "skeleton",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 2:
            this.sprites = {
                player: "goblin",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 21:
            this.sprites = {
                player: "goblin",
                hand_main: "weapon_dagger1",
                hand_off: "shield_green",
                pointer: !1
            };
            break;
        case 22:
            this.sprites = {
                player: "goblin",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 3:
            this.sprites = {
                player: "slime",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 31:
            this.sprites = {
                player: "slime_green",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 32:
            this.sprites = {
                player: "slime_red",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 4:
            this.sprites = {
                player: "bat",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 5:
            this.sprites = {
                player: "thief",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 51:
            this.sprites = {
                player: "thief",
                hand_main: "weapon_dagger1",
                hand_off: "shield_green",
                pointer: !1
            };
            break;
        case 52:
            this.sprites = {
                player: "thief",
                hand_main: !1,
                hand_off: !1,
                pointer: !1
            };
            break;
        case 99:
            this.sprites = {
                player: "treasure",
                hand_main: !1,
                hand_off: !1,
                pointer: "pointer_treasure"
            }
    }
    this.initNameBuffer("#2b2b2b")
};
Engine.Npc.prototype.update = function (a, b) {
    -1 == this.data.alive ? this.leave() : (this.ticker(a), this.inAir && this.jump(), this.dodge && this.dodgeRoll(), this.data.invincible && (this.data.invincible -= Engine.deltaT, 0 >= this.data.invincible && (this.data.invincible = !1)), this.updateStatus(), this.move(a, b), this.getFaceDirection(), this.onTick(a))
};
Engine.Npc.prototype.draw = function (a, b, c, d) {
    if (1 == this.data.alive) {
        var e, f, g, h, k, l = Engine.Assets.sprites[this.sprites.player];
        h = l.fw;
        k = l.fh;
        e = this.coordToScreen(a, l);
        a = e.x;
        e = e.y - this.data.z;
        this.inViewPointer(h, k, a, e, h, k) || (c.fog || !this.sprites.pointer || this.pointerSet) || (this.pointerSet = !0, c = new Engine.FX.Pointer(this.data, this.sprites, this.drawPointer, this.nameBufferPointer), c.init(), Engine.Game.addObjectOverlay(c));
        if (this.inView(h, k, a, e, h, k)) {
            this.sprites.pointer && (this.pointerSet && this.inViewPointer(h,
                    k, a, e, h, k)) && (this.pointerSet = !1);
            c = 0;
            f = this.frame;
            var m = Engine.Assets.tileSize,
                    n = Engine.canvas.ctx;
            this.data.invis && (n.globalAlpha = d ? 0.5 : 0);
            d = this.getPhase(this.data.alive, this.data.mx, this.data.my);
            g = this.getOffset(this.sprites.player, d, f, l);
            0 != f % 2 || (0 == this.data.mx && 0 == this.data.my || this.inAir) || (c = 1 * Engine.scale);
            f = g.x;
            g = g.y;
            "hit" == d && (a += 5 * (Math.random() - 0.5), e += 5 * (Math.random() - 0.5));
            this.data.invincible && 2 > this.tick % 6 && (n.globalAlpha = 0);
            this.drawShadow(m, h, k, a, e, h, k);
            "N" == this.data.f && this.drawWeapons(a,
                    e, c, d);
            this.dodge ? (n.save(), n.translate(a + h / 2, e + k / 2), n.rotate(3.145 * this.vD * (-1 == this.data.mx ? -1 : 1)), n.drawImage(l, f, g, h, k, -(h / 2), -(k / 2), h, k), n.restore()) : n.drawImage(l, f | 0, g | 0, h | 0, k | 0, a | 0, e + c | 0, h, k | 0);
            "N" != this.data.f && this.drawWeapons(a, e, c, d);
            l.fw <= m && !this.inAir && this.drawGrass(b, a, e, h, k, c);
            this.data.block && this.drawBlocKBubble(a, e, h, k);
            this.data.armor && this.drawArmorBubble(a, e, h, k);
            this.drawName(a + h / 2, e, !1);
            99 !== this.data.subtype && this.drawHP(a, e, m);
            n.globalAlpha = 1
        }
    }
};
Engine._FX = function (a) {
    Engine._FX.prototype.uber.constructor.call(this, a);
    this.duration = 0;
    this.asset = null;
    this.animated = !1;
    this.offsetY = this.offsetX = this.timer = this.frames = this.frame = 0;
    this.opacity = 1;
    this.sy = this.sx = 0
};
Engine._FX.extend(Engine.Entity);
Engine._FX.prototype.init = function () {
    this.created = Engine.now;
    this.durationT = this.duration * Engine.frameStep | 0;
    this.asset && this.asset.fw < this.asset.width && (this.animated = !0, this.frames = this.asset.width / this.asset.fw | 0, this.animationTick = 0, this.timer = this.durationT / this.frames)
};
Engine._FX.prototype.update = function (a) {
    this.ticker(a);
    this.tickT >= this.durationT && (this.kill = !0);
    this.animated && (this.animationTick += Engine.deltaT, this.animationTick > this.timer && (this.animationTick = 0, this.frame++));
    this.onTick(a)
};
Engine._FX.prototype.onTick = function (a) {};
Engine._FX.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    d = this.sy;
    e = this.asset.fw | 0;
    f = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    a = b.x;
    b = b.y;
    a += this.offsetX ? this.offsetX : 0;
    b += this.offsetY ? this.offsetY : 0;
    this.inView(e, f, a, b, e, f) && (a |= 0, b |= 0, 1 != this.opacity ? (g.save(), g.globalAlpha = this.opacity, g.drawImage(this.asset, c, d, e, f, a, b, e, f), g.restore()) : g.drawImage(this.asset, c, d, e, f, a, b, e, f))
};
Engine.FX = {};
Engine.FX.Spark = function (a) {
    Engine.FX.Spark.prototype.uber.constructor.call(this);
    this.duration = Engine.rand(30, 200);
    this.data.x = Engine.rand(0, 1.125 * Engine.width);
    this.data.y = Engine.rand(0.125 * Engine.height, 1.125 * Engine.height);
    this.size = Engine.rand(8, 20) / 10 * Engine.scale;
    this.velX = Engine.rand(6, 16) / 20 * Engine.scale;
    this.velY = Engine.rand(6, 10) / 20 * Engine.scale;
    this.color = Engine.rand(75, 150);
    this.colorR = 2 * this.color | 0;
    this.colorG = this.color * (Engine.rand(10, 15) / 10) | 0;
    this.colorB = this.color;
    this.alpha = 0.01 *
            Engine.rand(30, 80);
    this.opacity = 0;
    this.w = 2 * this.size;
    this.h = 2 * this.size;
    this.bigger = !1
};
Engine.FX.Spark.extend(Engine._FX);
Engine.FX.Spark.prototype.onTick = function (a) {
    if (this.data.x < 0 - 10 * this.w || this.data.x > 2 * Engine.width || this.data.y < 0 - 10 * this.h || this.data.y > 2 * Engine.height)
        this.kill = !0;
    if (this.tickT < this.durationT / 5)
        this.opacity += 0.01 * a, this.opacity > this.alpha && (this.opacity = this.alpha);
    else if (this.tickT > this.durationT / 1.2 && (this.opacity -= 0.01 * a, 0 > this.opacity)) {
        this.opacity = 0;
        this.kill = !0;
        return
    }
    this.data.x -= this.velX * a;
    this.data.y -= this.velY * a
};
Engine.FX.Spark.prototype.drawLight = function (a, b, c) {
    var d = Engine.Assets.sprites.light_npc,
            e, f, g, h = Engine.canvas.ctx;
    e = d.fw;
    f = d.fh;
    g = e / 100 * c | 0;
    c = f / 100 * c | 0;
    h.globalAlpha = 0.15;
    h.drawImage(d, 0, 0, e, f, a - (g / 2 | 0), b - (c / 2 | 0), g, c);
    h.globalAlpha = 1
};
Engine.FX.Spark.prototype.draw = function () {
    var a, b, c, d, e = Engine.canvas.ctx;
    c = this.w | 0;
    d = this.h | 0;
    a = this.data.x | 0;
    b = this.data.y | 0;
    e.save();
    this.drawLight(a, b, 100 * this.opacity);
    e.fillStyle = "rgba(" + this.colorR + ", " + this.colorG + ", " + this.colorB + ", " + this.opacity + ")";
    e.fillRect(a, b, c, d);
    e.restore()
};
Engine.FX.Smoketrail = function (a, b) {
    Engine.FX.Smoketrail.prototype.uber.constructor.call(this);
    this.data.x = a.x - 0.25;
    this.data.y = a.y + 0.25;
    this.duration = 40;
    this.asset = Engine.Assets.sprites.smoketrail;
    this.velX = 0.01 * (Math.random() - 0.5);
    this.velY = -0.015 * Math.random();
    this.opacity = 1
};
Engine.FX.Smoketrail.extend(Engine._FX);
Engine.FX.Smoketrail.prototype.onTick = function (a) {
    this.data.x += this.velX * a;
    this.data.y += this.velY * a;
    this.tickT >= 0.5 * this.durationT && 0 < this.opacity && (this.opacity -= 0.04 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.FX.Smoketrail.prototype.draw = function (a) {
    var b, c, d, e, f, g, h = Engine.canvas.ctx;
    c = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    d = this.asset.fw | 0;
    e = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    f = d * this.opacity | 0;
    g = e * this.opacity | 0;
    a = b.x + (d - f / 2);
    b = b.y;
    this.inView(d, e, a, b, f, g) && h.drawImage(this.asset, c, 0, d, e, a | 0, b | 0, f, g)
};
Engine.FX.Fire = function (a, b) {
    Engine.FX.Fire.prototype.uber.constructor.call(this);
    this.data.x = a.x - 0.25;
    this.data.y = a.y + 0.25 + 0.5;
    this.duration = 30;
    this.asset = Engine.Assets.sprites.fire;
    this.sy = Engine.rand(0, 1) * this.asset.fh;
    this.velX = 0.01 * (Math.random() - 0.5);
    this.velY = -0.015 * Math.random();
    this.opacity = 1;
    this.offsetY = -16 * Engine.scale
};
Engine.FX.Fire.extend(Engine._FX);
Engine.FX.Fire.prototype.onTick = function (a) {
    this.data.x += this.velX * a;
    this.data.y += this.velY * a
};
Engine.FX.Fire.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.animated ? this.frame * this.asset.fw | 0 : 0;
    d = this.sy;
    e = this.asset.fw | 0;
    f = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    a = b.x + (e - e / 2);
    b = b.y;
    this.inView(e, f, a, b, e, f) && (a += this.offsetX ? this.offsetX : 0, b += this.offsetY ? this.offsetY : 0, g.drawImage(this.asset, c, d, e, f, a | 0, b | 0, e, f))
};
Engine.FX.Pointer = function (a, b, c, d) {
    Engine.FX.Pointer.prototype.uber.constructor.call(this, a);
    this.sprites = b;
    this.asset = Engine.Assets.sprites[this.sprites.player];
    this.drawPointer = c;
    this.nameBuffer = d
};
Engine.FX.Pointer.extend(Engine._FX);
Engine.FX.Pointer.prototype.update = function () {
    1 !== this.data.alive && (this.kill = !0)
};
Engine.FX.Pointer.prototype.draw = function (a) {
    if (!this.data.invis) {
        var b, c, d;
        b = this.asset;
        c = b.fw;
        d = b.fh;
        b = this.coordToScreen(a, b);
        a = b.x;
        b = b.y - this.data.z;
        this.inViewPointer(c, d, a, b, c, d) ? this.kill = !0 : this.drawPointer(c, d, a, b, c, d)
    }
};
Engine.FX.Thud = function (a, b) {
    Engine.FX.Thud.prototype.uber.constructor.call(this);
    this.data.x = a.x - 0.25;
    this.data.y = a.y + 0.25;
    this.duration = 40;
    this.asset = Engine.Assets.sprites.smoketrail;
    this.velX = 0.4 * (Math.random() - 0.5);
    this.velY = -0.015 * Math.random();
    this.opacity = 1;
    this.size = b || 1
};
Engine.FX.Thud.extend(Engine._FX);
Engine.FX.Thud.prototype.onTick = function (a) {
    this.velX *= 0.8;
    this.data.x += this.velX * a;
    this.data.y += this.velY * a;
    this.tickT >= 0.5 * this.durationT && 0 != this.opacity && (this.opacity -= 0.04 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.FX.Thud.prototype.draw = function (a) {
    var b, c, d, e, f, g, h = Engine.canvas.ctx;
    c = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    d = this.asset.fw | 0;
    e = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    f = d * this.opacity * this.size | 0;
    g = e * this.opacity * this.size | 0;
    a = b.x + (d - f / 2);
    b = b.y;
    b -= (this.size - 1) * this.asset.fh;
    this.inView(d, e, a, b, f, g) && h.drawImage(this.asset, c, 0, d, e, a | 0, b | 0, f, g)
};
Engine.FX.Explode2 = function (a, b) {
    Engine.FX.Explode2.prototype.uber.constructor.call(this);
    this.data.x = a.x - 0.25;
    this.data.y = a.y + 0.25;
    this.duration = 40;
    this.asset = Engine.Assets.sprites.explode2;
    this.velX = 0.4 * (Math.random() - 0.5);
    this.velY = -0.015 * Math.random();
    this.opacity = 1;
    this.size = b || 1
};
Engine.FX.Explode2.extend(Engine._FX);
Engine.FX.Explode2.prototype.onTick = function (a) {
    this.velX *= 0.8;
    this.data.x += this.velX * a;
    this.data.y += this.velY * a;
    this.tickT >= 0.5 * this.durationT && 0 != this.opacity && (this.opacity -= 0.04 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.FX.Explode2.prototype.draw = function (a) {
    var b, c, d, e, f, g, h = Engine.canvas.ctx;
    c = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    d = this.asset.fw | 0;
    e = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    f = d * this.opacity * this.size | 0;
    g = e * this.opacity * this.size | 0;
    a = b.x + (d - f / 2);
    b = b.y;
    b -= (this.size - 1) * this.asset.fh;
    this.inView(d, e, a, b, f, g) && h.drawImage(this.asset, c, 0, d, e, a | 0, b | 0, f, g)
};
Engine.FX.Explode3 = function (a, b) {
    Engine.FX.Explode3.prototype.uber.constructor.call(this);
    this.data.x = a.x;
    this.data.y = a.y;
    this.duration = 32;
    this.asset = Engine.Assets.sprites.explode3;
    this.opacity = 1;
    this.size = b || 1
};
Engine.FX.Explode3.extend(Engine._FX);
Engine.FX.Explode3.prototype.onTick = function (a) {};
Engine.FX.Explode3.prototype.draw = function (a) {
    var b, c, d, e, f, g, h = Engine.canvas.ctx;
    c = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    d = this.asset.fw | 0;
    e = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    f = d * this.size | 0;
    g = e * this.size | 0;
    a = b.x;
    b = b.y + g / 4;
    this.inView(d, e, a, b, f, g) && h.drawImage(this.asset, c, 0, d, e, a | 0, b | 0, f, g)
};
Engine.FX.Slash = function (a) {
    Engine.FX.Slash.prototype.uber.constructor.call(this, a);
    this.duration = 12;
    this.asset = Engine.Assets.sprites["slash_" + this.data.f];
    this.offsetY = 20 * Engine.scale;
    this.offsetX = 0;
    this.sy = Engine.rand(0, 1) * this.asset.fh
};
Engine.FX.Slash.extend(Engine._FX);
Engine.FX.Slash.prototype.onTick = function (a) {
    "E" == this.data.f ? this.offsetX += 1 * Engine.scale * a : "W" == this.data.f ? this.offsetX -= 1 * Engine.scale * a : "S" == this.data.f ? this.offsetY += 1 * Engine.scale * a : "N" == this.data.f && (this.offsetY -= 1 * Engine.scale * a)
};
Engine.FX.Slash.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.animated ? this.frame * this.asset.fw | 0 : 0;
    d = this.sy;
    e = this.asset.fw | 0;
    f = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    a = b.x;
    b = b.y;
    a += this.offsetX ? this.offsetX : 0;
    b += this.offsetY ? this.offsetY : 0;
    this.inView(e, f, a, b, e, f) && g.drawImage(this.asset, c, d, e, f, a | 0, b | 0, e, f)
};
Engine.FX.Item = function (a) {
    Engine.FX.Item.prototype.uber.constructor.call(this, a);
    this.duration = a.duration;
    this.asset = Engine.Assets.sprites.items;
    this.type = "item";
    this.type2 = a.type;
    this.id = a.id;
    this.data.z = 0;
    this.light = !1;
    this.offsetY = 6 * Engine.scale;
    "trap" == this.type2 && (this.offsetY = 16 * Engine.scale);
    this.collidable = this.helper = !1;
    this.tickLife = 0;
    this.floating = "coin" === this.type2 || "trap" === this.type2 ? !1 : !0
};
Engine.FX.Item.extend(Engine._FX);
Engine.FX.Item.prototype.init = function () {
    if ("coin" == this.type2)
        this.asset = Engine.Assets.sprites.item_coin, this.uber.init.call(this), this.timer = 3, this.frame = Engine.rand(0, 6);
    else {
        if ("trap" !== this.type2) {
            var a = new Engine.FX.PickupHint(this);
            a.init();
            Engine.Game.addObjectOverlay(a);
            this.helper = a
        }
        if (a = Engine.Assets.data.sprites.items.item[this.type2])
            this.frame = a.sx, this.light = a.light ? "light_npc" : !1
    }
};
Engine.FX.Item.prototype.remove = function () {
    this.kill = !0;
    this.helper && (this.helper.kill = !0)
};
Engine.FX.Item.prototype.update = function (a) {
    this.ticker(a);
    this.tickLife += a;
    this.tickLife >= this.duration && this.remove();
    this.animated && (this.animationTick += Engine.deltaT, this.animationTick > this.timer * Engine.frameStep && (this.animationTick = 0, this.frame++));
    this.onTick(a);
    "coin" === this.type2 && this.move(a);
    this.floating && (this.data.z += 0.09 * a)
};
Engine.FX.Item.prototype.onTick = function (a) {};
Engine.FX.Item.prototype.magnet = function (a) {
    var b, c = Engine.Game.getCollidableObjects(),
            d;
    for (b in c)
        if (d = c[b], "player" === d.data.type && (1 === d.data.alive && !d.inAir) && 1.4 > Engine.lineDistance(d.data, this.data)) {
            var e = !1,
                    f = !1;
            this.data.x > d.data.x ? (this.data.x -= 0.08 * a, this.data.x < d.data.x && (this.data.x = d.data.x)) : this.data.x < d.data.x ? (this.data.x += 0.08 * a, this.data.x > d.data.x && (this.data.x = d.data.x)) : e = !0;
            this.data.y > d.data.y ? (this.data.y -= 0.08 * a, this.data.y < d.data.y && (this.data.y = d.data.y)) : this.data.y <
                    d.data.y ? (this.data.y += 0.08 * a, this.data.y > d.data.y && (this.data.y = d.data.y)) : f = !0;
            e && f && (this.kill = !0)
        }
};
Engine.FX.Item.prototype.move = function (a) {
    "coin" === this.type2 && 500 < Engine.now - this.created && this.magnet(a);
    var b;
    b = {
        x: this.data.x + this.data.mx * this.data.vel * a,
        y: this.data.y + this.data.my * this.data.vel * a,
        cx: !1,
        cy: !1
    };
    Engine.Game.collision(this.data, b);
    (b.cx || b.cy) && this.collideWorld(b.cx, b.cy);
    b.x = Math.round(1E3 * b.x) / 1E3;
    b.y = Math.round(1E3 * b.y) / 1E3;
    b.x !== this.data.x && (this.data.x = b.x);
    b.y !== this.data.y && (this.data.y = b.y);
    this.data.vel -= 0.002 * a;
    0 > this.data.vel && (this.data.vel = 0);
    b.cx = !1;
    b.cy = !1
};
Engine.FX.Item.prototype.collide = function (a) {
    "player" === a.type && this.remove()
};
Engine.FX.Item.prototype.collideWorld = function (a, b) {
    a && (this.data.mx *= -1);
    b && (this.data.my *= -1);
    this.vel = 3 * (this.vel / 4)
};
Engine.FX.Item.prototype.drawLight = function (a) {
    var b = Engine.Assets.sprites[this.light],
            c = Engine.canvas.ctx,
            d = this.asset,
            e = this.coordToScreen(a, d),
            f;
    a = d.fw;
    d = d.fh;
    f = e.x;
    e = e.y;
    f += this.offsetX ? this.offsetX : 0;
    e += this.offsetY ? this.offsetY : 0;
    this.inView(a, d, f, e, a, d) && (f = f + (a - b.fw) / 2 | 0, e = e + (d - b.fh) / 2 | 0, c.save(), c.globalCompositeOperation = "lighter", c.drawImage(b, f, e), c.restore())
};
Engine.FX.Item.prototype.drawShadow = function (a, b, c, d, e, f, g) {
    a = Engine.Assets.sprites.shadow;
    d = d + (f - a.fw) / 2 | 0;
    e = e + g - a.fh / 2 | 0;
    Engine.canvas.ctx.drawImage(a, d, e)
};
Engine.FX.Item.prototype.draw = function (a) {
    var b, c, d, e, f;
    b = this.frames ? this.frame % this.frames * this.asset.fw | 0 : this.frame * this.asset.fw | 0;
    c = this.asset.fw | 0;
    d = this.asset.fh | 0;
    a = this.coordToScreen(a, this.asset);
    e = a.x;
    f = this.floating ? a.y + Math.sin(this.data.z) * 2 * Engine.scale - 3 * Engine.scale : a.y;
    e += this.offsetX ? this.offsetX : 0;
    f += this.offsetY ? this.offsetY : 0;
    this.inView(c, d, e, f, c, d) && (e |= 0, f |= 0, this.tickLife > 3 * (this.duration / 4) && 2 > this.tick % 6 || (this.floating && this.drawShadow(c, c, d, a.x, a.y, c, d), Engine.canvas.ctx.drawImage(this.asset,
            b, 0, c, d, e, f, c, d)))
};
Engine.FX.Pickup = function (a, b) {
    Engine.FX.Pickup.prototype.uber.constructor.call(this);
    this.odata = a;
    this.data = {
        x: this.odata.x,
        y: this.odata.y,
        z: this.odata.z
    };
    this.duration = 60;
    this.asset = Engine.Assets.sprites.items;
    this.sx = Engine.Assets.data.sprites.items.item[b].sx * this.asset.fw | 0;
    this.sy = 0;
    this.offsetY = 0.6 * this.asset.fh
};
Engine.FX.Pickup.extend(Engine._FX);
Engine.FX.Pickup.prototype.onTick = function (a) {
    this.data.x = this.odata.x;
    this.data.y = this.odata.y + 0.001;
    this.data.z = this.odata.z;
    this.offsetY += 0.5 * Engine.scale * a
};
Engine.FX.Pickup.prototype.draw = function (a) {
    var b, c, d, e, f, g, h, k = Engine.canvas.ctx;
    c = this.sx;
    d = this.sy;
    e = this.asset.fw | 0;
    f = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    g = 0.75 * e;
    h = 0.75 * f;
    a = b.x + 0.25 * e / 2;
    b = b.y - this.data.z;
    b -= this.offsetY ? this.offsetY : 0;
    a += this.offsetX ? this.offsetX : 0;
    this.inView(e, f, a, b, g, h) && (a |= 0, b |= 0, k.save(), k.globalAlpha = 1 - 100 / this.duration * this.tick / 100, k.drawImage(this.asset, c, d, e, f, a, b, g, h), k.restore())
};
Engine.FX.GameInfo = function (a) {
    Engine.FX.GameInfo.prototype.uber.constructor.call(this);
    this.msg = a;
    this.duration = 200;
    this.offsetY = 16 * Engine.scale + Engine.Game.getMessageLength();
    this.offsetY2 = 0;
    this.opacity = 1.8
};
Engine.FX.GameInfo.extend(Engine._FX);
Engine.FX.GameInfo.prototype.onTick = function (a) {
    this.tickT > this.durationT / 1.5 && 0 < this.opacity && (this.opacity -= 0.05 * a, 0 > this.opacity && (this.opacity = 0));
    0 == this.opacity && (this.kill = !0);
    this.offsetY2 -= 0.16 * Engine.scale * a
};
Engine.FX.GameInfo.prototype.draw = function (a) {
    var b, c = Engine.canvas.ctx;
    b = 64 * Engine.scale + this.offsetY + this.offsetY2;
    c.save();
    c.globalAlpha = this.opacity;
    a = Engine.wH - Engine.Assets.fonts.visitor.fw / 2;
    var d = 1 - 200 / this.duration * 4 * this.tick / 100,
            d = Math.max(0, d);
    Engine.text("visitor", this.msg, a, b, !0, d);
    c.restore()
};
Engine.FX.Damage = function (a, b, c) {
    Engine.FX.Damage.prototype.uber.constructor.call(this);
    this.data.x = a.x + 0.25;
    this.data.y = a.y - 0.2 * Math.random();
    this.oldY = a.y;
    this.duration = 60;
    this.asset = Engine.Assets.fonts[b];
    this.text = c;
    this.font = b;
    this.offsetY = -1.5;
    this.offsetYextra = 0.5;
    this.opacity = 1.5;
    this.velX = Math.random() - 0.5;
    this.velY = -1;
    this.floored = !1
};
Engine.FX.Damage.extend(Engine._FX);
Engine.FX.Damage.prototype.onTick = function (a) {
    this.offsetYextra *= 0.3 * (1.6 / a);
    this.opacity -= 0.024 * a;
    0 > this.opacity ? this.opacity = 0 : (this.data.x += 0.05 * this.velX, this.data.y < this.oldY + 1.75 && (this.velY += 0.1 * a, this.data.y += 0.05 * this.velY, this.data.y >= this.oldY + 1.75 && (this.data.y = this.oldY + 1.75, this.velX *= 0.5)))
};
Engine.FX.Damage.prototype.draw = function (a) {
    var b = Engine.canvas.ctx;
    a = this.coordToScreen(a, this.asset);
    a.y += (this.offsetY + this.offsetYextra) * Engine.Assets.tileSize;
    this.inView(Engine.Assets.tileSize, Engine.Assets.tileSize, a.x, a.y, void 0, void 0) && (b.save(), b.globalAlpha = this.opacity, Engine.text(this.font, this.text, a.x, a.y, !0), b.restore())
};
Engine.FX.Smoke = function (a) {
    Engine.FX.Smoke.prototype.uber.constructor.call(this);
    this.data.x = a.x;
    this.data.y = a.y;
    this.duration = Engine.rand(60, 70);
    this.size = Engine.rand(4, 8) * Engine.scale;
    this.vel = Engine.rand(10, 16) / 2E3;
    this.color = Engine.rand(50, 130);
    this.alpha = 1;
    this.opacity = 0;
    this.velT = Engine.rand(10, 30) / 100;
    this.h = this.w = this.size;
    this.bigger = !1;
    this.asset = Engine.Assets.sprites.explode2;
    this.set = Math.round(Math.random());
    this.offsetX = -0.25 * Engine.Assets.tileSize;
    this.offsetY = -0.25 * Engine.Assets.tileSize
};
Engine.FX.Smoke.extend(Engine._FX);
Engine.FX.Smoke.prototype.onTick = function (a) {
    this.tickT < 0.2 * this.durationT ? (this.opacity = 1 / (0.2 * this.durationT) * this.tickT, 1 < this.opacity && (this.opacity = 1)) : this.tickT > 0.6 * this.durationT && (this.opacity = -1 * (1 / (0.4 * this.durationT) * (this.tickT - 0.6 * this.durationT) - 1), 0 > this.opacity && (this.opacity = 0));
    this.data.x -= this.vel / 2 * a;
    this.data.y -= 2 * this.vel * a
};
Engine.FX.Smoke.prototype.draw = function (a) {
    var b, c, d, e = Engine.canvas.ctx;
    sx = this.animated ? this.frame % this.frames * this.asset.fw | 0 : 0;
    c = this.w | 0;
    d = this.h | 0;
    b = this.coordToScreen(a, this.asset);
    a = b.x + this.offsetX;
    b = b.y + this.offsetY;
    if (this.inView(c, d, a, b, c, d)) {
        var f = this.asset;
        c = 1.5 * f.fw * this.opacity | 0;
        d = 1.5 * f.fh * this.opacity | 0;
        a += f.fw - c / 2;
        b += f.fh - d / 2;
        e.drawImage(this.asset, sx, 0, f.fw, f.fh, a | 0, b | 0, c, d)
    }
};
Engine.FX.Explode = function (a) {
    Engine.FX.Explode.prototype.uber.constructor.call(this);
    this.data.x = a.x;
    this.data.y = a.y;
    this.duration = 120;
    this.asset = Engine.Assets.sprites.smoketrail;
    this.velX = 0.3 * (Math.random() - 0.5);
    this.velY = 0.2 * (Math.random() - 0.5);
    this.opacity = 1;
    this.size = 2
};
Engine.FX.Explode.extend(Engine._FX);
Engine.FX.Explode.prototype.onTick = function (a) {
    this.velX *= 0.88;
    this.velY *= 0.82;
    this.data.x += this.velX;
    this.data.y += this.velY;
    this.tickT >= this.durationT / 6 && 0 != this.opacity && (this.velY -= 0.002, this.opacity -= 0.02 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.FX.Explode.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.asset.fw | 0;
    d = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    e = c * this.opacity * this.size | 0;
    f = d * this.opacity * this.size | 0;
    a = b.x + (c - e / 2);
    b = b.y - d;
    this.inView(c, d, a, b, e, f) && 0 != this.opacity && (a |= 0, b |= 0, g.save(), g.globalAlpha = 1 < this.opacity ? 1 : this.opacity, g.drawImage(this.asset, 0, 0, c, d, a, b, e, f), g.restore())
};
Engine.FX.Trap = function (a) {
    Engine.FX.Trap.prototype.uber.constructor.call(this);
    this.data.x = a.x;
    this.data.y = a.y - 0.5;
    this.offsetY = 32 * Engine.scale;
    this.duration = 24;
    this.asset = Engine.Assets.sprites.trap
};
Engine.FX.Trap.extend(Engine._FX);
Engine.FX.AmbientParticle = function (a) {
    Engine.FX.AmbientParticle.prototype.uber.constructor.call(this);
    this.data.x = Engine.rand(a.x - 9, a.x + 9);
    this.data.y = Engine.rand(a.y - 7, a.y + 7);
    this.duration = Engine.rand(120, 200);
    this.size = Engine.rand(15, 25) / 10;
    this.velX = 2 * this.size / 10;
    this.velY = 2 * this.size / 10;
    this.dirX = 1 == Engine.rand(0, 1) ? 0.01 : -0.01;
    this.size *= Engine.scale;
    this.color = 220;
    this.alpha = 0.01 * Engine.rand(20, 30);
    this.opacity = 0;
    this.w = 2 * this.size | 0;
    this.h = 2 * this.size | 0;
    this.camera = a
};
Engine.FX.AmbientParticle.extend(Engine._FX);
Engine.FX.AmbientParticle.prototype.onTick = function (a) {
    this.tickT < this.durationT / 4 && this.opacity < this.alpha ? (this.opacity += 0.01 * a, this.opacity > this.alpha && (this.opacity = this.alpha)) : this.tickT > this.durationT / 1.2 && 0 <= this.opacity && (this.opacity -= 0.01 * a, 0 > this.opacity && (this.opacity = 0, this.kill = !0));
    this.data.x -= (this.camera.diffX / 2 + this.dirX) * this.velX * a;
    this.data.y -= (this.camera.diffY / 2 + 0.01) * this.velY * a
};
Engine.FX.AmbientParticle.prototype.drawLight = function (a, b, c) {
    var d = Engine.Assets.sprites.light_player,
            e, f, g, h = Engine.canvas.ctx;
    e = d.fw;
    f = d.fh;
    g = e / 100 * c | 0;
    c = f / 100 * c | 0;
    a -= g / 2 | 0;
    b -= c / 2 | 0;
    var k = Math.min(2 * this.opacity, 1),
            k = Math.round(100 * k) / 100;
    h.globalAlpha = k;
    h.drawImage(d, 0, 0, e, f, a, b, g, c)
};
Engine.FX.AmbientParticle.prototype.draw = function (a) {
    var b, c, d, e;
    b = Engine.Assets.tilesets["0"];
    var f = Engine.canvas.ctx;
    c = this.w;
    d = this.h;
    b = this.coordToScreen(a, b);
    a = b.x;
    b = b.y;
    this.inView(4 * c, 4 * d, a, b, c, d) ? (e = this.color, f.save(), f.globalCompositeOperation = "lighter", Engine.particles && this.drawLight(a, b, 50), f.globalAlpha = this.opacity, f.fillStyle = "rgb(" + e + ", " + e + ", " + e + ")", f.fillRect(a, b, c, d), f.restore()) : this.kill = !0
};
Engine.FX.Aggro = function (a) {
    Engine.FX.Aggro.prototype.uber.constructor.call(this);
    this.dat = a;
    this.data.x = a.x;
    this.data.y = a.y;
    this.duration = 90;
    this.asset = Engine.Assets.sprites.aggro;
    this.offsetY = 1.5 * -this.asset.fh
};
Engine.FX.Aggro.extend(Engine._FX);
Engine.FX.Aggro.prototype.onTick = function (a) {
    this.data.y = this.dat.y + 0.01;
    this.data.x = this.dat.x
};
Engine.FX.Aggro.prototype.init = function () {
    this.uber.init.call(this);
    this.timer = 2
};
Engine.FX.Aggro.prototype.update = function (a) {
    this.ticker(a);
    if (this.tickT >= this.durationT || 1 !== this.dat.alive)
        this.kill = !0;
    this.animated && this.frame < this.frames - 1 && 0 == this.tick % this.timer && this.frame++;
    this.onTick(a)
};
Engine.FX.Collect = function (a) {
    Engine.FX.Collect.prototype.uber.constructor.call(this);
    this.data.x = a.x;
    this.data.y = a.y;
    this.duration = 200;
    this.asset = Engine.Assets.sprites.collect;
    this.size = 100;
    this.r = 0;
    this.offsetX = -this.asset.fw / 2;
    this.offsetY = -this.asset.fh / 3
};
Engine.FX.Collect.extend(Engine._FX);
Engine.FX.Collect.prototype.onTick = function (a) {
    this.size -= 3 * a;
    0 >= this.size && (this.kill = !0);
    this.r += 0.2 * a
};
Engine.FX.Collect.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.asset.fw | 0;
    d = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    e = c * this.size / 100;
    f = d * this.size / 100;
    a = b.x + (c - e / 2);
    b = b.y + (d - f / 2);
    a += this.offsetX ? this.offsetX : 0;
    b += this.offsetY ? this.offsetY : 0;
    if (this.inView(c, d, a, b, e, f)) {
        a |= 0;
        b |= 0;
        g.save();
        var h = e / 2 | 0,
                k = f / 2 | 0;
        g.translate(a + h, b + k);
        g.rotate(this.r);
        g.drawImage(this.asset, 0, 0, c, d, -h, -k, e, f);
        g.restore()
    }
};
Engine.FX.PickupHint = function (a) {
    Engine.FX.PickupHint.prototype.uber.constructor.call(this);
    this.data.x = a.data.x;
    this.data.y = a.data.y + 0.5;
    this.asset = Engine.Assets.sprites.pickup
};
Engine.FX.PickupHint.extend(Engine._FX);
Engine.FX.PickupHint.prototype.init = function () {
    this.uber.init.call(this);
    this.timer = 20
};
Engine.FX.PickupHint.prototype.update = function (a) {
    this.ticker(a);
    this.animated && 0 == this.tick % this.timer && this.frame++;
    this.onTick(a)
};
Engine.FX.Buff = function (a, b, c) {
    Engine.FX.Buff.prototype.uber.constructor.call(this);
    this.parent = a;
    this.data.x = a.data.x;
    this.data.y = a.data.y;
    this.duration = 600;
    this.asset = Engine.Assets.sprites.buffs;
    this.deg = b * (Engine.math.PI / 180) || 0;
    this.speed = 0.04;
    this.rad = 0.7;
    this.offsetY = 0;
    this.opacity = c || 1
};
Engine.FX.Buff.extend(Engine._FX);
Engine.FX.Buff.prototype.update = function (a) {
    this.ticker(a);
    if (this.tickT >= this.durationT || 1 !== this.parent.data.alive)
        this.kill = !0;
    this.onTick(a)
};
Engine.FX.Buff.prototype.onTick = function (a) {
    this.data.x = this.parent.data.x;
    this.data.y = this.parent.data.y + this.offsetY;
    this.deg += this.speed / this.rad;
    this.data.x += this.rad * Math.cos(this.deg);
    this.data.y += 0.5 * this.rad * Math.sin(this.deg);
    1 > this.opacity && (this.opacity += 0.05 * a, 1 < this.opacity && (opacity = 1))
};
Engine.FX.Buff.prototype.draw = function (a) {
    var b, c, d, e = Engine.canvas.ctx;
    c = this.asset.fw;
    d = this.asset.fh;
    b = this.coordToScreen(a, this.asset);
    a = b.x;
    b = b.y - this.parent.data.z;
    e.save();
    e.globalCompositeOperation = "lighter";
    e.globalAlpha = this.tickT > 3 * (this.durationT / 4) && 60 > Engine.now % 120 ? 0 : 0.8;
    e.drawImage(this.asset, 0, 0, c, d, a, b, c, d);
    e.restore()
};
Engine.FX.LevelUp = function (a) {
    Engine.FX.LevelUp.prototype.uber.constructor.call(this);
    this.odata = a;
    this.data = {
        x: this.odata.x,
        y: this.odata.y,
        z: this.odata.z
    };
    this.duration = 100;
    this.asset = Engine.Assets.sprites.levelup;
    this.offsetY = 0;
    this.opacity = 1
};
Engine.FX.LevelUp.extend(Engine._FX);
Engine.FX.LevelUp.prototype.onTick = function (a) {
    this.offsetY += 0.002 * Engine.scale * a;
    this.data.x = this.odata.x;
    this.data.y = this.odata.y - 0.8 - this.offsetY;
    this.data.z = this.odata.z;
    this.tickT > 2 * (this.durationT / 3) && 0 < this.opacity && (this.opacity -= 0.05 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.FX.LevelUp.prototype.draw = function (a) {
    var b, c, d, e, f, g = Engine.canvas.ctx;
    c = this.asset.fw | 0;
    d = this.asset.fh | 0;
    b = this.coordToScreen(a, this.asset);
    e = 0.75 * c;
    f = 0.75 * d;
    a = b.x + 0.25 * c / 2;
    b = b.y - this.data.z;
    this.inView(c, d, a, b, e, f) && (a |= 0, b |= 0, g.save(), g.globalAlpha = this.opacity, g.drawImage(this.asset, 0, 0, c, d, a, b, e, f), g.restore())
};
Engine.Map = function (a) {
    this.data = a.data;
    this.tileset = a.tileset;
    this.width = a.data[0][0].length;
    this.height = a.data[0].length;
    this.los = a.los;
    this.asset = Engine.Assets.tilesets[this.tileset];
    this.tilesetData = Engine.Assets.data.tilesets[this.tileset];
    this.lightTick = 0;
    this.objects = [];
    this.lastComputeDark = this.lastCompute = 0;
    this.gameObjects = null;
    this.lightObjects = [];
    this.offset_tick_speed = this.offset_tick = this.fireTick = this.tickT = this.tick = this.lastTick = 0;
    this.shadow = {
        x: 0,
        y: 0
    };
    this.dayLightMod = 0;
    this.hashmap = {};
    this.assetComposed = null
};
Engine.Map.prototype.init = function () {
    var a = {
        tiles: [],
        animated: []
    },
            b = [],
            c, d = Engine.Assets.tileSize,
            e = this.tilesetData,
            f, g = 0,
            h = -1;
    this.getUniqueTiles(a, [Engine.Game.layers.ground, Engine.Game.layers.ground2]);
    this.getUniqueTiles(a, [Engine.Game.layers.objects]);
    this.getUniqueTiles(a, [Engine.Game.layers.overlay]);
    b = a.tiles.filter(function (b, c) {
        return a.tiles.indexOf(b) == c
    });
    c = a.animated.filter(function (b, c) {
        return a.animated.indexOf(b) == c
    }).length;
    f = Math.ceil((b.length + c) / 10);
    c = document.createElement("canvas");
    c.ctx = c.getContext("2d");
    c.width = 10 * d;
    c.height = d * f;
    this.assetComposed = c;
    Engine.disableSmoothing(c);
    for (var k = 0, l = 0; l < b.length; l++) {
        g++;
        0 == k % 10 && (h++, g = 0);
        for (var m = b[l].split("_"), n = f = 0; n < m.length; n++) {
            var p = m[n],
                    r, q, s, v, x, y, A, z;
            s = v = A = z = d;
            r = p % 15 * d;
            q = (p / 15 | 0) * d;
            x = g * d;
            y = h * d;
            c.ctx.drawImage(this.asset.dayTime, r, q, s, v, x, y, A, z);
            !f && e.animated[p] && (f = e.animated[p].speed)
        }
        this.hashmap[b[l]] = {
            x: g * d | 0,
            y: h * d | 0,
            animated: f,
            frames: []
        };
        if (f) {
            g++;
            k++;
            0 == k % 10 && (h++, g = 0);
            for (n = 0; n < m.length; n++)
                p = m[n], r = p % 15 * d, q = (p /
                        15 | 0) * d, x = g * d, y = h * d, e.animated[p] ? c.ctx.drawImage(this.asset.dayTime, r + d, q, s, v, x, y, A, z) : c.ctx.drawImage(this.asset.dayTime, r, q, s, v, x, y, A, z);
            this.hashmap[b[l]].frames.push({
                x: g * d | 0,
                y: h * d | 0
            })
        }
        k++
    }
};
Engine.Map.prototype.getUniqueTiles = function (a, b) {
    var c, d, e = [],
            f, g = this.tilesetData;
    for (d = 0; d < this.height; d++)
        for (c = 0; c < this.width; c++) {
            var h = 0;
            for (f = 0; f < b.length; f++) {
                var k = this.data[b[f]][d][c];
                -1 != k && e.push(k);
                !h && g.animated[k] && (h = g.animated[k].speed)
            }
            0 < e.length && (f = e.join("_"), a.tiles.push(f), h && a.animated.push(f + "_animated"), e.length = 0)
        }
};
Engine.Map.prototype.updateOptions = function (a) {
    var b;
    switch (a.dayTime) {
        case 0:
            b = 20;
            break;
        case 1:
            b = 12;
            break;
        case 2:
            b = 4;
            break;
        case 3:
            b = 4;
            break;
        case 4:
            b = 4;
            break;
        case 5:
            b = 20
    }
    this.dayLightMod = b
};
Engine.Map.prototype.update = function (a, b, c) {
    this.ticker(a);
    this.onTick(a, b);
    c.shades && this.drawOverlayFXUpdate(b)
};
Engine.Map.prototype.ticker = function (a) {
    this.lastTick = this.tick;
    this.tick++;
    this.tickT += Engine.deltaT;
    60 == this.tick && (this.tick = 0)
};
Engine.Map.prototype.onTick = function (a, b) {
    this.lightTick += a;
    20 <= this.lightTick && (this.lightTick = 0);
    this.offset_timeline = Engine.timeline;
    this.offset_tick = Engine.timeline % 60;
    this.offset_tick_speed = Engine.timeline % 20;
    this.fireTick += Engine.deltaT;
    100 <= this.fireTick && (this.fireTick = 0, this.createFire(b))
};
Engine.Map.prototype.collision = function (a, b, c) {
    c = c || Engine.Game.layers.collision;
    c = this.data[c];
    if (0 > b.x || b.x >= c[0].length - 1)
        b.x = a.x;
    if (0 > b.y || b.y >= c.length - 1)
        b.y = a.y;
    if (b.y !== a.y || b.x !== a.x) {
        try {
            if (1 == c[Math.ceil(b.y - 0.3)][Math.ceil(a.x)] || 1 == c[Math.ceil(b.y - 0.3)][Math.floor(a.x)]) {
                var d = Math.ceil(b.y - 0.3),
                        e = d - b.y - 0.7;
                b.y += e;
                b.cy = !0
            } else if (1 == c[Math.floor(b.y)][Math.ceil(a.x)] || 1 == c[Math.floor(b.y)][Math.floor(a.x)])
                d = Math.floor(b.y), e = b.y - d, b.y += 1 - e, b.cy = !0
        } catch (f) {
            b.y = a.y
        }
        try {
            if (1 == c[Math.ceil(b.y -
                    0.3)][Math.ceil(b.x)] || 1 == c[Math.floor(b.y)][Math.ceil(b.x)])
                d = Math.ceil(b.x - 1), e = d - b.x, b.x += e, b.cx = !0;
            else if (1 == c[Math.ceil(b.y - 0.3)][Math.floor(b.x)] || 1 == c[Math.floor(b.y)][Math.floor(b.x)])
                d = Math.floor(b.x), e = b.x - d, b.x += 1 - e, b.cx = !0
        } catch (g) {
            b.x = a.x
        }
    }
};
Engine.Map.prototype.checkLOS = function (a, b, c, d) {
    for (var e = Math.abs(c - a), f = Math.abs(d - b), g = a < c ? 1 : -1, h = b < d ? 1 : -1, k = e - f, l = this.data[Engine.Game.layers.collision]; a !== c || b !== d; ) {
        if (!l[b] || 1 == l[b][a])
            return !1;
        var m = 2 * k;
        m > 0 - f && (k -= f, a += g);
        m < e && (k += e, b += h)
    }
    return !0
};
Engine.Map.prototype.draw = function (a, b, c) {
    c = Engine.Assets.tileSize;
    var d, e, f, g, h, k, l, m, n, p = b.x + 0.5 | 0,
            r = b.y + 0.5 | 0,
            q = Engine.canvas.ctx;
    m = b.x - p + 0.5;
    n = b.y - r + 0.5;
    var s = [],
            v = a.length,
            x = this.hashmap;
    for (e = 13; e--; )
        if (l = e + r - 6, !(0 > l || l > this.height - 1))
            for (b = 21; b--; )
                if (f = b + p - 10, !(0 > f || f > this.width - 1)) {
                    if (1 < v) {
                        for (g = 0; g < v; g++)
                            d = a[g], dataLayer = this.data[d], d = dataLayer[l][f], -1 !== d && s.push(d);
                        if (0 < s.length)
                            d = s.join("_"), d = x[d], s.length = 0;
                        else
                            continue
                    } else {
                        d = a[0];
                        dataLayer = this.data[d];
                        d = dataLayer[l][f];
                        if (-1 ===
                                d)
                            continue;
                        d = x[d]
                    }
                    f = d.x;
                    g = d.y;
                    h = (b - m) * c;
                    k = (e - n) * c;
                    h = ~~(h + 0.5) + (h >> 31);
                    k = ~~(k + 0.5) + (k >> 31);
                    d.animated && this.offset_timeline % (2 * d.animated) >= d.animated && (f = d.frames[0].x, g = d.frames[0].y);
                    q.drawImage(this.assetComposed, f, g, c, c, h, k, c, c)
                }
};
Engine.Map.prototype.drawLights = function (a) {
    var b = Engine.Assets.tileSize,
            c = Engine.Assets.sprites.light_torch,
            d, e, f, g, h, k, l = a.x + 0.5 | 0,
            m = a.y + 0.5 | 0,
            n = Engine.canvas.ctx;
    n.save();
    n.globalCompositeOperation = "lighter";
    10 > this.lightTick % 20 && (n.globalAlpha = 0.9);
    h = a.x - l + 0.5;
    k = a.y - m + 0.5;
    var p = this.data[Engine.Game.layers.objects];
    for (e = 0; 16 > e; e++)
        if (g = e + m - 8, !(0 > g || g > this.height - 1))
            for (a = 0; 23 > a; a++)
                (d = a + l - 11, 0 > d || d > this.width - 1 || (d = p[g][d], 32 != d && 43 != d && 44 != d && 58 != d && 59 != d && 60 != d)) || (f = (a - h - 1) * b, d = (e - k - 2) * b,
                        f = ~~(f + 0.5) + (f >> 31), d = ~~(d + 0.5) + (d >> 31), f += (b - c.fw) / 2, d -= c.fh / 2.5, f += (Math.random() - 0.5) * Engine.scale, d += (Math.random() - 0.5) * Engine.scale, n.drawImage(c, f | 0, d | 0));
    n.restore()
};
Engine.Map.prototype.createFire = function (a) {
    var b, c, d, e, f, g, h, k = a.x + 0.5 | 0,
            l = a.y + 0.5 | 0;
    f = a.x - k + 0.5;
    g = a.y - l + 0.5;
    var m = this.data[Engine.Game.layers.objects];
    for (d = 0; 16 > d; d++)
        if (e = d + l - 8, !(0 > e || e > this.height - 1))
            for (c = 0; 21 > c; c++)
                (b = c + k - 10, 0 > b || b > this.width - 1 || (b = m[e][b], 32 == b && (h = new Engine.FX.Fire({
                    x: a.x + c - f - 9.45,
                    y: a.y + d - g - 7.55
                }), h.init(), Engine.Game.addObject(h)), 43 != b && 44 != b && 58 != b && 59 != b)) || (h = new Engine.FX.Fire({
                    x: a.x + c - f - 9.45,
                    y: a.y + d - g - 7.8
                }), h.init(), Engine.Game.addObject(h))
};
Engine.Map.prototype.fog = function (a, b) {
    var c = this.asset.fw,
            d, e, f, g, h, k, l, m, n, p, r = a.x + 0.5 | 0,
            q = a.y + 0.5 | 0,
            s = Engine.canvas.ctx,
            v = {
                x: b.x,
                y: b.y
            },
            x = {
                x: 0,
                y: 0
            };
    l = a.x - r + 0.5;
    m = a.y - q + 0.5;
    s.save();
    s.fillStyle = "rgb(0, 0, 15)";
    for (e = 0; 13 > e; e++)
        for (k = e + q - 6, d = 0; 21 > d; d++)
            h = d + r - 10, f = (d - l) * c, g = (e - m) * c, f = ~~(f + 0.5) + (f >> 31), g = ~~(g + 0.5) + (g >> 31), x.x = h, x.y = k, n = Engine.lineDistance(v, x), n = n / 9 * (n / 4), 0 > n && (n = 0), this.los && (this.checkLOS(Math.ceil(b.x - 0.2), Math.ceil(b.y - 0.5), h, k) || (this.checkLOS(Math.floor(b.x + 0.2), Math.ceil(b.y -
                    0.5), h, k) || this.checkLOS(Math.ceil(b.x - 0.2), Math.ceil(b.y - 0.5), h, k) || this.checkLOS(Math.floor(b.x + 0.2), Math.ceil(b.y - 0.5), h, k)) || (n += 1)), 1 < n && (n = 1), n !== p && (p = s.globalAlpha = n), 0 < n && s.fillRect(f, g, c | 0, c | 0);
    s.restore()
};
Engine.Map.prototype.light = function (a, b) {
    var c = this.asset.fw,
            d, e, f, g, h, k, l, m, n, p = this.dayLightMod,
            r = this.data[Engine.Game.layers.ground],
            q = a.x + 0.5 | 0,
            s = a.y + 0.5 | 0,
            v = Engine.canvas.ctx,
            x = {
                x: a.x,
                y: a.y
            },
            y = {
                x: 0,
                y: 0
            };
    l = a.x - q + 0.5;
    m = a.y - s + 0.5;
    v.save();
    v.fillStyle = "rgb(30, 00, 45)";
    for (e = 0; 13 > e; e++)
        if (k = e + s - 6, void 0 !== r[k])
            for (d = 0; 21 > d; d++)
                h = d + q - 10, f = (d - l) * c, g = (e - m) * c, f = ~~(f + 0.5) + (f >> 31), g = ~~(g + 0.5) + (g >> 31), y.x = h, y.y = k, h = 0.8 * Engine.lineDistance(x, y), h = h / 20 * (h / p), 1 < h && (h = 1), 0.05 > h || (h !== n && (n = v.globalAlpha = h),
                        v.fillRect(f, g, c, c));
    v.restore()
};
Engine.Map.prototype.drawOverlayFXUpdate = function (a) {
    this.shadow.x -= 4.5 * a.diffX;
    this.shadow.y -= 4.5 * a.diffY;
    this.shadow.x %= Engine.width;
    this.shadow.y %= Engine.height
};
Engine.Map.prototype.drawOverlayFXDraw = function (a) {
    a = Engine.canvas.ctx;
    var b = Engine.Assets.sprites.shadow_forest,
            c, d;
    c = this.shadow.x | 0;
    d = this.shadow.y | 0;
    a.drawImage(b, c, d);
    c + b.width < Engine.width ? a.drawImage(b, c + b.width, d) : c + b.width > Engine.width && a.drawImage(b, c - b.width, d);
    d + b.height < Engine.height ? (a.drawImage(b, c, d + b.height), c + b.width < Engine.width ? a.drawImage(b, c + b.width, d + b.height) : c + b.width > Engine.width && a.drawImage(b, c - b.width, d + b.height)) : d + b.height > Engine.height && (a.drawImage(b, c, d - b.height),
            c + b.width < Engine.width ? a.drawImage(b, c + b.width, d - b.height) : c + b.width > Engine.width && a.drawImage(b, c - b.width, d - b.height))
};
Engine.Camera = function (a) {
    Engine.Camera.prototype.uber.constructor.call(this);
    this.data = {
        x: a.width / 2,
        y: a.height / 2,
        diffX: 0,
        diffY: 0,
        zoom: 0
    };
    this.targ = null;
    this.velY = this.velX = 0;
    this.vel = 0.5;
    this.map = a;
    this.targetID = 0
};
Engine.Camera.extend(Engine.Entity);
Engine.Camera.prototype.init = function (a) {
    null == this.targ && (this.data.x = a.data.x, this.data.y = a.data.y, this.bindToMap());
    this.targ = a.data
};
Engine.Camera.prototype.bindToMap = function () {
    this.data.x + 10.5 > this.map.width ? (this.data.x = this.map.width - 10.5, this.data.diffX = 0) : 0 > this.data.x - 9.5 && (this.data.x = 9.5, this.data.diffX = 0);
    this.data.y + 5.75 > this.map.height ? (this.data.y = this.map.height - 5.75, this.data.diffY = 0) : 0 > this.data.y - 5.75 && (this.data.y = 5.75, this.data.diffY = 0)
};
Engine.Camera.prototype.update = function (a) {
    this.move(a)
};
Engine.Camera.prototype.addZoom = function (a) {
    this.data.zoom += a;
    0.5 < this.data.zoom && (this.data.zoom = 0.5)
};
Engine.Camera.prototype.move = function (a) {
    var b = Engine.Assets.tileSize,
            c = Engine.keys.MOUSEPOS.x / b - 10,
            b = Engine.keys.MOUSEPOS.y / b - 6,
            c = this.targ.x + 0.3 * c - this.data.x,
            b = this.targ.y + 0.4 * b - this.data.y,
            c = Math.round(1E3 * c) / 1E4,
            b = Math.round(1E3 * b) / 1E4;
    0.001 >= Math.abs(c) && (c = 0);
    0.001 >= Math.abs(b) && (b = 0);
    this.data.diffX = c;
    this.data.diffY = b;
    0.001 < Math.abs(c) && (this.data.x += c * this.vel * a);
    0.001 < Math.abs(b) && (this.data.y += b * this.vel * a);
    this.bindToMap()
};
Engine.Projectile = function (a) {
    Engine.Projectile.prototype.uber.constructor.call(this);
    this.type = "projectile";
    this.owner = a;
    this.data = {
        x: a.x,
        y: a.y,
        f: a.f,
        mx: 0,
        my: 0,
        r: 0
    };
    this.newPos = {
        x: 0,
        y: 0,
        cx: !1,
        cy: !1
    };
    this.duration = 0;
    this.asset = null;
    this.vel = this.frame = 0;
    this.light = this.animated = !1;
    this.frametick = 0;
    this.opacity = 1;
    this.collidable = !0;
    this.canHurtSelf = !1;
    this.collisionPush = !0
};
Engine.Projectile.extend(Engine.Entity);
Engine.Projectile.prototype.init = function (a) {
    this.initClick(a);
    this.initAnim()
};
Engine.Projectile.prototype.initAnim = function () {
    this.asset.fw < this.asset.width && (this.animated = !0, this.frames = this.asset.width / this.asset.fw | 0, this.timer = this.duration / this.frames | 0)
};
Engine.Projectile.prototype.initClick = function (a) {
    this.data.r = a;
    this.data.mx = Math.cos(a);
    this.data.my = Math.sin(a)
};
Engine.Projectile.prototype.update = function (a, b) {
    this.tick += a;
    this.tick > this.duration && this.die(a);
    this.animated && (this.frametick += a, this.frametick >= this.timer && (this.frametick = 0, this.frame++));
    this.onTick(a);
    this.move(a, b)
};
Engine.Projectile.prototype.onTick = function (a) {};
Engine.Projectile.prototype.die = function () {};
Engine.Projectile.prototype.onTick = function (a) {};
Engine.Projectile.prototype.move = function (a, b) {
    this.newPos.x = this.data.x + this.data.mx * this.vel * a;
    this.newPos.y = this.data.y + this.data.my * this.vel * a;
    Engine.Game.collision(this.data, this.newPos, Engine.Game.layers.collision2);
    this.collidable && (this.newPos.cx || this.newPos.cy) && this.collideWorld(this.newPos.cx, this.newPos.cy);
    this.collidable && this.collisionObjects(this.newPos);
    this.newPos.x = Math.round(1E4 * this.newPos.x) / 1E4;
    this.newPos.y = Math.round(1E4 * this.newPos.y) / 1E4;
    this.newPos.x !== this.data.x && (this.data.x =
            this.newPos.x);
    this.newPos.y !== this.data.y && (this.data.y = this.newPos.y);
    this.newPos.cx = !1;
    this.newPos.cy = !1
};
Engine.Projectile.prototype.reflect = function () {
    this.data.mx *= -1;
    this.data.my *= -1;
    var a = 180 * (this.data.r / Engine.math.PI);
    this.data.r = (a + 180) * Engine.math.PI / 180
};
Engine.Projectile.prototype.drawLight = function (a) {
    var b = Engine.Assets.sprites[this.light],
            c = Engine.canvas.ctx,
            d = this.asset,
            e = this.coordToScreen(a, d),
            f;
    a = d.fw;
    d = d.fh;
    f = e.x;
    e = e.y;
    f += this.offsetX ? this.offsetX : 0;
    e += this.offsetY ? this.offsetY : 0;
    this.inView(a, d, f, e, a, d) && (f = f + (a - b.fw) / 2 | 0, e = e + (d - b.fh) / 2 | 0, c.save(), c.globalCompositeOperation = "lighter", c.globalAlpha = 0.7, c.drawImage(b, f, e), c.restore())
};
Engine.Projectile.prototype.draw = function (a) {
    if (!(3 > this.tick)) {
        var b, c, d, e, f = Engine.canvas.ctx;
        c = this.animated ? this.frame % this.frames * this.asset.fw : 0;
        d = this.asset.fw | 0;
        e = this.asset.fh | 0;
        b = this.coordToScreen(a, this.asset);
        a = b.x;
        b = b.y;
        a += this.offsetX ? this.offsetX : 0;
        b += this.offsetY ? this.offsetY : 0;
        if (this.inView(d, e, a, b, d, e)) {
            a |= 0;
            b |= 0;
            var g = Engine.Assets.sprites.shadow;
            f.drawImage(g, 0, 0, g.fw, g.fh, a + (d - g.fw) / 2 | 0, b + e - this.asset.fh / 4 | 0, g.fw | 0, this.asset.fh / 2 | 0);
            var g = this.asset.fw / 2 | 0,
                    h = this.asset.fh /
                    2 | 0;
            f.save();
            f.translate(a + g, b + h);
            f.rotate(this.data.r);
            1 > this.opacity && (f.globalAlpha = this.opacity);
            f.drawImage(this.asset, c, 0, d, e, -g, -h, d, e);
            f.restore()
        }
    }
};
Engine.Projectile.Arrow = function (a) {
    Engine.Projectile.Arrow.prototype.uber.constructor.call(this, a);
    this.vel = 0.2;
    this.duration = 32;
    this.counter = 0;
    this.canHurtSelf = this.light = !1
};
Engine.Projectile.Arrow.extend(Engine.Projectile);
Engine.Projectile.Arrow.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.arrow_E;
    Engine.Game.audio.play("arrow", this.data);
    this.uber.init.call(this, a)
};
Engine.Projectile.Arrow.prototype.die = function (a) {
    0 < this.opacity ? (this.opacity -= 0.2 * a, 0 > this.opacity && (this.opacity = 0)) : (this.kill = !0, a = new Engine.FX.Smoketrail(this.data), a.init(), Engine.Game.addObject(a))
};
Engine.Projectile.Arrow.prototype.collide = function (a, b, c) {
    a = new Engine.FX.Smoketrail(this.data);
    a.init();
    Engine.Game.addObject(a);
    this.kill = !0
};
Engine.Projectile.Arrow.prototype.collideWorld = function (a, b) {
    this.counter++;
    this.canHurtSelf = !0;
    if (1 >= this.counter) {
        var c = new Engine.FX.Smoketrail(this.data);
        c.init();
        Engine.Game.addObject(c);
        this.data.r *= -1;
        a && (this.data.mx *= -1, c = 180 * (this.data.r / Engine.math.PI), this.data.r = (c + 180) * Engine.math.PI / 180);
        b && (this.data.my *= -1);
        this.duration += 16;
        Engine.Game.audio.play("ricochet", this.data)
    } else
        this.collidable = !1, this.data.mx = 0, this.data.my = 0, c = new Engine.FX.Smoketrail(this.data), c.init(), Engine.Game.addObject(c)
};
Engine.Projectile.Rocket = function (a) {
    Engine.Projectile.Rocket.prototype.uber.constructor.call(this, a);
    this.vel = 0.025;
    this.v = 0;
    this.duration = 40;
    this.counter = 0;
    this.light = "light_small";
    this.canHurtSelf = !1;
    this.particleTick = 0
};
Engine.Projectile.Rocket.extend(Engine.Projectile);
Engine.Projectile.Rocket.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.rocket;
    Engine.Game.audio.play("rocket", this.data);
    this.uber.init.call(this, a)
};
Engine.Projectile.Rocket.prototype.onTick = function (a) {
    this.v += 0.001 * a;
    this.vel += this.v * a;
    0.25 < this.vel && (this.vel = 0.25);
    this.particleTick++;
    2 == this.particleTick && (this.particleTick = 0, a = new Engine.FX.Smoke(this.data), a.init(), Engine.Game.addObject(a));
    30 <= this.counter && (this.explode(), this.collidable = !1)
};
Engine.Projectile.Rocket.prototype.explode = function () {
    this.canHurtSelf = !0;
    for (var a = 0; 5 > a; a++) {
        var b = new Engine.FX.Explode2(this.data, 2);
        b.init();
        Engine.Game.addObject(b)
    }
    b = new Engine.FX.Explode3(this.data, 1);
    b.init();
    Engine.Game.addObject(b);
    Engine.Game.audio.play("explode", this.data);
    this.kill = !0
};
Engine.Projectile.Rocket.prototype.die = function (a) {
    this.explode()
};
Engine.Projectile.Rocket.prototype.collide = function (a, b, c) {
    a.data.block || a.data.armor ? this.collideWorld() : this.explode()
};
Engine.Projectile.Rocket.prototype.collideWorld = function () {
    this.counter++
};
Engine.Projectile.Grenade = function (a) {
    Engine.Projectile.Grenade.prototype.uber.constructor.call(this, a);
    this.vel = 0.15;
    this.v = 0.1;
    this.velB = 0;
    this.duration = 70;
    this.counter = 0;
    this.canHurtSelf = this.light = !1;
    this.particleTick = 0;
    this.collisionPush = !1
};
Engine.Projectile.Grenade.extend(Engine.Projectile);
Engine.Projectile.Grenade.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.grenade;
    Engine.Game.audio.play("thud", this.data);
    this.uber.init.call(this, a)
};
Engine.Projectile.Grenade.prototype.onTick = function (a) {
    this.data.r = 0 < this.vel ? this.data.r + 0.2 * this.data.mx * a : this.data.r + 0.1 * this.data.mx * a;
    this.vel -= 0.001 * a;
    0 > this.vel && (this.vel = 0);
    0 == this.vel && this.collidable && (this.collidable = !1);
    this.particleTick++;
    4 == this.particleTick && (this.particleTick = 0, a = new Engine.FX.Smoke(this.data), a.init(), Engine.Game.addObject(a))
};
Engine.Projectile.Grenade.prototype.move = function (a, b) {
    this.uber.move.call(this, a, b);
    var c = b[Math.ceil(this.data.y - 0.5)];
    c && (c = c[Math.round(this.data.x)], -1 !== Engine.Assets.data.tilesets["0"].water.indexOf(c) && (c = new Engine.FX.Smoketrail(this.data), c.init(), Engine.Game.addObject(c), this.kill = !0))
};
Engine.Projectile.Grenade.prototype.die = function () {
    this.canHurtSelf = !0;
    for (var a = 0; 5 > a; a++) {
        var b = new Engine.FX.Explode2(this.data, 2);
        b.init();
        Engine.Game.addObject(b)
    }
    b = new Engine.FX.Explode3(this.data, 1);
    b.init();
    Engine.Game.addObject(b);
    this.kill = !0;
    Engine.Game.audio.play("explode", this.data)
};
Engine.Projectile.Grenade.prototype.collide = function (a, b, c) {
    this.canHurtSelf = !0;
    a = new Engine.FX.Smoketrail(this.data);
    a.init();
    Engine.Game.addObject(a);
    this.vel *= 0.3;
    0 > this.vel && (this.vel = 0);
    this.data.mx *= -1;
    this.data.my *= -1
};
Engine.Projectile.Grenade.prototype.collideWorld = function (a, b) {
    this.canHurtSelf = !0;
    this.vel *= 0.45;
    0 > this.vel && (this.vel = 0);
    this.v = 0;
    this.data.r *= -1;
    if (a) {
        this.data.mx *= -1;
        var c = 180 * (this.data.r / Engine.math.PI);
        this.data.r = (c + 180) * Engine.math.PI / 180
    }
    b && (this.data.my *= -1);
    Engine.Game.audio.play("ricochet", this.data)
};
Engine.Projectile.Shell = function (a) {
    Engine.Projectile.Shell.prototype.uber.constructor.call(this, a);
    this.vel = 0.2;
    this.duration = 20;
    this.counter = 0;
    this.collided = !1;
    this.light = "light_small";
    this.canHurtSelf = !1
};
Engine.Projectile.Shell.extend(Engine.Projectile);
Engine.Projectile.Shell.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.shells;
    this.uber.init.call(this, a);
    a = new Engine.FX.Explode2(this.data, 1.5);
    a.init();
    Engine.Game.addObject(a)
};
Engine.Projectile.Shell.prototype.onTick = function (a) {
    this.collided && 0 < this.opacity && (this.vel = 0.1, this.opacity -= 0.24 * a, 0 > this.opacity && (this.opacity = 0))
};
Engine.Projectile.Shell.prototype.die = function (a) {
    0 < this.opacity ? (this.opacity -= 0.24 * a, 0 > this.opacity && (this.opacity = 0)) : (this.kill = !0, a = new Engine.FX.Smoketrail(this.data), a.init(), Engine.Game.addObject(a))
};
Engine.Projectile.Shell.prototype.collide = function (a, b, c) {
    this.kill = !0;
    a = new Engine.FX.Smoketrail(this.data);
    a.init();
    Engine.Game.addObject(a)
};
Engine.Projectile.Shell.prototype.collideWorld = function (a, b) {
    this.kill = !0;
    var c = new Engine.FX.Smoketrail(this.data);
    c.init();
    Engine.Game.addObject(c)
};
Engine.Projectile.Bullet = function (a) {
    Engine.Projectile.Bullet.prototype.uber.constructor.call(this, a);
    this.vel = 0.18;
    this.duration = 46;
    this.particleTick = this.counter = 0;
    this.collided = !1;
    this.light = "light_small";
    this.canHurtSelf = !1
};
Engine.Projectile.Bullet.extend(Engine.Projectile);
Engine.Projectile.Bullet.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.spell;
    Engine.Game.audio.play("bullet", this.data);
    this.uber.init.call(this, a)
};
Engine.Projectile.Bullet.prototype.onTick = function (a) {
    this.collided && 0 < this.opacity && (this.vel = 0.1, this.opacity -= 0.2 * a, 0 > this.opacity && this.die(a));
    this.particleTick++;
    2 == this.particleTick && (this.particleTick = 0, a = new Engine.FX.Fire({
        x: this.data.x,
        y: this.data.y - 0.4
    }), a.init(), Engine.Game.addObject(a))
};
Engine.Projectile.Bullet.prototype.die = function (a) {
    this.kill = !0;
    a = new Engine.FX.Smoketrail(this.data);
    a.init();
    Engine.Game.addObject(a)
};
Engine.Projectile.Bullet.prototype.collide = function (a, b, c) {
    this.kill = !0
};
Engine.Projectile.Bullet.prototype.collideWorld = function (a, b) {
    this.counter++;
    this.canHurtSelf = !0;
    if (3 >= this.counter) {
        this.data.r *= -1;
        if (a) {
            this.data.mx *= -1;
            var c = 180 * (this.data.r / Engine.math.PI);
            this.data.r = (c + 180) * Engine.math.PI / 180
        }
        b && (this.data.my *= -1);
        this.duration += 8
    } else
        this.kill = !0, c = new Engine.FX.Smoketrail(this.data), c.init(), Engine.Game.addObject(c)
};
Engine.Projectile.Bone = function (a) {
    Engine.Projectile.Bone.prototype.uber.constructor.call(this, a);
    this.vel = 0.14;
    this.duration = 72;
    this.counter = 0;
    this.canHurtSelf = this.light = !1
};
Engine.Projectile.Bone.extend(Engine.Projectile);
Engine.Projectile.Bone.prototype.init = function (a) {
    this.asset = Engine.Assets.sprites.projectile_bone;
    Engine.Game.audio.play("arrow", this.data);
    this.uber.init.call(this, a)
};
Engine.Projectile.Bone.prototype.onTick = function (a) {
    this.data.r += 0.12 * a
};
Engine.Projectile.Bone.prototype.die = function (a) {
    0 < this.opacity ? (this.opacity -= 0.2 * a, 0 > this.opacity && (this.opacity = 0)) : (this.kill = !0, a = new Engine.FX.Smoketrail(this.data), a.init(), Engine.Game.addObject(a))
};
Engine.Projectile.Bone.prototype.collide = function (a, b, c) {
    a = new Engine.FX.Smoketrail(this.data);
    a.init();
    Engine.Game.addObject(a);
    this.kill = !0
};
Engine.Projectile.Bone.prototype.collideWorld = function (a, b) {
    this.collidable = !1;
    this.data.mx = 0;
    this.data.my = 0;
    var c = new Engine.FX.Smoketrail(this.data);
    c.init();
    Engine.Game.addObject(c);
    this.kill = !0
};
var Game = function () {
    var a = [],
            b = [],
            c, d, e = [],
            f = [],
            g = 0,
            h = 0,
            k = 0,
            l = {
                dayTime: 0
            },
            m = 0,
            n = 0,
            p = 0,
            r = 0,
            q = 0,
            s = 0,
            v = 0,
            x = 0,
            y = [],
            A = 0,
            z = null,
            u, t, w, B = [],
            D = !1,
            J = 0,
            V = {
                1: "Arrow",
                2: "Rocket",
                3: "Grenade",
                4: "Shell",
                5: "Bullet"
            },
            F = !1;
    waitingForPlayers = !1;
    this.lobbyToJoin = 0;
    this.gameStats = "";
    this.screenshotTaken = 0;
    this.audio = {
        play: function (a, b, c) {
            if (b) {
                var d = Math.abs(b.x - u.data.x);
                b = Math.abs(b.y - u.data.y);
                if (9 < d || 7 < b)
                    return
            }
            Engine.audio.play(a, c || null)
        }
    };
    this.getProjectileById = function (a) {
        return V[a]
    };
    this.init = function () {
        Engine.Elements.append("menu_title");
        var a = new Engine.Screens.Title;
        c = a;
        d = a = new Engine.Screens.Menu;
        W()
    };
    var W = function () {
        if (!Engine.kongregate) {
            var a = window.location.hash.substr(1);
            if (a)
                if (a = a.split("!/lobby/")[1]) {
                    var b = a.substr(-1),
                            c = a.slice(0, -1);
                    Engine.Elements.remove("menu_title");
                    Engine.Elements.append("darken");
                    Engine.checkServerAlive({
                        tag: b
                    }, function () {
                        Engine.Elements.remove("darken");
                        Engine.server.alive ? (Engine.Game.lobbyToJoin = c, Engine.Elements.append("menu_name"), Engine.Elements.append("invite", {
                            id: Engine.Game.lobbyToJoin
                        }),
                                $("#invite").delay(500).fadeIn(750), Engine.server.connected || Engine.Game.connect()) : (Engine.Elements.append("menu_title"), Engine.info("The Game-Server is offline. Please try again later."), Engine.history.pushState())
                    })
                } else
                    Engine.history.pushState();
            else
                Engine.history.pushState()
        }
    };
    this.reloadMap = function () {
        w && (Engine.Assets.bufferDayTime(l.dayTime), w.init(), Engine.addLoading(function () {
            Engine.fps.capture = Engine.now
        }))
    };
    this.getGameTS = function () {
        return m
    };
    this.getLightObjects = function () {
        var a, b =
                w.lightObjects.length,
                c;
        for (a = 0; a < b; a++)
            if (c = w.lightObjects[a], c.free)
                return c.free = !1, c
    };
    this.rebufferObjects = function () {
        var b, c = a.length,
                d;
        for (b = 0; b < c; b++)
            d = a[b], d.nameBuffer && d.initNameBuffer()
    };
    this.getMapObjects = function () {
        return w.objects
    };
    this.render = function (a) {
        switch (Engine.state) {
            case 11:
                d.update(a);
                d.draw();
                0 < s && (a = Math.ceil((s - Engine.now) / 1E3), 0 <= a && (a < x && 0 < a && Engine.audio.play("blip"), Engine.text("visitor", "Game starting" + (0 < a ? " in " + a : "..."), 140 * Engine.scale, Engine.height - 24 * Engine.scale, !1), x = a));
                Engine.keys.WHEEL && Engine.Elements.elements.menu_lobbies.visible && Engine.Elements.elements.menu_lobbies.scrollElem();
                break;
            case 12:
                z && (Engine.audio.stop(z), z = null);
                Engine.audio.isPlaying("results") && Engine.audio.stop("results");
                Engine.audio.isPlaying("menu") || Engine.audio.play("menu");
                Engine.webaudio && (Engine.audio.buses.biquad.frequency.value = 22050);
                Engine.Elements.remove("game");
                Engine.socket.emit("leaveLobby");
                Engine.Elements.append("menu_lobbies");
                Engine.socket.emit("getLobbies");
                Engine.history.pushState();
                Engine.state = 11;
                break;
            case 20:
                K();
                w.update(a, u.data, l);
                L(a);
                M();
                G();
                N.draw();
                H();
                var b, e, f, g, h, k, m = Engine.canvas.ctx;
                b = a = (n - Engine.now) / 1E3;
                a = Math.ceil(a);
                e = 0 < a ? a : "GO!";
                m.save();
                m.fillStyle = "rgba(0,0,0,0.7)";
                f = 0;
                h = Engine.width | 0;
                3 < a ? (k = (n - Engine.now) / 1E3 - a, k = Math.abs(-1 * k), g = (Engine.height - 60 * k * Engine.scale) / 2 | 0, k = 60 * k * Engine.scale | 0, m.fillRect(f, g, h, k), m.restore(), a = void 0) : (g = (Engine.height - 60 * Engine.scale) / 2 | 0, k = 60 * Engine.scale | 0, m.fillRect(f, g, h, k), m.restore(), f = Engine.wH - Engine.Assets.fonts.visitorLarge.fw /
                        2, g = Engine.hH - Engine.Assets.fonts.visitorLarge.fh / 2, k = (n - Engine.now) / 1E3 - a, k += 1, 0 >= a && (k = 1), Engine.text("visitorLarge", e, f, g, !0, k), a = b);
                -0.5 >= a && (u.vel = 1, Engine.state = 2);
                t.drawHUD();
                O();
                break;
            case 2:
                Engine.Game.calcCollidableObjects();
                K();
                u.update(a);
                w.update(a, u.data, l);
                L(a);
                M();
                G();
                1 === t.data.alive && (t.checkHealth(), t.handleInput());
                N.draw();
                H();
                t.drawHUD(a);
                t.shake(u);
                a = (p - Engine.now) / 1E3;
                b = a = Math.ceil(a);
                e = Engine.wH | 0;
                f = 8 * Engine.scale | 0;
                Engine.text("visitor", "Time", e, f, !0);
                0 >= a || (f += Engine.Assets.fonts.visitor.fh,
                        10 >= a ? (e = Engine.wH - Engine.Assets.fonts.visitorLarge.fw / 2, g = (p - Engine.now) / 1E3 - a, g += 1, 0 >= a && (g = 1), Engine.text("visitorLarge", b, e, f, !0, g)) : Engine.text("visitor", b, e, f, !0), 10 >= a && (0 < a && a < r) && Engine.audio.play("blip"), r = a);
                O();
                0 === t.data.alive && (a = Engine.canvas.ctx, a.save(), a.fillStyle = "rgba(100,100,100, .20)", a.globalCompositeOperation = "destination-out", a.fillRect(0, 0, Engine.width, Engine.height), a.restore());
                if (t.isHit || 0 === t.data.alive) {
                    t.hit(u);
                    a = 0;
                    b = 2 * Engine.scale;
                    e = Engine.width;
                    f = 2 * Engine.scale |
                            0;
                    g = (Engine.now / 100 | 0) % (b + f);
                    m = Engine.height / (b + f) | 0;
                    k = Engine.canvas.ctx;
                    k.save();
                    k.fillStyle = "rgb(120, 120, 140)";
                    k.globalAlpha = 0.08;
                    for (h = 0; h < m; h++)
                        a = h * (f + b), a += g, a |= 0, k.fillRect(0, a, e, f);
                    k.restore()
                }
                Engine.fps.capture && Engine.fps.doCapture();
                break;
            case 30:
                G();
                H();
                t.drawHUD(a);
                X();
                break;
            case 40:
                d.update(a);
                d.draw();
                Engine.text("visitor", "Game starting...", 140 * Engine.scale, Engine.height - 24 * Engine.scale, !1);
                break;
            default:
                c.update(a), c.draw()
        }
        D && Engine.Game.takeScreenshot()
    };
    this.isHost = function () {
        return h ===
                k
    };
    this.setCamera = function (b) {
        var c, d;
        for (c = a.length; c--; )
            if (d = a[c], d.data.id === b) {
                u.init(d);
                break
            }
    };
    var H = function () {
        Engine.canvas.ctx.drawImage(Engine.Assets.sprites.frame2, 0, 0)
    },
            N = {
                tick: 0,
                frame: 0,
                r: 0,
                update: function () {
                    this.tick++;
                    360 == this.tick && (this.tick = 0)
                },
                draw: function (a) {
                    this.update();
                    a = Engine.Assets.sprites.cursor;
                    var b, c, d, e, f, g = Engine.canvas.ctx;
                    b = a.fh;
                    Engine.keys.SHOOT && (b = 120 > Engine.now % 240 ? 0 : a.fh);
                    c = a.fw;
                    d = a.fh;
                    e = Engine.keys.MOUSEPOS.x;
                    f = Engine.keys.MOUSEPOS.y;
                    g.save();
                    g.translate(e,
                            f);
                    g.rotate(8 * (this.tick % 360) * Engine.math.PI / 180);
                    g.globalAlpha = Engine.keys.STICKDISTANCE;
                    g.drawImage(a, 0, b | 0, c | 0, d | 0, -(c / 2), -(d / 2), c | 0, d | 0);
                    g.restore()
                }
            },
            O = function () {
                var a = Engine.Assets.sprites.latency,
                        b, c, d, e, f, g = Engine.canvas.ctx,
                        h = Engine.server.ping;
                b = 0;
                c = a.fw;
                d = a.fh;
                e = Engine.width - c - 4 * Engine.scale | 0;
                f = 4 * Engine.scale | 0;
                100 > h ? b = 0 : 100 <= h && 200 > h ? b = d : 200 <= h && (b = 2 * d | 0);
                g.drawImage(a, 0, b, c, d, e, f, c, d)
            },
            X = function () {
                var b, c = y.length,
                        d, f, g, h, k, l, m, n, p = Engine.canvas.ctx;
                f = (Engine.width - 7 * (Engine.width /
                        10)) / 2;
                g = Engine.height / 6;
                var q = y.length.toString().length,
                        r = (q + 3) * 12 * Engine.scale + 12 * Engine.scale | 0;
                p.save();
                p.globalCompositeOperation = "destination-out";
                p.fillStyle = "rgba(0,0,0,0.7)";
                p.fillRect(0, 0, Engine.width, Engine.height);
                p.restore();
                p.fillStyle = "#fff";
                h = f - 4 * Engine.scale;
                k = g - 4 * Engine.scale;
                l = 7 * (Engine.width / 10);
                m = 22 * Engine.scale;
                p.fillRect(h | 0, k | 0, l | 0, m | 0);
                Engine.text("visitorBlack", "Player", f + r, g, !1);
                h = f + 256 * Engine.scale;
                Engine.text("visitorBlack", "Coins", h, g, !1);
                h = f + 338 * Engine.scale;
                Engine.text("visitorBlack",
                        "Accuracy", h, g, !1);
                for (b = 0; b < c; b++)
                    d = y[b], d.kd && ((h = d.kd.toString().split("."), h[1]) ? 1 == h[1].length ? d.kd = h[0] + "." + h[1] + "0" : 2 < h[1].length && (d.kd = h[0] + "." + h[1].substr(0, 2)) : d.kd = h[0] + ".00"), g += 26 * Engine.scale, p.fillStyle = 0 == b ? Engine.hsla(140 + Math.round(Engine.now / 2) % 179, 60, 50, 1) : Engine.hsla(20 * (b - 1) % 360, 60, 50, 1), h = f - 4 * Engine.scale, k = g - 4 * Engine.scale, l = 7 * (Engine.width / 10), m = 22 * Engine.scale, p.fillRect(h | 0, k | 0, l | 0, m | 0), h = f + (q - (b + 1).toString().length) * 12 * Engine.scale, k = g, l = 0 == b ? "st" : 1 == b ? "nd" : 2 == b ? "rd" :
                            "th", l = (b + 1).toString() + l, Engine.text("visitor", l, h, k, !1), h = f + r, k = g, l = d.name, Engine.text("visitor", l, h, k, !1), l = Engine.Assets.sprites.coin, m = 0.75 * l.fw, n = 0.75 * l.fh, h = f + 256 * Engine.scale, k -= 3 * Engine.scale, p.drawImage(l, 0, 0, l.fw | 0, l.fh | 0, h | 0, k | 0, m | 0, n | 0), h += m + 2 * Engine.scale, k = g, l = d.coins, Engine.text("visitor", l, h, k, !1), l = Engine.Assets.sprites.accuracy, m = l.fw, n = l.fh, h = f + 338 * Engine.scale, k -= 3 * Engine.scale, p.drawImage(l, 0, 0, m | 0, n | 0, h | 0, k | 0, m | 0, n | 0), h += m + 2 * Engine.scale, k = g, l = 100 < d.acc ? 100 : d.acc, l += "%", Engine.text("visitor",
                            l, h, k, !1);
                g += 26 * Engine.scale;
                b = Math.round((14E3 - (Engine.now - v)) / 1E3);
                Engine.text("visitor", "Returning to Lobby" + (0 < b ? " in " + b : "..."), Engine.wH, g, !0);
                F || (F = !0, Engine.socket.emit("startAds"));
                if (15E3 < Engine.now - v) {
                    Engine.socket.emit("stopAds");
                    Engine.audio.stop("results");
                    Engine.audio.play("menu");
                    if (Engine.branding)
                        switch (Engine.branding) {
                            case "a10":
                                Engine.initCPMStarAd();
                                break;
                            case "miniclip":
                                Engine.initCPMStarAd();
                                break;
                            case "fgl":
                                Engine.startAds();
                                fgl.showAd();
                                setTimeout(function () {
                                    fgl.adOverlay &&
                                            ($(fgl.adOverlay).remove(), fgl.adOverlay = null);
                                    Engine.stopAds()
                                }, 5E3);
                                break;
                            case "clay":
                                Engine.startAds();
                                Engine.initPreroll(function () {
                                    Engine.stopAds()
                                });
                                break;
                            case "leadbolt":
                                Engine.initLeadboltAd();
                                break;
                            case "cpmstar":
                                Engine.initCPMStarAd();
                                break;
                            case "cpmstarpreroll":
                                Engine.initCPMStarAdPreroll()
                        }
                    Engine.Elements.elements.quit.visible && Engine.Elements.remove("quit");
                    Engine.state = 11;
                    a.length = 0;
                    e.length = 0;
                    g = $("#chatOutput").html();
                    b = $("#chatInput").val();
                    Engine.Elements.remove("game");
                    Engine.Elements.append("menu_lobby");
                    $("#chatLobbyOutput").html(g);
                    $("#chatLobbyInput").val(b);
                    $("#chatLobbyOutput .line").each(function () {
                        $(this).show()
                    });
                    $("#chatLobbyOutput").scrollTop(9999);
                    $("#chatLobbyInput").focus();
                    Engine.socket.emit("requestLobbyData")
                }
            },
            M = function () {
                A += Engine.deltaT;
                if (!(140 > A)) {
                    A = 0;
                    var a = new Engine.FX.AmbientParticle(u.data);
                    a.init();
                    e.push(a)
                }
            },
            K = function () {
                q += Engine.deltaT;
                1E3 <= q && (q = 0, Engine.socket.emit("ping", parseInt(Date.now())))
            };
    this.calcCollidableObjects = function () {
        var c, d = a.length,
                e;
        for (c = b.length =
                0; c < d; c++)
            e = a[c], e.collidable && b.push(e)
    };
    this.getCollidableObjects = function () {
        return b
    };
    var L = function (b) {
        var c, d = a.length,
                g = w.data[Engine.Game.layers.ground],
                h;
        for (c = 0; c < d; c++)
            h = a[c], h.update(b, g), h.kill && (a.splice(c, 1), c--, d--);
        a.sort(P);
        d = e.length;
        for (c = 0; c < d; c++)
            h = e[c], h.update(b), h.kill && (e.splice(c, 1), c--, d--);
        e.sort(P);
        d = f.length;
        for (c = 0; c < d; c++)
            h = f[c], h.update(b), h.kill && (f.splice(c, 1), c--, d--)
    },
            P = function (a, b) {
                return a.data.y === b.data.y ? a.id - b.id : a.data.y - b.data.y
            };
    this.addCameraZoom = function (a) {
        u.addZoom(a)
    };
    var G = function () {
        var b = Engine.canvas.ctx;
        b.globalAlpha = t.isHit ? 0.5 : t.running ? 0.7 : 1;
        w.draw([Engine.Game.layers.ground, Engine.Game.layers.ground2], u.data, l);
        var c = u.data,
                d, g = a.length,
                h;
        for (d = 0; d < g; d++)
            h = a[d], h.light && h.drawLight(c);
        b.globalAlpha = 1;
        w.drawLights(u.data);
        w.draw([Engine.Game.layers.objects], u.data, l);
        b = u.data;
        d = a.length;
        h = w.data[Engine.Game.layers.ground];
        for (c = 0; c < d; c++)
            g = a[c], g.draw(b, h, l, g.data.id == t.data.id);
        w.draw([Engine.Game.layers.overlay], u.data, l);
        b = u.data;
        d = e.length;
        h = w.data[Engine.Game.layers.ground];
        for (c = 0; c < d; c++)
            g = e[c], g.draw(b, h, l, g.data.id == t.data.id);
        w.light(u.data, t.data);
        c = f.length;
        for (b = 0; b < c; b++)
            d = f[b], d.draw();
        0 < Engine.Game.screenshotTaken && Engine.Game.drawFlash()
    };
    this.drawFlash = function () {
        var a = Engine.width,
                b = Engine.height,
                c = Engine.canvas.ctx;
        c.save();
        c.fillStyle = "#fff";
        c.globalAlpha = this.screenshotTaken;
        this.screenshotTaken -= 0.04 * Engine.dt;
        c.fillRect(0, 0, a, b);
        c.restore()
    };
    this.getMessageLength = function () {
        if (0 == f.length)
            return 0;
        var a = f[f.length - 1];
        return a.offsetY + a.offsetY2
    };
    this.takeScreenshot =
            function () {
                if (!(500 > Engine.now - J))
                    if (D) {
                        J = Engine.now;
                        10 == B.length && B.splice(0, 1);
                        this.screenshotTaken = 0.6;
                        var a, b, c, d, e, f, g, h, k;
                        a = document.createElement("canvas");
                        a.id = "screenshot_full_" + Date.now();
                        a.width = Engine.baseWidth * Math.max(Engine.scale, Engine.contextScale) | 0;
                        a.height = Engine.baseHeight * Math.max(Engine.scale, Engine.contextScale) | 0;
                        a.ctx = a.getContext("2d");
                        c = d = g = sy = 0;
                        h = a.width;
                        k = a.height;
                        2 < Math.max(Engine.scale, Engine.contextScale) && (a.width = 2 * Engine.baseWidth | 0, a.height = 2 * Engine.baseHeight |
                                0);
                        Engine.disableSmoothing(a);
                        e = a.width;
                        f = a.height;
                        a.ctx.drawImage(Engine.canvas, g, sy, h, k, c, d, e, f);
                        b = document.createElement("canvas");
                        b.id = "screenshot_thumb_" + Date.now();
                        b.width = 276;
                        b.height = 204;
                        b.ctx = b.getContext("2d");
                        Engine.disableSmoothing(b);
                        c = -((Engine.baseWidth - b.width) / 2) | 0;
                        d = -((Engine.baseHeight - b.height) / 2) | 0;
                        g = sy = 0;
                        h = Engine.canvas.width | 0;
                        k = Engine.canvas.height | 0;
                        e = Engine.baseWidth;
                        f = Engine.baseHeight;
                        b.ctx.drawImage(Engine.canvas, g, sy, h, k, c, d, e, f);
                        B.push({
                            thumb: b,
                            full: a,
                            taken: +new Date,
                            saved: !1
                        });
                        D = !1;
                        I({
                            type: 5,
                            msg: "Screenshot taken. (" + B.length + "/10)"
                        })
                    } else
                        D = !0
            };
    this.getScreenshots = function () {
        return B
    };
    this.connect = function () {
        Engine.server.connect({
            reconnect: !1,
            "force new connection": !0
        });
        Engine.socket.on("connect", function () {
            Engine.server.connected = !0;
            B.length = 0
        });
        Engine.socket.on("connected", function (a) {
            h = a;
            Engine.socket.emit("requestGameStats")
        });
        Engine.socket.on("disconnect", function (b) {
            Engine.server.connected = !1;
            $("#overlay").removeClass("hideCursor");
            Engine.Game.hasMusic() &&
                    (Engine.audio.stop(Engine.Game.hasMusic()), z = null);
            Engine.webaudio && (Engine.audio.buses.biquad.frequency.value = 22050);
            a.length = 0;
            e.length = 0;
            $(".menu").each(function () {
                Engine.Elements.remove($(this).attr("id"))
            });
            c = new Engine.Screens.Title;
            Engine.Elements.append("menu_servers");
            Engine.state = 0;
            b || Engine.info("You have been disconnected.");
            Engine.server.login && (Engine.server.login = !1);
            Engine.history.pushState();
            Engine.Game.lobbyToJoin = 0
        });
        Engine.socket.on("loginFail", function () {
            $("#play_guest").removeClass("active disabled");
            Engine.Elements.remove("darken")
        });
        Engine.socket.on("login", function (a) {
            Engine.server.hash = a;
            Engine.server.login = !0;
            $(".menu").each(function () {
                Engine.Elements.remove($(this).attr("id"))
            });
            0 != Engine.Game.lobbyToJoin ? (Engine.history.pushState(), Engine.socket.emit("joinLobby", Engine.Game.lobbyToJoin, !0), Engine.Game.lobbyToJoin = 0) : Engine.Elements.append("menu_main")
        });
        Engine.socket.on("waitingForPlayers", function (a) {
            switch (a) {
                case 1:
                    if (30 == Engine.state)
                        break;
                    waitingForPlayers || Engine.Elements.append("waiting_for_players");
                    waitingForPlayers = !0;
                    break;
                case 0:
                    waitingForPlayers && Engine.Elements.remove("waiting_for_players"), waitingForPlayers = !1
            }
        });
        Engine.socket.on("inviteLobbyName", function (a) {
            $("#inviteLobbyName").html(a)
        });
        Engine.socket.on("info", function (a) {
            Engine.Elements.remove("darken");
            Engine.info(a)
        });
        Engine.socket.on("console", function (a) {
            console.log(a)
        });
        Engine.socket.on("lobbyOptions", function (a) {
            Engine.Elements.append("lobby_options", a)
        });
        Engine.socket.on("pong", function (a) {
            a = parseInt(Date.now()) - a;
            Engine.server.ping =
                    a
        });
        Engine.socket.on("lobbyList", function (a) {
            var b, c = a.length,
                    d, e = $("#lobbyList").scrollTop();
            a.sort(function (a, b) {
                var c = a.name.toLowerCase(),
                        d = b.name.toLowerCase();
                return c < d ? -1 : c > d ? 1 : 0
            });
            s = 0;
            $("#lobbyList .inner").html("");
            for (b = 0; b < c; b++)
                d = a[b], d = '<div class="lobby selectable selectV ' + (0 == d.members ? "empty" : "") + '" id="lobby_' + d.id + '"><span class="p40">' + d.name + '</span><span class="p40 ' + (d.game ? "tick" : "cross") + '">' + (1 === d.privacy ? '<span class="locked"></span>' : "") + (d.game ? d.map : " Awaiting Game...") +
                        '</span><span class="p20 tright">' + d.members + "/" + d.max + '</span><div class="clear"></div></div>', $("#lobbyList .inner").append(d);
            Engine.Elements.updateInputHandlers();
            $(".lobby").on("click", function () {
                var a = $(this).attr("id").split("_")[1];
                Engine.socket.emit("joinLobby", a)
            });
            $("#lobbyList").scrollTop(e)
        });
        Engine.socket.on("onlineCount", function (a) {
            g = a;
            $("#onlineCount").html(a)
        });
        Engine.socket.on("gameStats", function (a) {
            var b = [],
                    c, d;
            for (c = a.length; c--; ) {
                d = a[c];
                d.n += "";
                d.n = d.n.toString().replace(/\B(?=(\d{3})+(?!\d))/g,
                        ".");
                switch (d.i) {
                    case "killed_npcs":
                        d = d.n + " monsters have been slain";
                        break;
                    case "killed_players":
                        d = d.n + " players have been defeated in battle";
                        break;
                    case "killed_bots":
                        d = d.n + " bots ended up as cannon fodder";
                        break;
                    case "killed_treasures":
                        d = d.n + " treasure chests have been smashed";
                        break;
                    case "looted_coins":
                        d = "Players have collected " + d.n + " coins";
                        break;
                    case "mistakes":
                        d = d.n + " mistakes were made";
                        break;
                    default:
                        d = !1
                }
                d && b.push(d)
            }
            a = b.join("&nbsp;&nbsp;-&nbsp;&nbsp;");
            a += "&nbsp;&nbsp;-&nbsp;&nbsp;";
            Engine.Game.gameStats =
                    a;
            Engine.marquee.start($("#marquee"), a)
        });
        Engine.socket.on("lobbyFail", function () {
            $("#lobby_create").removeClass("active disabled");
            Engine.Elements.remove("darken")
        });
        Engine.socket.on("lobbyCreated", function () {
            Engine.Elements.remove("darken")
        });
        Engine.socket.on("joinLobby", function (a) {
            Engine.Elements.remove("darken");
            B.length = 0;
            $(".menu").each(function () {
                Engine.Elements.remove($(this).attr("id"))
            });
            s = 0;
            Engine.Elements.append("menu_lobby");
            $("#lobby_header").html(a.name);
            a.game && Engine.Elements.append("game_running_notice");
            Engine.history.pushState({
                path: window.location.href + "#!/lobby/" + a.id + Engine.server.current.tag
            })
        });
        Engine.socket.on("leaveLobby", function (a) {
            11 !== Engine.state && (Engine.state = 11, Engine.Elements.elements.game.visible && Engine.Elements.remove("game"));
            s = 0;
            Engine.Elements.elements.menu_lobby.visible && (Engine.Elements.remove("menu_lobby"), Engine.socket.emit("leaveLobby"));
            Engine.Elements.remove("game_running_notice");
            Engine.Elements.append("menu_lobbies");
            Engine.socket.emit("getLobbies");
            Engine.history.pushState();
            a && Engine.info(a)
        });
        Engine.socket.on("lobbyMembers", function (a, b, c) {
            k = c;
            var d, e, f, g = {
                war: {
                    desc: "Warrior",
                    css: "class_war"
                },
                rog: {
                    desc: "Rogue",
                    css: "class_rog"
                },
                mag: {
                    desc: "Mage",
                    css: "class_mag"
                },
                war2: {
                    desc: "Warrior",
                    css: "class_war2"
                },
                rog2: {
                    desc: "Rogue",
                    css: "class_rog2"
                },
                mag2: {
                    desc: "Mage",
                    css: "class_mag2"
                }
            };
            for (d = 0; d < b; d++)
                e = a[d], f = "player" + (d + 1), $("#" + f).removeClass("empty").removeClass("bot").removeClass("active").removeClass("host"), $("#" + f + " .arrows").hide(), $("#" + f).removeClass("class_war").removeClass("class_mag").removeClass("class_rog").removeClass("class_war2").removeClass("class_mag2").removeClass("class_rog2"),
                        "player" === e.type && ($("#" + f).removeClass("empty"), $("#" + f + " .name").html(e.name), $("#" + f + " .desc").html(g[e.job].desc), $("#" + f).addClass(g[e.job].css), e.id === h && $("#" + f + " .arrows").show(), e.id === c && $("#" + f).addClass("host"), e.ready && ($("#" + f).addClass("active"), $("#" + f + " .arrows").hide())), "bot" === e.type && ($("#" + f).removeClass("empty").addClass("bot"), $("#" + f + " .name").html(e.name), $("#" + f + " .desc").html(g[e.job].desc), $("#" + f).addClass(g[e.job].css), h === c && ($("#" + f + " .arrows").show(), $("#" + f + " .button_kickbot").fadeIn(300)),
                        e.ready && ($("#" + f).addClass("active"), $("#" + f + " .arrows").hide(), $("#" + f + " .button_kickbot").hide())), "empty" === e.type && ($("#" + f).addClass("empty"), h === c ? $("#" + f + " .name").html("&lt;P" + (d + 1) + '&gt;<div class="small">click to add CPU</div>') : $("#" + f + " .name").html('<div class="space">&lt;P' + (d + 1) + "&gt;</div>"), $("#" + f + " .button_kickbot").fadeOut(300))
        });
        Engine.socket.on("changeJob", function (a) {
            $(".cla").each(function () {
                $(this).removeClass("active");
                $(this).attr("id").split("_")[1] == a && $(this).addClass("active")
            })
        });
        Engine.socket.on("lobbyMap", function (a) {
            $(".map").each(function () {
                $(this).removeClass("active");
                $(this).attr("id").split("_")[1] == a && $(this).addClass("active")
            })
        });
        Engine.socket.on("lobbyName", function (a) {
            $("#lobby_header").html(a)
        });
        Engine.socket.on("chat", function (a) {
            I(a)
        });
        Engine.socket.on("lobbyTimerStart", function (a) {
            s = Engine.now + a
        });
        Engine.socket.on("lobbyTimerStop", function () {
            s = 0
        });
        Engine.socket.on("gameStart", function (a) {
            Engine.addLoading(function () {
                Engine.audio.play("cheer1");
                m = Date.now();
                $("#lobby_ready").addClass("disabled");
                Engine.Elements.remove("game_running_notice");
                Engine.Elements.append("darken");
                var b = a.map,
                        c = a.options,
                        d = a.player,
                        e = a.objectlist,
                        g = a.npclist,
                        h = a.itemlist,
                        k = a.music;
                f.length = 0;
                B.length = 0;
                u = null;
                b && (w = new Engine.Map(b));
                Q(c);
                R(d);
                S(e);
                T(g);
                U(h);
                Engine.audio.stop("menu");
                z = k;
                Engine.state = 40
            })
        });
        Engine.socket.on("gameLaunch", function (a) {
            Engine.addLoading(function () {
                Y(a)
            })
        });
        Engine.socket.on("gameEnd", function (a) {
            Z(a)
        });
        Engine.socket.on("coinOwnage", function (a) {
            aa(a)
        });
        Engine.socket.on("update", function (b) {
            var c, d = b.length,
                    e, f, g, h, k;
            for (c = 0; c < d; c++) {
                e = b[c];
                g = e.o;
                f = E(e.id);
                if (!1 !== f)
                    for (k in h = a[f].data, void 0 !== g.status && (a[f].resolveStatus(g.status, e.id === t.data.id, t.data.id), delete g.status), e.id === t.data.id && (void 0 !== g.x && (a[f].compensate("x", g.x, g.ts), delete g.x), void 0 !== g.y && (a[f].compensate("y", g.y, g.ts), delete g.y), void 0 !== g.mx && delete g.mx, void 0 !== g.my && delete g.my, void 0 !== g.block && delete g.block, void 0 !== g.power && (t.lastSuper = Engine.now)), void 0 !==
                            g.hp && (a[f].hpCut += h.hp - g.hp, 0 > a[f].hpCut && (a[f].hpCut = 0)), g)
                        h[k] = g[k];
                b.splice(c, 1);
                c--;
                d--
            }
        });
        Engine.socket.on("ws", function (b) {
            var c, d = b.length,
                    e, f;
            for (c = 0; c < d; c++)
                f = b[c], e = E(f.id), !1 !== e && (e = a[e].data, e.x = f.x, e.y = f.y)
        });
        Engine.socket.on("objectlist", function (a) {
            S(a)
        });
        Engine.socket.on("npclist", function (a) {
            T(a)
        });
        Engine.socket.on("itemlist", function (a) {
            U(a)
        });
        Engine.socket.on("itemSpawn", function (b) {
            b = new Engine.FX.Item(b);
            b.init();
            a.push(b)
        });
        Engine.socket.on("itemDespawn", function (b) {
            b = E(b.id);
            if (!1 !== b) {
                var c = new Engine.FX.Collect(a[b].data);
                c.init();
                a.push(c);
                a[b].remove()
            }
        });
        Engine.socket.on("map", function (a) {
            w = new Engine.Map(a)
        });
        Engine.socket.on("changeMap", function () {
            a.length = 0;
            e.length = 0
        });
        Engine.socket.on("flush", function () {
            a.length = 0;
            e.length = 0
        });
        Engine.socket.on("newPlayer", function (b) {
            b = new Engine.EntityPlayer(b);
            b.init();
            a.push(b)
        });
        Engine.socket.on("newNpc", function (b) {
            b = new Engine.Npc(b);
            b.init();
            a.push(b)
        });
        Engine.socket.on("playerLeft", function (b) {
            b = E(b.id);
            !1 !== b && a[b].leave()
        });
        Engine.socket.on("skillAvailable", function (a) {
            t.skillAvailable[a] = !0
        });
        Engine.socket.on("options", function (a) {
            Q(a)
        });
        Engine.socket.on("option", function (a) {
            l[a.opt] = a.val
        });
        Engine.socket.on("player", function (a) {
            R(a)
        });
        Engine.socket.on("death", function (a) {
            t.data.deaths = a.deaths;
            t.data.coins = a.coins
        });
        Engine.socket.on("kill", function (a) {
            t.data.kills = a
        });
        Engine.socket.on("flush", function () {
            a.length = 0;
            e.length = 0
        })
    };
    var aa = function (a) {
        a.players.sort(function (a, b) {
            return b.coins - a.coins
        })
    },
            Z = function (a) {
                2 !==
                        Engine.state ? Engine.Elements.remove("game_running_notice") : a && (Engine.audio.stop(z), Engine.webaudio && (Engine.audio.buses.biquad.frequency.value = 22050), Engine.audio.play("results"), $("#overlay").removeClass("hideCursor"), v = Engine.now, Engine.state = 30, F = !1, a.sort(function (a, b) {
                    return b.coins == a.coins ? b.acc - a.acc : b.coins - a.coins
                }), y = a)
            },
            S = function (b) {
                var c, d, e = b.length;
                for (d = 0; d < e; d++) {
                    c = b[d];
                    if (void 0 !== c.status) {
                        var f, g = c.status.length;
                        for (f = 0; f < g; f++)
                            c.status[f].start = Engine.now
                    }
                    c = new Engine.EntityPlayer(c);
                    c.init();
                    a.push(c)
                }
            },
            T = function (b) {
                var c, d, e = b.length;
                for (d = 0; d < e; d++) {
                    c = b[d];
                    if (void 0 !== c.status) {
                        var f, g = c.status.length;
                        for (f = 0; f < g; f++)
                            c.status[f].start = Engine.now
                    }
                    c = new Engine.Npc(c);
                    c.init();
                    a.push(c)
                }
            },
            U = function (b) {
                var c, d, e = b.length;
                for (d = 0; d < e; d++)
                    c = b[d], c = new Engine.FX.Item(c), c.init(), a.push(c)
            },
            I = function (a) {
                var b;
                b = 11 == Engine.state ? "#chatLobbyOutput" : "#chatOutput";
                var c = '<div class="line" id="t' + Date.now() + '">';
                switch (a.type) {
                    case 0:
                        $(b).append(c + '<span class="chat_sysinfo">' + a.msg +
                                "</span></div>");
                        C(b);
                        2 == Engine.state && (a = new Engine.FX.GameInfo(a.msg), a.init(), f.push(a));
                        break;
                    case 1:
                        if (!Engine.branding || Engine.allowChat[Engine.branding])
                            Engine.audio.play("msg"), b = "#chatLobbyOutput", $(b).append(c + '<span class="username">' + a.name + '</span>: <span class="chat_say">' + a.msg + "</span></div>"), C(b), b = "#chatOutput", $(b).append(c + '<span class="username">' + a.name + '</span>: <span class="chat_say">' + a.msg + "</span></div>"), C(b);
                        break;
                    case 3:
                        $(b).append(c + '<span class="chat_exp">' + a.msg +
                                "</span></div>");
                        C(b);
                        2 == Engine.state && (a = new Engine.FX.GameInfo(a.msg), a.init(), f.push(a));
                        break;
                    case 4:
                        2 == Engine.state && (a = new Engine.FX.GameInfo(a.msg), a.init(), f.push(a));
                        break;
                    case 5:
                        $(b).append(c + '<span class="chat_exp">' + a.msg + "</span></div>");
                        C(b);
                        break;
                    case 6:
                        $(b).append(c + '<span class="chat_sysinfo">' + a.msg + "</span></div>"), C(b)
                }
                2 != Engine.state && 20 != Engine.state || $(b + " .line:last-child").delay(12E3).fadeOut()
            },
            E = function (b) {
                var c, d = a.length;
                for (c = 0; c < d; c++)
                    if (a[c].id === b)
                        return c;
                return !1
            };
    this.getOnlineCount = function () {
        return g
    };
    this.layers = {
        ground: 0,
        ground2: 1,
        objects: 2,
        collision: 3,
        collision2: 4,
        overlay: 5,
        items: 6
    };
    this.addObject = function (b) {
        a.push(b)
    };
    this.addObjectOverlay = function (a) {
        e.push(a)
    };
    this.collision = function (a, b, c) {
        return w.collision(a, b, c)
    };
    var Y = function (a) {
        oTimerHint = Engine.now;
        var b = $("#chatLobbyOutput").html();
        Engine.Elements.remove("menu_lobby");
        Engine.Elements.remove("darken");
        var c = a.timerIntro;
        a = a.timerGame;
        0 < c ? (Engine.state = 20, n = Engine.now + c) : (u.vel = 1, Engine.state =
                2);
        p = Engine.now + a;
        Engine.Elements.append("game");
        $("#chatOutput").append(b);
        $("#chatOutput").scrollTop(9999);
        $("#chatOutput .line").each(function () {
            $(this).hide()
        });
        I({
            msg: "Defeat enemies to get their coins!<br />The player with the most coins wins!",
            type: 6
        });
        $("html").focus();
        Engine.audio.play(z);
        Engine.fps.capture = Engine.now
    };
    this.hasMusic = function () {
        return z ? z : !1
    };
    var Q = function (a) {
        for (var b in a)
            l[b] = a[b];
        Engine.Assets.bufferDayTime(a.dayTime);
        w.updateOptions(a);
        w.init()
    },
            R = function (b) {
                t = new Engine.Player(b);
                t.init();
                a.push(t);
                u || (u = new Engine.Camera(w));
                u.init(t);
                t.camera = u.data
            },
            C = function (a) {
                var b = $(a + " .line").length,
                        c;
                if (40 < b)
                    for (b -= 40, c = 0; c < b; c++)
                        $(a + " .line:eq(" + c + ")").remove();
                $(a).scrollTop(9999)
            }
};